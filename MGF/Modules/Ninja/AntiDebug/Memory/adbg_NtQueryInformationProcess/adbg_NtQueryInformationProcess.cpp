#include "adbg_NtQueryInformationProcess.h"

#define SHOW_DEBUG_MESSAGES

typedef enum _THREAD_INFORMATION_CLASS {
	ThreadBasicInformation,
	ThreadTimes,
	ThreadPriority,
	ThreadBasePriority,
	ThreadAffinityMask,
	ThreadImpersonationToken,
	ThreadDescriptorTableEntry,
	ThreadEnableAlignmentFaultFixup,
	ThreadEventPair,
	ThreadQuerySetWin32StartAddress,
	ThreadZeroTlsCell,
	ThreadPerformanceCount,
	ThreadAmILastThread,
	ThreadIdealProcessor,
	ThreadPriorityBoost,
	ThreadSetTlsArrayAddress,
	ThreadIsIoPending,
	ThreadHideFromDebugger
} THREAD_INFORMATION_CLASS, *PTHREAD_INFORMATION_CLASS;

typedef NTSTATUS(__stdcall *_NtQueryInformationProcess)(_In_ HANDLE, _In_  unsigned int, _Out_ PVOID, _In_ ULONG, _Out_ PULONG);

// =======================================================================
// Memory Checks
// These checks focus on Windows structures containing information which 
// can reveal the presence of a debugger. 
// =======================================================================

/* 
 * // adbg_NtQueryInformationProcess()
 *
 * // How it works:
 * ... There are two checks here... (1. xxx, 2. NoDebugInherit)
 * 
 * // Indication:
 * ...
 *
 * // Bypass:
 * ...
 */
void adbg_NtQueryInformationProcess(void)
{
	HANDLE hProcess = INVALID_HANDLE_VALUE;
	DWORD found = FALSE;
	DWORD ProcessDebugPort = 0x07;	// 1st method; See MSDN for details
	DWORD ProcessDebugFlags = 0x1F;	// 2nd method; See MSDN for details
	
	// Get a handle to ntdll.dll so we can import NtQueryInformationProcess
	HMODULE hNtdll = LoadLibraryW(L"ntdll.dll");
	if (hNtdll == INVALID_HANDLE_VALUE || hNtdll == NULL)
	{
		goto CANT_CHECK;
	}

	// Dynamically acquire the addres of NtQueryInformationProcess
	_NtQueryInformationProcess NtQueryInformationProcess = NULL;
	NtQueryInformationProcess = (_NtQueryInformationProcess)GetProcAddress(hNtdll, "NtQueryInformationProcess");

	if (NtQueryInformationProcess == NULL)
	{
		goto CANT_CHECK;
	}

	// Method 1: Query ProcessDebugPort
	hProcess = GetCurrentProcess();
	NTSTATUS status = NtQueryInformationProcess(hProcess, ProcessDebugPort, &found, sizeof(DWORD), NULL);

	if (!status && found)
	{
		printf("Caught by NtQueryInformationProcess, (ProcessDebugPort)!");
		exit(1);
	}

	// Method 2: Query ProcessDebugFlags
	status = NtQueryInformationProcess(hProcess, ProcessDebugFlags, &found, sizeof(DWORD), NULL);

	// The ProcessDebugFlags caused 'found' to be 1 if no debugger is found, so we check !found.
	if (!status && !found)
	{
		printf("Caught by NtQueryInformationProcess, (ProcessDebugFlags)!");
		exit(1);
	}

	CANT_CHECK:
	_asm
	{
		nop;
	}
}

