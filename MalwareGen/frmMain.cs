using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;


namespace MalwareGen
{
    public partial class frmMain : MetroFramework.Forms.MetroForm
    {
        DirectoryInfo ModuleDirs = new DirectoryInfo(@"Modules");
        DirectoryInfo TemplateDirs = new DirectoryInfo(@"Templates");
        public frmMain()
        {
            InitializeComponent();
            //Modules treeview init
            if (ModuleDirs.Exists)
            {
                treeModules.AfterSelect += treeModules_AfterSelect;
                Controller.BuildTree(ModuleDirs, treeModules.Nodes);
            }
            //template cbb init
            if (TemplateDirs.Exists)
            {
                foreach(DirectoryInfo subdir in TemplateDirs.GetDirectories())
                {
                    cbb_template.Items.Add(subdir);
                }
            }
            //Modules clb init
            clbSModules.DisplayMember = "MName";
            //Inputs listview init
            lvInputs.Columns.Add("Options",100);
            lvInputs.Columns.Add("Values",188);
            lvInputs.View = View.Details;
        }
        private void frmMain_Load(object sender, EventArgs e) { }

        private void treeModules_AfterSelect(object sender, TreeViewEventArgs e)
        {
            Modules test = new Modules();
            if (!e.Node.IsExpanded)
            {
                String[] tmp = Directory.GetFiles(e.Node.FullPath);
                
                foreach (String a in tmp)
                {
                    if (a.Contains(".xml"))
                    {
                        test = new Modules(a);
                        if (test != null)
                        {
                            //Controller.addModules(test);

                            showModuleDescription(test);
                            clbSModules.Items.Add(test, true);
                            //clbSModules.Update();
                            //showModuleInputs(test);
                        }
                    }
                }
            }
            
            
        }
        private void showModuleDescription(Modules mod)
        {
            if (mod != null)
            {
                lbAuthor.Text = mod.Author;
                tbInfo.Text = mod.Info;
                grbInfo.Text = mod.MName;
            }      
        }
        private void showModuleInputs(Modules mod)
        {
            lvInputs.Clear();
            lvInputs.Columns.Add("Options", 100);
            lvInputs.Columns.Add("Values", 188);
            lvInputs.View = View.Details;
            if (mod != null)
            {
                //add Argv if not exist
                if (mod.isIndependentModule() && !mod.hasArgv())
                {
                    Controller.addInputValue(ref mod, "Argv", "");
                }
                //add module input
                foreach (KeyValuePair<String, String> item in mod.Inputs)
                {
                    ListViewItem _list = new ListViewItem(item.Key);
                    ListViewItem.ListViewSubItem _sublist = new ListViewItem.ListViewSubItem(_list, item.Value);
                    _list.SubItems.Add(_sublist);
                    lvInputs.Items.Add(_list);
                }
                //lvInputs.Update();
            }

        }

        private void btn_gen_Click(object sender, EventArgs e)
        {
            tb_name.Text.Trim();
            tb_malPass.Text.Trim();
            Controller.malPass = tb_malPass.Text;
            if (tb_name.Text == null || tb_name.Text == "")
            {
                MetroFramework.MetroMessageBox.Show(this, "Please choose malware's name!");
                return;
            }
            if (cbb_template.SelectedItem == null)
            {
                MetroFramework.MetroMessageBox.Show(this, "Please choose malware's template!");
                return;
            }
            foreach (Modules test in clbSModules.CheckedItems)
            {
                try
                {
                    Controller.addModules(test);
                }
                catch
                {
                    MetroFramework.MetroMessageBox.Show(this,"An error has occured while adding modules " +
                        "", test.MName);
                }   
            }
            //MetroFramework.MetroMessageBox.Show(this,Controller.getAllModuleName());
            //MetroFramework.MetroMessageBox.Show(this,"You've chosen these modules: "+Environment.NewLine+Controller.getAllModuleName());
            try
            {
                DirectoryInfo dif = (DirectoryInfo)cbb_template.SelectedItem;
                String template = dif.FullName;
                Controller.generate(tb_name.Text,template);
            }
            catch(Exception ex)
            {
                Controller.errorHandle();
                MessageBox.Show(ex.ToString());
            }
            Controller.clearAllModules();
        }
        private void btn_cancel_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void clbSModules_SelectedIndexChanged(object sender, EventArgs e)
        { 
            showModuleDescription((Modules)clbSModules.SelectedItem);
            showModuleInputs((Modules)clbSModules.SelectedItem);
        }
        private void lvInputs_ItemActivate(object sender, EventArgs e)
        {
            ListView.SelectedListViewItemCollection test = this.lvInputs.SelectedItems;
            ListViewItem item = test[0];
            if (item.SubItems[0].Text == "Argv" && item.SubItems[1].Text != "")
                return;
            Modules tmp = (Modules)clbSModules.SelectedItem;
            Controller.addInputValue(ref tmp, item.SubItems[0].Text, item.SubItems[1].Text);
            clbSModules.SelectedItem = tmp;
            showModuleInputs((Modules)clbSModules.SelectedItem);
        }
    }
}
