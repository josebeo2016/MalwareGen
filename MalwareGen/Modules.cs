using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Xml;

namespace MalwareGen
{

    public class Modules
    {
        private static Dictionary<String, String> defaultValue = new Dictionary<string, string> {
            { "Spreader","Base64P2P" },
            {"Increaseip","RandomChooseIP_IncreaseIP" },
        };
        public String MName { get; set; }
        public String MType { get; set; }
        public String sourceFile { get; set; }
        public String headFile { get; set; }
        //You can define each module as an Child Class of Module. But we
        //had not enough time.
        public String Author { get; set; }
        public String Reference { get; set; }
        public List<String> Files = new List<string>();
        public List<String> Commons = new List<string>();
        public string Require { get; set; }
        public Dictionary<String,String> Inputs = new Dictionary<String, String>();
        public String Spreader { get; set; }
        public String exploitType { get; set; }
        public String Header { get; set; }
        public String Info { get; set; }
        public String Path { get; set; }
        public String Argv { get; set; }
        public Modules() { }
  
        public Modules(String path)
        {
            this.Path = path.Replace("info.xml", "");

            XmlDocument document = new XmlDocument();
            try
            {
                document.Load(path);
            }
            catch { }
            
            XmlNodeList nodes = document.DocumentElement.ChildNodes;
            foreach (XmlNode childnode in nodes)
            {
                
                if (childnode.Name == "Name")
                {
                    String intext = childnode.InnerText;
                    if (validateInput(ref intext))
                    {
                        this.MName = intext;
                    }
                }
                if (childnode.Name == "Require")
                {
                    String intext = childnode.InnerText;
                    if (validateInput(ref intext))
                    {
                        this.Require = intext;
                    }
                }

                if (childnode.Name == "Type")
                {
                    String intext = childnode.InnerText;
                    if (validateInput(ref intext))
                    {
                        this.MType = intext;
                    }
                }
                if (childnode.Name == "exploitType")
                {
                    String intext = childnode.InnerText;
                    if (validateInput(ref intext))
                    {
                        this.exploitType = intext;
                    }
                }
                if (childnode.Name == "Author")
                {
                    String intext = childnode.InnerText;
                    if (validateInput(ref intext))
                    {
                        this.Author = intext;
                    }
                }

                if (childnode.Name == "Header")
                {
                    String intext = childnode.InnerText;
                    this.Header = intext;
                }

                if (childnode.Name == "Commons")
                    foreach (XmlNode node in childnode.ChildNodes)
                    {
                        String intext = node.InnerText;
                        if (validateInput(ref intext)&&intext !="")
                        {
                            Commons.Add(intext);
                        }
                    }
                if (childnode.Name == "Info")
                {
                    String intext = childnode.InnerText;
                    if (validateInput(ref intext))
                    {
                        this.Info = intext;
                    }
                }
                if (childnode.Name == "Reference")
                {
                    String intext = childnode.InnerText;
                    if (validateInput(ref intext))
                    {
                        this.Reference = intext;
                    }
                }
                if (childnode.Name == "Argv")
                {
                    //add Argv as an INPUT item
                    String intext = childnode.InnerText;
                    //Key is distinct
                    if(!this.Inputs.ContainsKey("Argv"))
                        this.Inputs.Add("Argv", intext);
                }

                if (childnode.Name == "Inputs")
                    foreach (XmlNode node in childnode.ChildNodes)
                    {
                        String key = node.InnerText;
                        if (validateInput(ref key))
                        {
                            //Key is distinct
                            if (!this.Inputs.ContainsKey(key))
                                this.Inputs.Add(key, "");
                        }

                    }

            }
            //add all file of module
            foreach (String file in Directory.GetFiles(this.Path))
            {
                String c = file.Replace(this.Path, "");
                if (c != "info.xml")
                    Files.Add(this.MType + "/"+this.MName+"/"+c);
            }

        }
        private bool validateInput(ref String ret)
        {
            if((!Regex.IsMatch(ret, @"^[a-zA-Z0-9]|^[_-]*$")) || ret =="" || ret==null)
            {
                return false;
            }
            else
            {
                ret = ret.Trim();
                return true;
            }
        }
        public bool isIndependentModule()
        {
            bool check = false;
            if (this.Require == null || this.Require == "" )
                check = true;
            if (this.MType.ToLower() == "exploit")
                check = false;
            return check;
        }
        public bool hasArgv()
        {
            if(this.Inputs.ContainsKey("Argv"))
                if(this.Inputs["Argv"] != "" && this.Inputs["Argv"] != null)
                {
                    return true;
                }
            return false;
        }

    }
}
