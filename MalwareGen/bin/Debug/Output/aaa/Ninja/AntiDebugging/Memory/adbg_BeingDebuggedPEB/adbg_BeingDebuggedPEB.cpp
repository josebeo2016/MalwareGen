#include <Windows.h>
#include "adbg_BeingDebuggedPEB.h"

#define SHOW_DEBUG_MESSAGES

// =======================================================================
// Debugging helper
// =======================================================================
void DBG_MSG(char* message)
{
#ifdef SHOW_DEBUG_MESSAGES
	printf("[MSG-0x]: %s\n", message);
	printf("GAME OVER!");
#endif
}

// =======================================================================
// Memory Checks
// These checks focus on Windows structures containing information which 
// can reveal the presence of a debugger. 
// =======================================================================

/*
 * // adbg_BeingDebuggedPEB()
 *
 * // How it works:
 * Checks the Process Environment Block (PEB) for a "BeingDebugged"
 * field which is set when the process launches under a debugger. This
 * method is exactly what IsDebuggerPresent() checks under the hood,
 * it is simply the assembly version of this call.
 * 
 * // Indication:
 * Look for PEB references.
 * These references typically start with FS:[0x30h]. FS stands for
 * "Frame Segment" and generally indicates references to an application's
 * own internal header structures. These should not raise red flags,
 * however they should be noted.
 *
 * // Bypass:
 * Once the BeingDebugged byte in the PEB is queried, flip the value
 * from 1 to 0 before it is evaluated by the application logic.
 */
void adbg_BeingDebuggedPEB(void)
{
	BOOL found = FALSE;
	_asm
	{
		xor eax, eax;			// clear eax
		mov eax, fs:[0x30];		// Reference start of the PEB
		mov eax, [eax + 0x02];	// PEB+2 points to BeingDebugged
		and eax, 0x000000FF;	// only reference one byte
		mov found, eax;			// Copy BeingDebugged into 'found'
	}

	if (found)
	{
		DBG_MSG("Caught by BeingDebugged PEB check!");
		exit(1);
	}
}

