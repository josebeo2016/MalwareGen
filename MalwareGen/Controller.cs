using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Windows.Forms;
using System.Xml;

namespace MalwareGen
{
    class Controller
    {
        private static List<Modules> lsModules = new List<Modules>();
        private static string[] types = { "exploit","control","ninja","postexploit","scanner","spreader"} ;
        public static string moduleDir = @"Modules";
        public static string templateDir = @"Template";
        public static string outputDir = @"Output";
        public static string getAllModuleName()
        {
            string ret ="";
            foreach(Modules test in lsModules)
            {
                ret += test.MName + Environment.NewLine;
            }
            return ret;
        }
        private static void removeModulebyName(string MName)
        {
            lsModules.Remove(lsModules.Find(p => p.MName == MName));
        }
        public static void BuildTree(DirectoryInfo directoryInfo, TreeNodeCollection addInMe)
        {
            TreeNode curNode = addInMe.Add(directoryInfo.Name);

            //foreach (FileInfo file in directoryInfo.GetFiles())
            //{
               
            //    curNode.Nodes.Add(file.FullName, file.Name);
            //}
            foreach (DirectoryInfo subdir in directoryInfo.GetDirectories())
            {
                BuildTree(subdir, curNode.Nodes);
            }
        }
        public static bool checkMType(Modules mod)
        {
            if (types.Contains(mod.MType.ToLower()))
                return true;
            return false;
        }
        public static void addModules(Modules mod)
        {
            //validate module
            if(mod.MName == "" && !(checkMType(mod)))
            {
                MessageBox.Show("This module is not valid! Please check again");
                return;
            }
            try
            {
                lsModules.Add(mod);
            }
            catch(Exception e)
            {
                MessageBox.Show(e.ToString());
            }
            
        }
        public static void generate(string malName)
        {
            
            //copy template file to output folder
            string targetDir = Path.Combine(outputDir, malName);
            if (!Directory.Exists(targetDir))
            {
                Directory.CreateDirectory(targetDir);
            }
            string headerFile = targetDir + "\\" + malName + ".h";
            string sourceFile = targetDir + "\\" + malName + ".c";
            File.Copy(templateDir+"\\hostip.h",headerFile , true);
            File.Copy(templateDir + "\\hostip.c", sourceFile, true);

            //Create header file
            generateHeader(malName);

        }
        public static void generateHeader(string malName)
        {
            string headerFile = outputDir + "\\" + malName + "\\" + malName + ".h";
            //include source file
            string text = "";
            text = File.ReadAllText(headerFile);
            text=text.Replace("[sourcefile]", "#include \"" + malName + ".c\"");
            
            string tmp = "";
            foreach(Modules test in lsModules)
            {
                //include header file
                foreach (string a in test.Files)
                    tmp += (a.Substring(a.Length-2,2) == ".h") ? "#include \""+a+"\"" + Environment.NewLine : "";
                

            }
            text = text.Replace("[headerfile]", tmp);
            File.WriteAllText(headerFile, text);
        }

    }
}
