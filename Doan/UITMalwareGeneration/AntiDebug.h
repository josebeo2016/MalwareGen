#pragma once
#include <Windows.h>
#include <stdio.h>
//#include <Winternl.h>

typedef enum _THREAD_INFORMATION_CLASS {
	ThreadBasicInformation,
	ThreadTimes,
	ThreadPriority,
	ThreadBasePriority,
	ThreadAffinityMask,
	ThreadImpersonationToken,
	ThreadDescriptorTableEntry,
	ThreadEnableAlignmentFaultFixup,
	ThreadEventPair,
	ThreadQuerySetWin32StartAddress,
	ThreadZeroTlsCell,
	ThreadPerformanceCount,
	ThreadAmILastThread,
	ThreadIdealProcessor,
	ThreadPriorityBoost,
	ThreadSetTlsArrayAddress,
	ThreadIsIoPending,
	ThreadHideFromDebugger
} THREAD_INFORMATION_CLASS, *PTHREAD_INFORMATION_CLASS;

// Debug messages
void DBG_MSG(char* message);

// Dynamically resolved functions
typedef NTSTATUS(__stdcall *_NtQueryInformationProcess)(_In_ HANDLE, _In_  unsigned int, _Out_ PVOID, _In_ ULONG, _Out_ PULONG);
typedef NTSTATUS(__stdcall *_NtSetInformationThread)(_In_ HANDLE, _In_ THREAD_INFORMATION_CLASS, _In_ PVOID, _In_ ULONG);

// Memory
void adbg_BeingDebuggedPEB(void);
void adbg_CheckRemoteDebuggerPresent(void);
void adbg_CheckWindowName(void);
void adbg_IsDebuggerPresent(void);
void adbg_NtGlobalFlagPEB(void);
void adbg_NtQueryInformationProcess(void);
void adbg_NtSetInformationThread(void);
void adbg_DebugActiveProcess(const char*);

// CPU
void adbg_HardwareDebugRegisters(void);
void adbg_MovSS(void);

// Timing
void adbg_RDTSC(void);
void adbg_QueryPerformanceCounter(void);
void adbg_GetTickCount(void);

// Exception
void adbg_CloseHandleException(void);
void adbg_SingleStepException(void);
void adbg_Int3(void);
void adbg_Int2D(void);
void adbg_PrefixHop(void);