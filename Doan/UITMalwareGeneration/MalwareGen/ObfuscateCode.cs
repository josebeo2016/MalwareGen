using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Windows.Forms;

namespace MalwareGen
{
    class ObfuscateCode
    {
        static Random random = new Random((int)DateTime.Now.Ticks);
        static int RandomNumber()
        {
            return random.Next();
        }
        static string RandomAlphanumericString(int length)
        {
            const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            return (new string(Enumerable.Repeat(chars, length)
              .Select(s => s[random.Next(s.Length)]).ToArray()));
        }

        static string RandomHexString(int length)
        {
            const string chars = "abcdef0123456789";
            return (new string(Enumerable.Repeat(chars, length)
              .Select(s => s[random.Next(s.Length)]).ToArray()));
        }

        static string template1()
        {
            string num1 = "0x" + RandomHexString(7);
            string num2 = "0x" + RandomHexString(7);
            string var1 = "i" + RandomAlphanumericString(10);
            string var2 = "i" + RandomAlphanumericString(10);
            string var3 = "i" + RandomAlphanumericString(10);
            int op = RandomNumber() % 8;
            string ope = "";
            switch (op)
            {
                case 0:
                    ope = "+";
                    break;
                case 1:
                    ope = "-";
                    break;
                case 2:
                    ope = "*";
                    break;
                case 3:
                    ope = "/";
                    break;
                case 4:
                    ope = "%";
                    break;
                case 5:
                    ope = "^";
                    break;
                case 6:
                    ope = "&";
                    break;
                case 7:
                    ope = "|";
                    break;
            }

            return @"
int " + var1 + @" = " + num1 + @";
int " + var2 + @" = " + num2 + @";
int " + var3 + @" = " + var1 + " " + ope + " " + var2 + @";
";
        }

        static string template2()
        {
            string num1 = "0x" + RandomHexString(7);
            string num2 = "0x" + RandomHexString(7);
            string num3 = "0x" + RandomHexString(7);
            string num4 = "0x" + RandomHexString(7);
            string num5 = "0x" + RandomHexString(7);
            string var1 = "i" + RandomAlphanumericString(10);
            string var2 = "i" + RandomAlphanumericString(10);
            string var3 = "i" + RandomAlphanumericString(10);
            string var4 = "i" + RandomAlphanumericString(10);
            string var5 = "i" + RandomAlphanumericString(10);

            return @"
int " + var1 + @" = " + num1 + @";
int " + var2 + @" = " + num2 + @";
int " + var3 + @" = " + num3 + @";
int " + var4 + @" = " + var1 + @" + " + var2 + @" - " + var3 + @";
" + var4 + @" = " + num4 + @" * " + var4 + @" + " + num5 + @" - " + var2 + @";
int " + var5 + @" = " + var4 + @" / " + num5 + @" + " + var1 + @" ^ " + var3 + @" - " + num3 + @";
";
        }

        static string template3()
        {
            string num1 = "0x" + RandomHexString(7);
            string num2 = "0x" + RandomHexString(7);
            string num3 = "0x" + RandomHexString(7);
            string num4 = "0x" + RandomHexString(7);
            string num5 = "0x" + RandomHexString(7);
            string var1 = "i" + RandomAlphanumericString(10);
            string var2 = "i" + RandomAlphanumericString(10);
            string var3 = "i" + RandomAlphanumericString(10);
            string var4 = "i" + RandomAlphanumericString(10);
            string var5 = "i" + RandomAlphanumericString(10);

            return @"
int " + var1 + @" = " + num1 + @";
int " + var2 + @" = " + num2 + @";
int " + var3 + @" = " + num3 + @";
int " + var4 + @" = " + var3 + @" * " + var2 + @" + " + var1 + @";
" + var2 + @" = " + num5 + @" + " + var4 + @" + " + num4 + @" + " + var1 + @";
int " + var5 + @" = " + var1 + @" / " + num2 + @" - " + var3 + @" ^ " + var3 + @" ^ " + num3 + @";
";
        }

        static string template4()
        {
            string num1 = "0x" + RandomHexString(7);
            string num2 = "0x" + RandomHexString(7);
            string num3 = "0x" + RandomHexString(7);
            string num4 = "0x" + RandomHexString(7);
            string num5 = "0x" + RandomHexString(7);
            string var1 = "i" + RandomAlphanumericString(10);
            string var2 = "i" + RandomAlphanumericString(10);
            string var3 = "i" + RandomAlphanumericString(10);
            string var4 = "i" + RandomAlphanumericString(10);
            string var5 = "i" + RandomAlphanumericString(10);

            return @"
int " + var1 + @" = " + num1 + @";
int " + var2 + @" = " + num2 + @";
int " + var3 + @" = " + num3 + @";
int " + var4 + @" = " + var3 + @" * " + var2 + @" + " + var1 + @";
" + var2 + @" = " + num5 + @" - " + var4 + @" + 5 + " + num4 + @" + 69 - " + var1 + @";
" + var1 + @" = " + num1 + @" + 10 - " + var2 + @" % 10 + " + num3 + @" + 999 - " + var4 + @";
" + var4 + @" = " + var1 + @" % 5 + " + var3 + @" % " + num2 + @" + 0xcafebabe + " + var1 + @";
" + var3 + @" = " + num1 + @" * 0x100 - " + var1 + @" + 56 ^ " + num2 + @" + 1996 - " + var3 + @";
int " + var5 + @" = " + var3 + @" / 77 + " + num3 + @" - 76 / " + var3 + @" ^ 0x33 % " + var3 + @" % " + num3 + @";
" + var5 + @" = " + num4 + @" * 0x10 - 22 + " + var5 + @" + 56 ^ 0xff + " + var2 + @" + 1996 - 2111 + " + var3 + @";
";
        }

        static string template5()
        {
            string num1 = "0x" + RandomHexString(7);
            string num2 = "0x" + RandomHexString(7);
            string num3 = "0x" + RandomHexString(7);
            string num4 = "0x" + RandomHexString(7);
            string num5 = "0x" + RandomHexString(7);
            string var1 = "i" + RandomAlphanumericString(10);
            string var2 = "i" + RandomAlphanumericString(10);
            string var3 = "i" + RandomAlphanumericString(10);
            string var4 = "i" + RandomAlphanumericString(10);
            string var5 = "i" + RandomAlphanumericString(10);

            return @"
int " + var1 + @";
int " + var2 + @" = " + num2 + @";
int " + var3 + @" = " + num3 + @";
int " + var4 + @" = " + num4 + @";
for(" + var1 + @" = 0; " + var1 + @" < 3; " + var1 + @"++)
{
    " + var2 + @" = " + var1 + @" * 99 - 1000 * " + var3 + @" + 0x456 ^ " + num1 + @" % 5 - " + num5 + @";
    " + var3 + @" = " + var1 + @" * 3 + " + var4 + @" + 0x30 + " + num4 + @" % 123 - " + var3 + @";
    " + var4 + @" = " + var1 + @" * 4 - " + num3 + @" + 0xff / 0x123 - " + num4 + @" % 234 - " + num5 + @";
}
int " + var5 + @" = " + var4 + @" - " + var2 + @" * " + var3 + @" + " + num4 + @";
" + var5 + @" = " + var1 + @" - 50 + 100 - " + num3 + @" ^ 99 * 0x0f - " + num4 + @" % 2 - 3575 + " + num5 + @";
";
        }

        static string template6()
        {
            string num1 = "0x" + RandomHexString(7);
            string num2 = "0x" + RandomHexString(7);
            string num3 = "0x" + RandomHexString(7);
            string num4 = "0x" + RandomHexString(7);
            string num5 = "0x" + RandomHexString(7);
            string var1 = "i" + RandomAlphanumericString(10);
            string var2 = "i" + RandomAlphanumericString(10);
            string var3 = "i" + RandomAlphanumericString(10);
            string var4 = "i" + RandomAlphanumericString(10);
            string var5 = "i" + RandomAlphanumericString(10);

            int a = RandomNumber() % 6;

            return @"
int " + var1 + @" = " + num1 + @";
int " + var2 + @" = " + num2 + @";
int " + var3 + @" = " + num3 + @";
int " + var4 + @" = " + num4 + @";
int " + var5 + @" = " + a + @";
switch(" + var5 + @")
{
    case 0:
        " + var1 + @" = " + var2 + @" - " + num5 + @" * " + var3 + @" / " + @"100;
        " + var2 + @" = " + num3 + @" - 5 +  " + num3 + @" - 6 * " + var2 + @" / 10 + " + @"25;
        " + var3 + @" = " + var1 + @" * 0x12 + " + var4 + @" * 0x15 + " + num4 + @" / 13 + " + num5 + @" + 555;
        " + var4 + @" = " + num1 + @" - 21 + 11 * 1996 - " + var2 + @" + 14520538 - " + var3 + @" - 14520692 + " + num2 + @" - 97;
        break;
    case 1:
        " + var1 + @" = " + var2 + @" - 25 + " + num1 + @" - 40 + " + num3 + @" % 10 + " + @"2;
        " + var3 + @" = " + var3 + @" - 0xff % 3 - " + var4 + @" * 10 + " + num5 + @" / 2 - 10 + " + num2 + @" - 5;
        " + var4 + @" = " + num1 + @" % " + num5 + @" ^ 33 + " + num3 + @" * 0x12 - 30 + " + num3 + @" + 23;
        " + var2 + @" = " + var2 + @" + 321 + " + var3 + @" * 10 * " + var2 + @" / 10 / 2 + " + num5 + @" * 0x60;
        break;
    case 2:
        " + var1 + @" = " + var2 + @" - 45 - " + var3 + @" * 46 + " + num1 + @" / " + @"0xdade;
        " + var2 + @" = " + var2 + @" + " + num5 + @" - " + var3 + @" * " + num2 + @" - 3;
        " + var3 + @" = " + num2 + @" - 0x1 + " + var1 + @" * 0x2 - " + num5 + @" / 0x3 + " + num3 + @";
        " + var4 + @" = " + var1 + @" - 0x4 * " + num1 + @" + 0x1234 - 0x4567 + 0xcafe + " + var2 + @" % 0x432 / " + num4 + @" - 0x23;
        break;
    case 3:
        " + var2 + @" = " + var4 + @" * 2 * " + num2 + @" - 4 + " + num5 + @" + 12 + 34 + " + num1 + @";
        " + var3 + @" = " + var2 + @" - 43 + " + num3 + @" * 3040 - " + num2 + @" % 10 + 1 - " + num3 + @";
        " + var4 + @" = " + num3 + @" - 33 + " + var1 + @" * 0x25 + " + num1 + @" - 3004 + " + num2 + @";
        " + var1 + @" = " + num1 + @" + 2905 % " + var2 + @" * 1996 + " + num4 + @" - 70 * " + num5 + @";
        break;
    case 4:
        " + var4 + @" = " + var2 + @" - 36 +" + num5 + @" * 2001 - " + var3 + @" / 234 + " + @"0x7;
        " + var1 + @" = " + var4 + @" - 0xabcedf + " + num2 + @" * 0xa2bc5 + " + var4 + @" / 0x123 + " + num1 + @";
        " + var3 + @" = " + var1 + @" - 0x124 + 23 / " + var2 + @" / 3 / 2 + " + var3 + @" + 29 - " + num2 + @" + 100;
        " + var2 + @" = " + num2 + @" - 70 + 70  + " + num1 + @" / 2 + 423 - " + num1 + @" / 7749 % " + @"0x1234;
        break;
    case 5:
        " + var2 + @" = " + var2 + @" - 9981 % " + var1 + @" + 111 - " + var3 + @" / 224 % " + num3 + @";
        " + var3 + @" = " + var3 + @" - 339 - " + var3 + @" * 4416 / " + num5 + @" + 5525 + " + num2 + @" % 10;
        " + var4 + @" = " + var4 + @" - 6636 + " + num2 + @" * 7749 + 1 - " + var2 + @" * 8864 / " + @"0xfecba;
        " + var1 + @" = " + num5 + @" - 9981 % " + num1 + @" % 10 % 1010100 - " + num1 + @" - 23 -  " + num5 + @" - 2500;
        break;
}
" + var5 + @" = " + var4 + @" - 0xaa + " + num3 + @" * 46 - 15 / " + var3 + @" + 11 - " + num1 + @";
" + var5 + @" = " + var5 + @" - 70 * 55 - " + var3 + @" ^ 0x99 - 0x567498 % " + num1 + @" % 2 - 234 + " + num2 + @";
";
        }

        static bool IsFunc(string code, int index)
        {
            int i = index;
            while (i >= 0)
            {
                i--;
                if (code[i] == ')')
                    return true;

                if (code[i] == 't')
                {
                    string str = code.Substring(i - 5, 6);
                    if (str == "struct")
                        return false;
                }
            }

            return false;
        }

        static string Run(string code, int level)
        {
            bool bIn = false;
            bool bObfus = false;

            for (int i = 0; i < code.Length; i++)
            {
                if (bIn)//if in func
                {
                    if (code[i] == ';')//obfuscate if see ';'
                    {
                        if (bObfus)
                        {
                            //ObfuscateCode
                            int random = RandomNumber() % level;
                            if (random == 0)
                            {
                                int rrandom = RandomNumber() % 6;
                                string obfus_code = Environment.NewLine + "{";
                                switch (rrandom)
                                {
                                    case 0:
                                        //delete template 6 for fixation
                                        obfus_code += template1();
                                        break;
                                    case 1:
                                        obfus_code += template2();
                                        break;
                                    case 2:
                                        obfus_code += template3();
                                        break;
                                    case 3:
                                        obfus_code += template4();
                                        break;
                                    case 4:
                                        obfus_code += template5();
                                        break;
                                    case 5:
                                        obfus_code += template6();
                                        break;
                                }
                                obfus_code += Environment.NewLine + "}";
                                code = code.Insert(i + 1, obfus_code);
                                i = i + obfus_code.Length + 1;
                            }
                        }
                    }
                    else if (code[i] == 'f')//not obfuscate in for(...)
                    {
                        string str = code.Substring(i, 3);
                        if (str == "for")
                        {
                            while (true)
                            {
                                i++;
                                if (code[i] == ')')
                                    break;
                            }
                        }
                    }
                }
                else//if out function of struct
                {
                    if (code[i] == '{')
                    {
                        bIn = true;
                        if (IsFunc(code, i))
                        {
                            bObfus = true;
                        }
                        else
                        {
                            bObfus = false;
                            int temp = 0;
                            while (bIn)
                            {
                                i++;
                                if (code[i] == '{')
                                {
                                    temp++;
                                }
                                else if (code[i] == '}')
                                {
                                    if (temp == 0)
                                    {
                                        bIn = false;
                                    }
                                    else
                                    {
                                        temp--;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return code;
        }

        public static void Obfuscate(string inputFile, string outputFile, int level)
        {
            try
            {
                string code = File.ReadAllText(inputFile);
                code = Run(code, level);
                File.WriteAllText(outputFile, code);
            }
            catch
            {
                MessageBox.Show("An error occured when obfuscating source code!");
            }
        }
    }
}
